<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Serveurs + code = ༼ つ ͡◕ Ѿ ͡◕ ༽つ - Gabès Jean</title><link href="/" rel="alternate"></link><link href="/feeds/gabes-jean.atom.xml" rel="self"></link><id>/</id><updated>2010-07-12T10:30:01+02:00</updated><entry><title>Retour des RMLL</title><link href="/retour-des-rmll/" rel="alternate"></link><published>2010-07-12T10:30:01+02:00</published><updated>2010-07-12T10:30:01+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2010-07-12:/retour-des-rmll/</id><summary type="html">&lt;p&gt;Retour des RMLL&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Ça y est, les RMLL sont finis, et ont été plutôt intenses :)&lt;/p&gt;
&lt;p&gt;Mine de rien, on a bien avancé avec monitoring-fr, on a monté l'association, on n'a pas trop trollé (un peu tout de même hein), et on a bien échangé sur la supervision et comment bien abordé certaines difficultés.&lt;/p&gt;
&lt;p&gt;Concernant la conférence, les slides sont dispo sur le site des RMLL : &lt;a href="http://2010.rmll.info/IMG/pdf/RMLL2010-AdminSys-SupervisionGrandsEnvironnements.pdf " target="_blank"&gt;http://2010.rmll.info/IMG/pdf/RMLL2010-AdminSys-SupervisionGrandsEnvironnements.pdf &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Grande victoire sur moi même : je ne me suis pas écroulé devant le public. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: c&amp;#39;était pas gagné, je suis ultra timite en fait, quasi maladif.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si certains m'ont trouvé un peu "direct" dans certains réponses, c'est tout simplement car il n'est pas naturel pour moi de monter sur une estrade et que le stress me faisais répondre un peu vite tout simplement, donc désolé si ça en a choqué quelques uns  :-? (la prochaine fois je prends quelques bières avant, promis).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: avec le temps j&amp;#39;ai vu que ce n&amp;#39;était pas que le stress. Quand je suis dans un domaine que je connais, je réponds par
           des affirmations, ça surprends beaucoup en général. Par contre sur un sujet où j&amp;#39;ai des doutes je change de ton direct
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;J'espère que malgré cela la conférence aura plus (et il me semble que ça a été le cas pour beaucoup). Pour ceux qui l'ont ratée, le montage de la vidéo de la conf est en cours par l'équipe de monitoring-fr.org, je ne manquerai pas de prévenir une fois qu'elle sera dispo en ligne  :mrgreen:&lt;/p&gt;
&lt;p&gt;J'espère qu'elle fera réagir l'auteur de Nagios dans le bon sens, il est encore temps de se mettre à travailler ensemble. En tout cas, le projet avance, il semble plaire à beaucoup de monde. J'ai ainsi pu rencontrer l'équipe de &lt;a href="http://fusioninventory.org/wordpress/2010/07/10/back-from-rmll-2010/" target="_blank"&gt;Fusion Inventory&lt;/a&gt; lors des RMLL et il semble que nos projets soient amené à coopérer fortement dans l'avenir  ;-)&lt;/p&gt;
&lt;p&gt;Je remercie les autres membres de la communauté monitoring-fr ainsi que tous ceux qui sont venus nous faire un petit coucou (il fallait réussir à trouver le site des associations hein...), toutes les idées récupérées sur le stand ne seront pas oubliées comme la catégorisation des alertes ou bien l'importance de la notion problèmes/incidents. La fin de l'année sera animée pour Shinken et ses futurs utilisateurs, et un peu de mouvement dans la monde de la supervision, ça ne fait pas de mal  :lol:&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Retour à l'école</title><link href="/retour-a-lecole/" rel="alternate"></link><published>2010-06-09T13:41:54+02:00</published><updated>2010-06-09T13:41:54+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2010-06-09:/retour-a-lecole/</id><summary type="html">&lt;p&gt;Retour à l'école&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Et oui, je retourne à mon ancienne école, mais ce coup-ci, je serai sur l'estrade  :D&lt;/p&gt;
&lt;p&gt;Je vais donner une conférence aux RMLL 2010 sur "Nagios et la gestion des grands environnements". Et ça tombe bien, les conférences se passent à l'ENSEIRB, mon ancienne école  :-)&lt;/p&gt;
&lt;p&gt;Je vais donc aborder Nagios, mais pas que. après une petite présentation rapide de Nagios, et une démystification de ce qu'il est, je vais attaquer avec du gros, du bien costaux : la gestion de la configuration et ses techniques d'héritages.  Après  avoir  perdu  près de la moitié de la salle, j'attaquerai là où ça va faire un peu plus mal pour Nagios : les environnements distribués (et/ou hautement disponible). Je vais évoquer les solutions DNX, NDO et Centreon.&lt;/p&gt;
&lt;p&gt;Après je vais parler un peu de Shinken, qui se propose d'être la solution à tout ça bien sûr :)&lt;/p&gt;
&lt;p&gt;Je ne pourrai pas éviter de parler de l'état actuel du projet Nagios, et d'où il se dirige (le mur...). Je vais essayer de rester le plus objectif possible. A la fin, je ferai conf commune avec la communauté monitoring-fr pour montrer un peu sa nouvelle orientation  ;-)&lt;/p&gt;
&lt;p&gt;J'espère que cette conférence sera sympas à suivre, je vais tout faire pour en tout cas. J'espère y voir beaucoup de monde. C'est le Mercredi 7 Juillet 2010 à 17h à Talence.&lt;/p&gt;
&lt;p&gt;Si au hasard il y a des points particuliers que vous souhaiteriez dedans, c'est le moment :) (oui faut vraiment que je finisse mes slides là..)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: je m&amp;#39;en souviens encore, c&amp;#39;était génial ^^
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Shinken : la 0.1 est arrivée!</title><link href="/shinken-la-01-est-arrivee/" rel="alternate"></link><published>2010-05-31T13:47:01+02:00</published><updated>2010-05-31T13:47:01+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2010-05-31:/shinken-la-01-est-arrivee/</id><summary type="html">&lt;p&gt;Shinken : la 0.1 est arrivée!&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;h2&gt;Elle est enfin là, et elle envoie déjà du gros&lt;/h2&gt;
&lt;p&gt;Bonjour,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;La version 0.1 de Shinken est enfin arrivée&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On va dire que c'est une &lt;em&gt;bonne grosse &lt;/em&gt;0.1 car mine de rien elle possède pas mal de fonctionnalités :
&lt;ul&gt;
    &lt;li&gt;prise en compte de la configuration de Nagios quasi complète&lt;/li&gt;
    &lt;li&gt;reprise des sondes de supervisions et de notifications&lt;/li&gt;
    &lt;li&gt;multiplateforme (testé sur GNU/Linux et Windows, mais doit fonctionner sans soucis partout où roule Python)&lt;/li&gt;
    &lt;li&gt; hautement performant : j'en ai déjà parlé dans ces colonnes, enlever les erreurs de conception de Nagios, ça aide...&lt;/li&gt;
    &lt;li&gt;architecture distribuée et hautement disponibles (bah oui, c'est un peu le but de l'outil hein...)&lt;/li&gt;
    &lt;li&gt;modification à la volée des résultats en fonction de timeperiods&lt;/li&gt;
    &lt;li&gt;configuration des escalades de notifications bien plus simple qu'avec Nagios&lt;/li&gt;
    &lt;li&gt;UTF8 est géré (bah c'est du Python, je ne me suis pas foulé pour l'avoir hein...)&lt;/li&gt;
    &lt;li&gt;un super logo (quoi? c'est une super fonctionnalité nan?)&lt;/li&gt;
    &lt;li&gt;support des exports classiques (Mysql avec NDO et Merlin, Oracle avec NDO, Livestatus et même Couchdb  8-) )&lt;/li&gt;
    &lt;li&gt;plein d'autres trucs qui vont me revenir une fois que j'airai publié ce post....&lt;/li&gt;
&lt;/ul&gt;
Les manques par rapport à Nagios existent, mais ne sont pas loquant pour la quasi totalité des utilisateurs :
&lt;ul&gt;
    &lt;li&gt;manque les / N de saut de jours pour les timeperiods (mais bon, Shinken a les exclusions de timeriods LUI, même si je comprends pourquoi ce n'est toujours pas OK dans Nagios..)&lt;/li&gt;
    &lt;li&gt;pas de variables d'environnements _NAGIOS* lors du lancement des sondes (c'est un oubli tout simplement car je n'utilise pas cette fonctionnalité chez moi), mais peu de sondes l'utilisent de toute manière&lt;/li&gt;
    &lt;li&gt;pas de commandes de types OCSP : dans Nagios elles ne servent qu'à la partie distribuée, donc bon...&lt;/li&gt;
    &lt;li&gt;10 ans de tests de l'application derrière elle... bon ça je ne vais pas le régler du jour au lendemain je crois...  :lol:&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;h2&gt;Mais comment on la teste?&lt;/h2&gt;
&lt;p&gt;Le code est dispo sur le site officiel du projet : &lt;a href="http://www.shinken-monitoring.org" target="_blank"&gt;http://www.shinken-monitoring.org&lt;/a&gt;. Outre le classique tarball installable très facilement (Python + Pyro en apt-get et hop, c'est parti :) ), j'ai tout prévu pour les feignants (qui à dit "administrateurs efficaces"?) : une VM toute prête à être lancée est disponbile sur le site. Elle est importable sous VirtualBox et VMWare.&lt;/p&gt;
&lt;p&gt;Mais comment on peut tester facilement un service daemon? Bah avec les interfaces wbe préinstallé pardi  ;-)&lt;/p&gt;
&lt;p&gt;Elles sont au nombre de deux : Ninja et Thruk. Elle s'accèdent facilement avec un http://IPDELAVM/ (connectez vous avec le compte shinken/shinken, puis faites ifconfig pour voir votre IP, et enfin lancez ./launch_all.sh pour lancer Shinken et Thruk).&lt;/p&gt;
&lt;p&gt;Bref, aucune excuse pour ne pas tester. La configuration en place est un exemple de distribuée et hautement disponible : deux ordonnanceurs actifs et un en spare. De quoi killer du process sans peur :)&lt;/p&gt;
&lt;p&gt;Le fichier README_FIRST.txt vous aidera d'ailleurs lors de ces tests en proposant des kill et moyens de vérifier que ça tourne toujours.&lt;/p&gt;
&lt;h2&gt;Et ensuite? Seedcamp!&lt;/h2&gt;
&lt;p&gt;Ok, la 0.1 est sortie, elle est chaude, possède sûrement un ou deux bugs, mais après, il se passe quoi? Et bien vous serez ravi d'aprendre que Nagios lance seedcamp, un concours pour des propositions d'amélirations de Nagios ou d'addons. La description complète est dispo sur le &lt;a href="http://www.nagios.org/seedcamp" target="_blank"&gt;site de Nagios&lt;/a&gt;. Et bien vous avez devinez, Shinken va participer! Il est lancé demain 1er juin. Shinken compte bien être le premier projet proposé  :mrgreen:&lt;/p&gt;
&lt;p&gt;Outre le fait que ça me fait bien marrer de participer (en plus si je gagne, ça me financera assez pour aller présenter Shinken un peu partout), c'est l'occasion rêvée de voir un peu comment est vu Shinken par rapport au &lt;em&gt;Nagios Corporate&lt;/em&gt; : les participants sont évalués par la communauté. Bien entendu, si vous liez en bas le réglement de seedcamp, il y a des possibilité d'exclusions pour les projets farfelus. Je pense (espère) que Shinken ne rentre pas là dedans. Je pense donc que Shinken sera évalué de manière pertinente par celle à qui il est destiné : la communauté Nagios.
&lt;h3&gt;Si exclu?&lt;/h3&gt;
Et s'il est exclu? Bah là le message sera clair : les possibilités d'inclusions dans le projet officiel Nagios sont morts. Shinken sera dès à présents libres (enfin encore plus que maintenant) par rapport au projet Nagios. La compatibilité des interfaces, sondes et configurations seront conservées, mais il n'y aura plus aucune retenue quand à rajouter des modules qui sont trop inovants par rapport à Nagios (comme un module de configuration en base par exemple).
&lt;h3&gt;Si écrasé?&lt;/h3&gt;
S'il ne gagne pas et fait un score minable? Bah je me retire au tîbet... nan je blague, fait trop froid pour moi là bas. Mais je continuerai à l'améliorer jusqu'à ce qu'il remporte les suffrages de la communauté Nagios je pense.
&lt;h3&gt;Et si c'est le champion?&lt;/h3&gt;
S'il gagne haut la main? Là, ça va être drôle. Le fait de revenir sur le choix du Python sera un niet ferme s'il n'est pas motivé techniquement, et puis bon le C c'est bien dans un noyau, mais en dehors faut vraiment en avoir besoin hein... Ceci dépendra des conditions d'inclusion de Shinken dans Nagios en fait.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: spoiler: il a perdu ^^
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Les vraies chances de réussites&lt;/h3&gt;
&lt;p&gt;En fait au vu de l'histoire récente, je serai le premier étonné de la victoire de Shinken. Pas pour ses qualités techniques ou ses nouvelles possibiltiés d'architecture. En elles j'ai toute confiance. Non, c'est sur le plan humain que je pense que c'est difficile : Ethan n'a jamais pris officiellement position sur Shinken, même en privé. Une exclusion de seedcamp m'effrai un peu, mais au moins on y verra plus clair.&lt;/p&gt;
&lt;p&gt;Mais qui sait, la réunification tant attendue est peu être au bout du chemin, en tout cas, le proposition va être faite, on sera vite fixé.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: j&amp;#39;ai toujours pas de positonnement officiel. Par contre du non officiel j&amp;#39;en ais eu à la pelle ^^
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Et ensuite seedcamp?&lt;/h2&gt;
&lt;p&gt;Peu importe seedcamp et ses résultats, de nombreuses choses sont encore en cours pour Shinken. Si d'ailleurs vous souhaitez filez un coup de main, c'est sans aucun problème  :mrgreen:&lt;/p&gt;
&lt;p&gt;La roadmap/ticket tracking est là pour ça sur &lt;a href="https://sourceforge.net/apps/trac/shinken/report/2" target="_blank"&gt;source forge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bon test de cette première version. dites moi un peu ce que vous en pensez, ainsi que du tout nouveau site de Shinken d'ailleurs  :-)&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Shinken : example de Hack rapide du code</title><link href="/shinken-example-de-hack-rapide-du-code/" rel="alternate"></link><published>2010-05-05T16:36:53+02:00</published><updated>2010-05-05T16:36:53+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2010-05-05:/shinken-example-de-hack-rapide-du-code/</id><summary type="html">&lt;p&gt;Shinken : example de Hack rapide du code&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;h2&gt;Un exemple de hack rapide&lt;/h2&gt;
&lt;p&gt;Dans un précédent post, j'ai déjà parlé des méthodes de développement que j'ai utilisé dans Shinken. Tout ceci a pour but de faciliter le développement par la suite, comme le rajout facile d'une propriété sans avoir à se soucier des héritages, distributions sur les différents éléments de l'architecture, etc etc.&lt;/p&gt;
&lt;p&gt;Nous allons en voir un exemple avec un cas simple : le rajout d'un paramètre pour l'historique du &lt;em&gt;flapping&lt;/em&gt; dans Shinken. En effet, Nagios et Shinken sont capables de détecter un élément qui fait le "yoyo" entre deux états. Plutôt que de spammer les users avec des notifications UP/DOWN/UP/DOWN, les schedulers sont assez malin (entendez utilisent un bête algorithme) pour s'apercevoir que l'état à changé X% de fois au cours des N derniers tests. La valeur X était déjà paramétrable pour les hôtes et les services, mais celle de N était hardcodée à 20 états.&lt;/p&gt;
&lt;p&gt;Le problème c'est que 20 états ce n'est pas assez pour détecter un yoyo sur toute la nuit. Il arrive donc souvent des cas où l'on est averti pour rien, juste car on ne peux pas augmenter cette valeur. C'est dommage  :cry:&lt;/p&gt;
&lt;p&gt;Et bien plus maintenant  :mrgreen: !&lt;/p&gt;
&lt;p&gt;Je l'ai rajouté dans Shinken en quelques lignes qui vont vous monter à quel point c'est simple d'aller hacker dans ce code, 5 lignes seulement dans notre cas  :-D&lt;/p&gt;
&lt;h2&gt;La modification&lt;/h2&gt;
&lt;p&gt;Tout se joue dans deux fichiers sources :
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;config.py&lt;/strong&gt; : qui gère les paramètres de configurations globaux&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;schedulingitem.py&lt;/strong&gt; : qui gère les algorithmes d'ordonnancement, des demandes de checks et autres.&lt;/li&gt;
&lt;/ul&gt;
Dans le premier (&lt;em&gt;config.py&lt;/em&gt;) on remarque un tableau nommé &lt;em&gt;properties &lt;/em&gt;vers le début du fichier avec toutes les propriétés possibles pour le fichier principal (nagios.cfg).&lt;/p&gt;
&lt;p&gt;Qu'à cela ne tienne, on va rajouter notre nouvelle propriété :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;flap_history&amp;#39; : {&amp;#39;required&amp;#39;:False, &amp;#39;default&amp;#39;:&amp;#39;20&amp;#39;, &amp;#39;pythonize&amp;#39;: to_int, &amp;#39;class_inherit&amp;#39; : [(Host, None), (Service, None)]},
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On rajoute donc le paramètre &lt;em&gt;flap_history&lt;/em&gt;, qui n'est pas obligatoire (required=False), vaut par défaut 20, se transforme en objet &lt;em&gt;int &lt;/em&gt;depuis la lecture de la chaîne de caractère dans le fichier, et va être présentée aux classes &lt;em&gt;Host &lt;/em&gt;et &lt;em&gt;Service &lt;/em&gt;avec ce même nom de &lt;em&gt;flap_history&lt;/em&gt; (rôle de None, expliqué un peu plus haut dans le code, si vous mettez un nouveau nom, c'est lui qui sera utilisé pour cette classe).&lt;/p&gt;
&lt;p&gt;Et voila, c'est tout pour la configuration ! Et oui, rien de plus. L'Arbiter va lire la configuration, transformer en entier la valeur, mettre 20 si elle est absente et va la fournir aux configurations envoyées aux schedulers automatiquement ! Là, ne pas hacker un tel code, c'est plus que de la fainéantise  :lol:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: ça reste encore une de mes réalisations favorite du code de Shinken
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On a réglé le problème de la configuration, maintenant on va utiliser notre nouvelle propriété. Ceci se passe dans deux fonctions du fichier &lt;em&gt;schedulingitem.py&lt;/em&gt; : &lt;em&gt;add_flapping_change&lt;/em&gt; et &lt;em&gt;update_flapping&lt;/em&gt;. La première rajoute le changement d'état sur la pile de 20 éléments et s'assure que la pile fait toujours au plus 20 éléments. La seconde fait le calcul de &lt;em&gt;pourcentage de changement&lt;/em&gt; à proprement parlé.&lt;/p&gt;
&lt;p&gt;Les &lt;em&gt;schedulingitems &lt;/em&gt;sont les hosts/services (une classe commune pour factoriser le code), et l'objet est nommé &lt;strong&gt;self &lt;/strong&gt;en Python. On a dit que la propriété a été envoyée sur les classes &lt;em&gt;Host &lt;/em&gt;et &lt;em&gt;Service &lt;/em&gt;car c'est un paramètre global à tous les hôtes et services, pas la peine de le multiplier par le nombre d'hôtes et services. En Python, pour accéder à sa classe (qui est un objet comme un autre), il suffit de faire :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;self.__class__
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Donc là pour obtenir notre valeur, il suffit de faire :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;flap_history = self.__class__.flap_history
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On remplace les trois occurrences de 20 qui trainent dans le code par &lt;em&gt;flap_history&lt;/em&gt; et c'est réglé, on peut tester/commiter  8-)  :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if len(self.flapping_changes) &amp;gt; flap_history:
    r += i*(1.2-0.8)/flap_history + 0.8
    r = r / flap_history
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Au final&lt;/h2&gt;
&lt;p&gt;Nous avons vu la définition et l'utilisation d'un paramètre global dans Shinken. C'est très simple, et il ne faut pas se priver  :-) Nous verrons une autre fois le rajout d'un paramétrage dans un service ou un hôte, c'est encore plus simple qu'ici car il n'y a pas besoin de passer par l'accrochage dans les classes &lt;em&gt;Host &lt;/em&gt;et &lt;em&gt;Service&lt;/em&gt;. Mais ce sera pour une prochaine fois, j'ai un git push à faire.&lt;/p&gt;
&lt;p&gt;Si vous souhaitez hacker vous aussi, n'hésitez pas :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://github.com/naparuba/shinken.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;J'accepte volontiers les patchs :)&lt;/p&gt;
&lt;p&gt;Juste pour info, dans le code de Nagios, si on voulait faire la même chose, il faudrait changer la macro &lt;strong&gt;MAX_STATE_HISTORY_ENTRIES&lt;/strong&gt; en simple variable :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; grep -r MAX_STATE_HISTORY_ENTRIES * | wc -l
 30
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;30 lignes au minimum juste pour la partie traitement! Je n'ose même pas regarder combien de lignes ceci va coûter pour la configuration, mais bien plus d'une, ça c'est sûr...  :-?&lt;/p&gt;
&lt;p&gt;Notez bien que je ne dis pas ça pour me moquer des développeurs de Nagios, comme quoi le code est imbitable non, car je n'aurais sûrement pas fait mieux en C. C'est juste pour illustrer que parfois, utiliser des techniques de développements avancées (le &lt;em&gt;développement dynamique &lt;/em&gt;qui a un peu irrité lors de l'annonce de Shinken sur la mailing list), ça ne fait pas de mal à l'efficacité...&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Shinken : tagguez vos pollers</title><link href="/shinken-tagguez-vos-pollers/" rel="alternate"></link><published>2010-05-05T10:10:20+02:00</published><updated>2010-05-05T10:10:20+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2010-05-05:/shinken-tagguez-vos-pollers/</id><summary type="html">&lt;p&gt;Shinken : tagguez vos pollers&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;h2&gt;Découpage organisationnel/technique&lt;/h2&gt;
&lt;p&gt;Dans l'Architecture de Shinken, un point important concerne les Realms (royaumes) qui servent à découper dans pans entiers d'infrastructure, comme un site distant par exemple, ou bien un client pour une entreprise qui propose une prestation de supervision.&lt;/p&gt;
&lt;p&gt;Ce découpage est donc soit organisationnel, soit technique. Mais pour ce dernier, le choix du découpage se fait sur des critères géographiques, en terme de réseau principalement (pour ne pas avoir de fréquentes communications inter-continents par exemple).&lt;/p&gt;
&lt;p&gt;Shinken fonctionne sur Windows (avec des services et tout et tout), et il est donc tentant de placer un poller sur un tel OS afin de lancer directement ses checks depuis une machine (et un compte de domaine) qui a les droits sur les autres machines, pour faire du WMI par exemple.&lt;/p&gt;
&lt;p&gt;Mais comment faire en sorte que les commandes pour Windows partent sur ces pollers "Windows" et pas les classiques pollers "Linux"? &lt;/p&gt;
&lt;p&gt;On peut se dire que l'on utilise les realms, mais ce n'est pas une bonne idée en fait. Les realms sont des cloisonnements, il n'y a pas d'échange entre les schedulers (même au sein d'un realm d'ailleurs). &lt;/p&gt;
&lt;p&gt;Donc si un administrateur défini un Realm Linux et un Realm Windows, il va pouvoir obtenir l'effet souhaité (des commandes qui vont sur les bons pollers), mais à un prix énorme : plus de liens (dépendances) entre les hôtes Linux et Windows...&lt;/p&gt;
&lt;h2&gt;Cloisonnement technique&lt;/h2&gt;
&lt;p&gt;C'est pour cela que dans un même realm, il doit être possible de cloisonner "techniquement" les commandes sur des pollers. Ce cloisonnement, qui va être optionnel bien sûr, se fera dans la configuration avec une nouvelle option : &lt;strong&gt;poller_tag&lt;/strong&gt;. Comme son nom l'indique, un poller va avoir un ou plusieurs tags, et les checks vont pouvoir également être &lt;em&gt;taggués&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Si le tag au niveau des pollers est simple, se pose la question du tag des commandes : à quel niveau doit-on tagguer? commands, services, hosts? Et pourquoi pas les 3 finalement? L'héritage serait host-&amp;gt;service-&amp;gt;commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: je crois qu&amp;#39;on a eu un bug dessus l&amp;#39;année dernière, c&amp;#39;était pas si clair au final.
           je vois donc que le bug a duré 10ans, pas mal ^^
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Le tag des commands est simple : une commande définie comme un exe au sens windows (PE et non pas ELF) sera naturellement tagguée "windows-poller". Les tags au niveau service/hosts seraient un peu comme un "mini-realm" : au lieu de définir un realm complet (avec un couple scheduler/poller) pour une DMZ par exemple, il peut être pratique de juste dédier un poller (ou deux) dans cet environnement, et de &lt;em&gt;tagguer &lt;/em&gt;les hôtes/services.&lt;/p&gt;
&lt;h2&gt;Un mini-realm?&lt;/h2&gt;
&lt;p&gt;Ceci n'est pas complètement orthogonal aux realms je l'admets, mais c'est plus une réponse aux "proxy nrpe windows" qu'à un réel besoin organisationnel que proposent les Realms.&lt;/p&gt;
&lt;p&gt;Au passage, cette implémentation va être un bon exemple de "Hack" possible de Shinken. Je vais essayer de noter/expliquer l'implémentation dans un document afin de montrer que développer pour Shinken n'est pas complexe, loin de là :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: ça l&amp;#39;est encore dans le coeur, je suis content :)
           c&amp;#39;est pas trivial, mais pas non plus ultra complexe
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Shinken : quelques news sur la prochaine 0.1</title><link href="/shinken-quelques-news-sur-la-prochaine-01/" rel="alternate"></link><published>2010-04-26T15:00:18+02:00</published><updated>2010-04-26T15:00:18+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2010-04-26:/shinken-quelques-news-sur-la-prochaine-01/</id><summary type="html">&lt;p&gt;Shinken : quelques news sur la prochaine 0.1&lt;/p&gt;</summary><content type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: oh la doc, ça prends du temps, mais du temps!
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- relu --&gt;

&lt;p&gt;Bonjour,&lt;/p&gt;
&lt;p&gt;Ça fait quelques temps que je n'ai pas parlé de Shinken. &lt;/p&gt;
&lt;p&gt;Outre le fait que j'avais des articles à finir pour LinuxMag et autres (comme celui sur l'art de la guerre appliqué au logiciel libre), les points traités ces temps-ci sur le projet ne sont pas spectaculaires, mais pourtant importants.&lt;/p&gt;
&lt;p&gt;Tout d'abord le projet a une véritable documentation.&lt;/p&gt;
&lt;p&gt;Celle-ci est basée sur le formidable travail de l'équipe monitoring-fr qui a transformé la documentation HTML de Nagios en DocBook.&lt;/p&gt;
&lt;p&gt;Ce format est en XML, mais il n'est pas si mal que ça.&lt;/p&gt;
&lt;p&gt;Il me rappelle un peu le LaTeX en fait. &lt;/p&gt;
&lt;p&gt;Un grand merci à l'équipe &lt;a href="http://www.monitoring-fr.org"&gt;monitoring-fr&lt;/a&gt; pour ce travail titanesque. &lt;/p&gt;
&lt;p&gt;Celui-ci permet en effet d'automatiser des exports de la configurations dans différents formats. &lt;/p&gt;
&lt;p&gt;Les deux utilisés pour l'instant sont le PDF et le XHTML. &lt;/p&gt;
&lt;p&gt;Ce dernier est justement à jour sur &lt;a href="http://www.shinken-monitoring.org/doc/"&gt;le site du projet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Là encore, le style CSS utilisé est un mix entre le style utilisé par l'équipe monitoring-fr et celui du site de Shinken  :)&lt;/p&gt;
&lt;p&gt;Dans la configuration sont présentes les informations pour configurer les satellites afin de monter une architecture distribuée hautement disponible. &lt;a href="http://shinken-monitoring.org/doc/gettingstarted-quickstart-windows.html"&gt;Une page&lt;/a&gt; a été rajoutée également par rapport à la documentation Nagios classique : une mise en place sur Windows ! Sur ce système, il est en effet possible (et même très simplement) de mettre en place Shinken en tant que Service Windows. Un cas particulier peu intéresser du monde : imaginez un daemon poller qui tourne avec un compte de domaine qui a le droit de faire des requêtes WMI sur les autres Windows du domaine? Plus besoin de monter une application pour faire un relai WMI, c'est natif avec Shinken  8-)&lt;/p&gt;
&lt;p&gt;Je n'ai pas encore fait de tests de performances sur cet environnement, mais je ne m'attends pas à avoir 150000checks/5min comme sur un Linux car Windows est bien moins à l'aise lorsqu'il s'agit de lancer des processus. D'après ce que j'ai commencé à voir, un serveur devrait être largement suffisant pour une moyenne entreprise.&lt;/p&gt;
&lt;p&gt;Pour la version 0.1, il ne reste plus grand chose en attende en fait. La documentation est perfectible, mais acceptable. Il y a encore un petit bug avec la gestion des Downtimes sur la partie Notifications, mais Gerhard est en train de l'éradiquer, encore merci à lui  ;-)&lt;/p&gt;
&lt;p&gt;Le site devrait bientôt avoir une petite animation sur le fonctionnement de Shinken par rapport à son architecture, mais je n'en dit pas plus, ceci sera une petite surprise pour la 0.1&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Nagios : de l'open source à l'open core ?</title><link href="/nagios-de-lopen-source-a-lopen-core/" rel="alternate"></link><published>2010-04-20T13:29:28+02:00</published><updated>2010-04-20T13:29:28+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2010-04-20:/nagios-de-lopen-source-a-lopen-core/</id><summary type="html">&lt;p&gt;Nagios : de l'open source à l'open core ?&lt;/p&gt;</summary><content type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: SPOILER: j&amp;#39;au du faire de l&amp;#39;open core également, je n&amp;#39;ai pas réussi autrement :(
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- relu --&gt;

&lt;h2&gt;L'open core : Community/Enterprise&lt;/h2&gt;
&lt;p&gt;Je viens de tomber sur deux posts intéressants &lt;a href="http://www.openxtra.co.uk/blog/an-exploration-of-open-core-licensing-in-network-management/"&gt;ici &lt;/a&gt;et &lt;a href="http://www.openxtra.co.uk/blog/musings-upon-the-open-core-functionality-ceiling/"&gt;là&lt;/a&gt; qui traitent d'un problème qui se répand de plus en plus dans les logiciels &lt;em&gt;ouverts &lt;/em&gt;touchant au monde de l'administration et supervision système : le modèle Community/Enterprise, déjà utilisé par Zenoss par exemple. Ce modèle à un nom en fait : &lt;em&gt;open core&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Le principe est simple : 
 * une version &lt;em&gt;open source&lt;/em&gt;, nommée &lt;em&gt;Community&lt;/em&gt;, est fournie. 
 * Une version &lt;em&gt;Enterprise&lt;/em&gt;, privatrice, est également présente et est la seule version supportée par la société éditrice du logiciel.&lt;/p&gt;
&lt;p&gt;Cette version possède des fonctionnalités bien plus avancées que la Community. Il est dit qu'au bout d'un moment, les avancées de la version Enterprise sont avantageux pour la community. Mais on peut se demander si ce n'est pas exactement l'inverse qui est plus réaliste.&lt;/p&gt;
&lt;p&gt;Si l'on regarde un peu les versions Community de logiciels utilisant déjà ce principes, on s'aperçoit qu'un risque majeur les touchent déjà : le seuil de fonctionnalités. Comme va l'évoquer notre très cher JP Troll dans un de ses futurs articles (scoop inside :mrgreen:  ), ceci consiste à limiter le nombre de fonctionnalités que l'on fait entrer dans la version communautaire pour toujours garder un avantage certain à la version Enterprise.&lt;/p&gt;
&lt;p&gt;Prenons deux exemples déjà utilisé dans un des deux articles cités : Zenoss et Hyperic-hq dans leurs versions communautaires. Les courbes ci-dessous sont la taille du code de ces versions fournies par &lt;a href="https://www.ohloh.net/"&gt;ohloh&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ohloh.net/p/zenoss/analyses/latest"&gt;Zenoss &lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/66/zenoss.png"&gt;&lt;img class="alignnone size-full wp-image-525" title="zenoss" src="/images/66/zenoss.png" alt="zenoss" width="580" height="166" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ohloh.net/p/4335/analyses/latest"&gt;Hyperic &lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/66/zenoss.png"&gt;&lt;/a&gt;&lt;a href="/images/66/hyperic.png"&gt;&lt;img class="alignnone size-full wp-image-526" title="hyperic" src="http://www.gabes.fr/jean/wp-content/uploads/2010/04/hyperic.png" alt="hyperic" width="580" height="166" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On note un certain plafond, tout particulièrement pour Hyperic-hq. Les développeurs se sont endormis? Certainement pas. Mais pourquoi chercher à améliorer la version &lt;em&gt;shareware &lt;/em&gt;de leur outils?&lt;/p&gt;
&lt;p&gt;Oups, le terme est sorti. &lt;em&gt;Shareware&lt;/em&gt;. Ne nous voilons pas la face, les versions communautaires y ressemblent fortement : limitées, elles demandent de passer à la version complète pour en profiter réellement. Au moins, ce n'est pas limité dans le temps, c'est déjà ça. De plus, il est toujours possible de forker, même si dans les faits, personne ne s'y attaque (vous avez vu un peu le nombre de lignes de code de ces outils?  ;-)  ).&lt;/p&gt;
&lt;p&gt;Mais ce modèle implique que les patchs proposés dans la version communautaire soient "laissés" à l'éditeur pour qu'il puisse les intégrer à la version privatrice.&lt;/p&gt;
&lt;h2&gt;Et Nagios ?&lt;/h2&gt;
&lt;p&gt;Mais alors où est le rapport avec Nagios finalement? Regardons un peu sa courbe de développement :&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/66/nagios-codehistory.png"&gt;&lt;img class="alignnone size-full wp-image-527" title="nagios-codehistory" src="/images/66/nagios-codehistory.png" alt="nagios-codehistory" width="580" height="166" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vous allez me dire que c'est une habitude chez Ethan (l'auteur principal de Nagios) d'avoir un tel fonctionnement, ce qui est particulièrement compréhensible après tout et l'on n'a rien à y redire. Mais regardons un peu ce qu'il a annoncé sur la mailing list :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;There is nothing broken or wrong with Nagios Core the way it is.&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ah.. bah rangez vos patchs, la courbe va rester plate un moment alors... &lt;/p&gt;
&lt;p&gt;Mais pourquoi refuser toute avancées majeure? Nagios XI tout simplement? (pour rappel, Nagios XI est une solution privatrice basée sur Nagios éditée par Nagios Enterprise).&lt;/p&gt;
&lt;p&gt;Après tout nous avons également "Our commercial Nagios XI solution is not 100% Open Source, and it  probably won't ever be in its entirety. [...] Most all other commercial  Nagios solutions out there go the same route." et "commercialization  of Nagios is going to expand in the future, so we can continue to  provide more great solutions for the people that need them."&lt;/p&gt;
&lt;p&gt;Le modèle "open core" est assez bien annoncé lorsque l'on met tout bout à bout. Procès d'intentions? Je pense que l'on a assez d'éléments pour dire que non.&lt;/p&gt;
&lt;h2&gt;Modèle efficace dans le cas de Nagios?&lt;/h2&gt;
&lt;p&gt;Outre le fait qu'un modèle purement open source (et non logiciel libre), et a fortiori open core, n'est pas efficace (&lt;a href="/art-of-free-software-war/"&gt;cf article sur l'art de la guerre&lt;/a&gt;), on peut se poser la question si l'open core va bien fonctionner dans le cas de Nagios.&lt;/p&gt;
&lt;p&gt;Pas si sûr. Contrairement à Zenoss et Hyperic, le code de Nagios est à tous ses auteurs respectifs, donc impossible de changer ou rajouter un licence. La solution XI ne peux pas rajouter un broker fermé il me semble, vu qu'il se charge dans un code GPLv2 (je peux me tromper sur ce point). Donc au pire, c'est le contour de la solution qui va être fermé. On a d'ailleurs eu une reprise en main de NDO, ce n'est pas pour en rajouter un autre, mais bien l'utiliser comme base, même si le schémas de la base justement est critiquable.&lt;/p&gt;
&lt;p&gt;Contrairement à Zenoss et Hyperic encore une fois, l'offre "Enterprise" a mis du temps à se lancer. Des solutions alternatives existent déjà, et sont de très bonnes qualités (Centreon, Op5 Monitor 5). Pour Op5, un des développeurs principal de Nagios est même de la partie, avec son couple Merlin/Ninja.&lt;/p&gt;
&lt;p&gt;Pour avoir un vrai modèle &lt;em&gt;open core&lt;/em&gt; efficace, Nagios Enterprise a raté le coche. Il ne peut pas "boucler" des points clés de l'outil pour saper la concurrence, et arrive même après elle. Son auteur y pensait peut être depuis le début, mais il aurait du faire comme les autres dès ce moment là.  Maintenant au milieu du guet, on va juste avoir une dispersion des solutions. Toute basées sur le même cœur oui, mais solutions qui vont devenir (ou sont même déjà) incompatibles entre elles. Centreon va lancer son propre broker (dont les fonctionnalités font saliver d'avance :) ), Op5 lui part sur Merlin, et Nagios XI reste semble-t-il en NDO. Heureusement pour les utilisateurs, Centreon et Op5 semblent se mettre d'accord sur un modèle de base commun, ce qui est particulièrement bien pensé.&lt;/p&gt;
&lt;p&gt;Ne nous voilons pas la face, la véritable intelligence ne va plus être dans le cœur de Nagios, mais bien dans ses solutions externes. Il va rester l'ordonnanceur central avec ses petits défauts de conceptions qu'on lui connait pour les environnements distribués, mais les corrélations, la notion d'évènement et les analyses vont se faire au niveau d'au dessus. Et tant mieux après tout, ce n'est pas à un ordonnanceur de gérer cela.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: en fait, l&amp;#39;inteligence n&amp;#39;est PAS dans le moteur, c&amp;#39;est con mais c&amp;#39;est pas d&amp;#39;un moteur que les utilisateurs ont besoin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Je reste persuadé que lorsque l'on parle d'outils de supervision, l'apport de la communauté est indispensable. De plus, aucune entreprise, même de taille moyenne, ne se lancerait dans un projet de supervision sans support et surtout sans intégration. Les licences ne sont qu'un facteur limitant (le nombre de machines explosent dans les datacenters, une solution sans licence à l'agent est nettement avantagée). Nagiox XI a un intérêt, c'est l'éditeur lui même. Mais le code de Nagios n'évolue plus trop, donc l'intérêt de ce choix est limité pour les utilisateurs.&lt;/p&gt;
&lt;p&gt;Ethan avait-il seulement le choix de partir sûr cette solution? Si l'on reste pragmatique, je ne pense pas. Même en partant d'une solution libre (pardon, open source) qui existait déjà, il perdait sa légitimité d'&lt;em&gt;auteur principal&lt;/em&gt; (du cœur oui, de la solution non), véritable argument marketing. Monter sa propre solution avec seulement des briques libres prends plus de temps qu'en faisant des concessions privatrices. Simple problématique de &lt;em&gt;time to market&lt;/em&gt; finalement.&lt;/p&gt;
&lt;h2&gt;Est-ce dommageable ?&lt;/h2&gt;
&lt;p&gt;Dans les faits, le &lt;em&gt;seuil de fonctionnalités&lt;/em&gt; est déjà présent depuis un moment pour le cœur Nagios. On n'a donc pas à avoir peur de l'avenir, on y est déjà.&lt;/p&gt;
&lt;p&gt;Heureusement, les moyens de "bloquages" d'avancées en open source ne sont pas totalement actifs, en tout cas pour les solutions. Le cœur? Il va rester ce qu'il est, un très bon ordonnanceur. Tout le monde va sortir l'intelligence de l'outil. Question de modularité après tout. La phase de transition va être pénible, mais le temps que l'utilisateur a toujours une solution libre à sa disposition, ceci reste acceptable.&lt;/p&gt;
&lt;p&gt;Nagios ne sera jamais totalement comme Zenoss finalement, et tant mieux. Il va aller vers autre chose. Il faut juste attendre vers quoi. Ou bien amorcer soit même la transformation en regardant ce qui est le plus propice à l'instant t pour arriver à une situation qui nous est avantagée, car il parait que c'est ce qu'il y a le plus efficace  ;-)&lt;/p&gt;
&lt;p&gt;Ceci va également être l'occasion de voir un peu l'affrontement des modèles &lt;em&gt;open  source&lt;/em&gt; et &lt;em&gt;open core&lt;/em&gt;. Cette année va décidément être marrante :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: j&amp;#39;aimerai bien que ce soit aussi simple, mais:
           * juste un moteur c&amp;#39;est rigolo, mais ça marche pas dans le grand bain, faut plus de finition
           * tu finances rien avec juste de l&amp;#39;open source dans ce marché :(
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Art of (free software) war</title><link href="/art-of-free-software-war/" rel="alternate"></link><published>2010-04-18T13:43:27+02:00</published><updated>2010-04-18T13:43:27+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2010-04-18:/art-of-free-software-war/</id><summary type="html">&lt;p&gt;Art of (free software) war&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: je reste persuadé que le logiciel libre devrait gagner dans l&amp;#39;absolu. Mais ça c&amp;#39;était en partant du principe qu&amp;#39;on 
           cherchait l&amp;#39;efficicence. 12ans après, je pense que nos civilisations ne cherchent que les gains immédiats sans trop
           réfléchir aux conséquences, le monde douillet étant comme la grenouille dans sa casserole :(
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ce texte fait suite à la lecture de trois ouvrages :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;« Richard Stallman et la révolution du logiciel libre »&lt;/li&gt;
&lt;li&gt;« L'art de la guerre » de Sun Tzu&lt;/li&gt;
&lt;li&gt;« Traité de l'efficacité » de François Jullien. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si le premier est une oeuvre bien connue des acteurs du monde du libre, les deux dernières méritent
également d'être lues. &lt;/p&gt;
&lt;p&gt;L'art de la guerre est le grand classique sur la vision des affrontements du
point de vue chinois. &lt;/p&gt;
&lt;p&gt;Le second en est un approfondissement : il présente les pensés occidentales et
orientales de l'efficacité de la guerre, mais aussi plus généralement de toute activité humaine.&lt;/p&gt;
&lt;p&gt;Ce sont justement ces idées que je vais tenter d'appliquer au monde du libre. Je n'ai fait que tenter
d'appliquer ce qu'il explique si bien à notre environnement.&lt;/p&gt;
&lt;p&gt;Lors de la lecture de la biographie de Richard Stallman sortie dernièrement (et dont je recommande chaudement la lecture), un chapitre m'a un peu interpellé : celui qui montre la différence entre le mouvement Open Source et celui du Logiciel Libre.&lt;/p&gt;
&lt;p&gt;L'Open Source se concentre sur l'obtention de logiciels les plus performants et stables possibles. C'est une vue purement technique qui pense que la méthode de développement ouverte est la plus performante possible. Ils s'opposent ainsi aux logiciels privateurs en proposant des logiciels ouverts performants.&lt;/p&gt;
&lt;p&gt;Le Logiciel Libre repose quant à lui sur la sauvegarde des libertés des utilisateurs. Le fait d'avoir des logiciels au code ouvert n'est qu'une nécessité pour arriver à ce but. Ce n'est pas l'objectif final. Sa principale méthode reste la persuasion sur l'importance de la sauvegarde des libertés. Il s'oppose également aux logiciels privateurs.&lt;/p&gt;
&lt;p&gt;J'ai cherché à savoir lequel était le plus "efficace" dans cette guerre face aux logiciels privateurs. Pour cela, j'ai fais un parallèle entre ces deux protagonistes et les méthodes occidentale et chinoise de la stratégie. Les idées utilisées pour décrire l'efficacité de ces dernières sont celles de l'essai "Traité de l'efficacité" de François Jullien (disponible &lt;a href="http://www.amazon.fr/Traité-lefficacité-François-Jullien/dp/2253942928/ref=pd_sim_b_3"&gt;là&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Au final, on voit que le logiciel libre est plus efficace dans cette guerre que le mouvement open source. Ceux qui veulent savoir pourquoi peuvent accéder à cette étude sur ce lien : &lt;a href="/art-of-free-software-war-fr/"&gt;étude sur l'art de la guerre appliqué au logiciel libre&lt;/a&gt;.&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Art of (free software) war - FR</title><link href="/art-of-free-software-war-fr/" rel="alternate"></link><published>2010-04-18T13:39:15+02:00</published><updated>2010-04-18T13:39:15+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2010-04-18:/art-of-free-software-war-fr/</id><summary type="html">&lt;p&gt;Art of (free software) war - FR&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: traité philosophie sur le logiciel libre vs open source? FAIT.
           ma prof de philo de lycée serait fière je pense :)
           Lisez Traité de l&amp;#39;efficacité, François Jullien, édition Le Livre de Poche, un chef d&amp;#39;oeuvre
&lt;/pre&gt;&lt;/div&gt;


&lt;!--        @page { margin: 2cm }       P { margin-bottom: 0.21cm }         H1.western { font-family: "Tahoma", sans-serif; font-size: 16pt; font-weight: normal }      H1.cjk { font-family: "Lucida Sans Unicode" }       H1.ctl { font-family: "Tahoma" }        H2.western { font-family: "Tahoma", sans-serif; font-size: 14pt; font-weight: normal }      H2.cjk { font-family: "Lucida Sans Unicode" }       H2.ctl { font-family: "Tahoma" }        H3.western { font-family: "Tahoma", sans-serif; font-size: 12pt; font-weight: normal }      H3.cjk { font-family: "MS Mincho" }         H3.ctl { font-family: "Tahoma" }        P.sun-tzu { background: #e6e6e6 } --&gt;

&lt;p style="margin-top: 0.42cm; margin-bottom: 0.5cm; page-break-after: avoid;"&gt;&lt;span style="font-family: Arial Black,sans-serif;"&gt;&lt;span style="font-size: x-large;"&gt;&lt;strong&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;The art of (free software) war&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p align="RIGHT"&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;&lt;strong&gt;Gabès Jean&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;1. Introduction sur ce texte&lt;/span&gt;&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Ce texte fait suite à la lecture de trois ouvrages : « Richard Stallman et la révolution du logiciel libre », « L'art de la guerre » de Sun Tzu, et « Traité de l'efficacité » de François Jullien.  Si le premier est une œuvre bien connue des acteurs du monde du libre, les deux dernières méritent également d'être lues. L'art de la guerre est le grand classique sur la vision des affrontements du point de vue chinois. Le second en est un approfondissement. Il présente les pensés occidentales et orientales de l'efficacité de la guerre, mais aussi plus généralement de toute activité humaine. Ce sont justement ces idées que je vais tenter d'appliquer au monde du libre. Je n'ai fait que tenter d'appliquer ce qu'il explique si bien à notre environnement.&lt;/span&gt;&lt;/em&gt;
&lt;h1&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;2. En quoi le terme guerre est-il adapté à l'environnement des logiciels? &lt;/span&gt;&lt;/em&gt;&lt;/h1&gt;
&lt;em&gt;&lt;span style="font-style: normal;"&gt;Le titre l'a déjà annoncé : nous allons adapter l'art de la guerre à l'environnement du Libre. Mais pourquoi &lt;/span&gt;&lt;/em&gt;&lt;em&gt;guerre&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;? Elle constitue le summum des affrontements antagonistes. L'environnement du libre, et plus généralement des logiciel, est particulier. Il représente à la fois ce qui est le plus binaire et platement théorique par son côté technique de codes et d'algorithmes, et sur ce point  il est soumis aux règles strictes de la production. Il est également soumis à des conflits car hautement concurrentiel. Les projets s'affrontent sur des aspects techniques motivés par un environnement très lucratif.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Nous pouvons rajouter que l'accès au code source est également important car il rajoute une nouvelle dimension possible au conflit : en plus de la lutte entre les logiciels, nous pouvons avoir une lutte en leur sein. Là encore, les considérations techniques ne sont pas les seules à être importantes, loin de là. On pourrait presque dire qu'elles sont bien souvent de second ordre. Lorsque des conflits arrivent au sein des projets, ils sont bien souvent dût à une mauvaise entente entre les personnes, ou bien un problème d'orientation. Je ne traiterai pas ce genre de « guerre » qui est plus de l'ordre de la psychologie et des orgueils mal placés qu'autre chose.&lt;/span&gt;&lt;/em&gt;
&lt;h1&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;3. Qui est l'&lt;/span&gt;&lt;/em&gt;&lt;em&gt;ennemi&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt; de cette guerre ?&lt;/span&gt;&lt;/em&gt;&lt;/h1&gt;
&lt;em&gt;&lt;span style="font-style: normal;"&gt;Il faut évoquer nos belligérants pour notre guerre des logiciels. D'un côté, nous auront les projets du Libre. De cet aspect &lt;/span&gt;&lt;/em&gt;&lt;em&gt;Libre&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt; découle ce que nous pourrons appeler l'&lt;/span&gt;&lt;/em&gt;&lt;em&gt;ennemi&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt; : les logiciels &lt;/span&gt;&lt;/em&gt;&lt;em&gt;privateurs&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;. Ce terme est plus adapté que &lt;/span&gt;&lt;/em&gt;&lt;em&gt;propriétaires&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt; tel qu'il a été utilisé pendant des années comme nous le verrons par la suite.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Les intérêts financiers aidant, entre ces deux là, la guerre fait rage. L'auteur de ce document étant pro-libre, vous me verrez pas ici un l'éloge des logiciels privateurs. C'est plutôt un texte sur comment le Libre peut (doit) prendre le dessus en étant le plus &lt;/span&gt;&lt;/em&gt;&lt;em&gt;efficace&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt; dans cette guerre.&lt;/span&gt;&lt;/em&gt;
&lt;h1&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;4. Différents modèles de théorie de la guerre dans le monde&lt;/span&gt;&lt;/em&gt;&lt;/h1&gt;
&lt;em&gt;&lt;span style="font-style: normal;"&gt;Nous avons notre guerre de posée. Comme pour toute étude, partons de la théorie afin de mieux la comprendre avant d'aller dans les détails de son implémentation. Dans ce domaine, deux grandes écoles s'affrontent. Nous avons d'un côté la pensée occidentale, dont le plus grand théoricien de la guerre est &lt;/span&gt;&lt;/em&gt;&lt;em&gt;Clausewitz&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;. De l'autre nous avons la Chine avec son célèbre &lt;/span&gt;&lt;/em&gt;&lt;em&gt;Art de la guerre&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt; de &lt;/span&gt;&lt;/em&gt;&lt;em&gt;Sun Tzu&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;.&lt;/span&gt;&lt;/em&gt;
&lt;h2&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;4.1 Modèle Occidental : modèle théorie/pratique, épopées et héroïsme&lt;/span&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;em&gt;&lt;span style="font-style: normal;"&gt;Il est intéressant de voir que les occidentaux ont du mal à définir une théorie de la guerre. Il y a bien des recettes pour la tactique d'attaque une fois sur le terrain, comme par exemple comment positionner ses troupes ou prévoir les ressources. Mais la stratégie, qui consiste à penser les engagements tactiques, n'a jamais été traitée efficacement. En fait pour Clausewitz elle est même in-modélisable. Pour lui il y a une trop grande part de hasard dans la guerre. Elle n'est pas prévisible, et c'est même sa principale caractéristique : « Ce qui fait la guerre c'est précisément cette distance inévitable qu'y prend le réel vis-à-vis de son modèle : penser la guerre, en somme, c'est penser comment elle est portée à trahir son concept ».&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;En fait, le problème de recherche de la théorie parfaite de Clausewitz est bien plus général que cette simple problématique de &lt;/span&gt;&lt;/em&gt;&lt;em&gt;guerre&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;. Il a tenté de la faire rentrer dans le schéma classique de la théorie-pratique, un héritage de la Grèce antique et de notre cher Aristote. Nous (occidentaux héritiers de ce mode de pensé) avons l'habitude de penser un modèle parfait, puis de le faire entrer dans les faits. Si cette méthode est idéale dans le mode &lt;/span&gt;&lt;/em&gt;&lt;em&gt;production&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;, elle n'est pas adaptée aux autres activités humaines. Le problème, et la guerre l'illustre bien, est que dans ce cas le réel est particulièrement mouvant. Le passage théorie-pratique n'est jamais parfait, voir même systématiquement éloigné de ce qui était prévu.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Ceci va amener notre civilisation à glorifier des héros spécialistes de l'action qui luttent contre cette mouvance, comme Achille dans l'Iliade. Ces héros ne peuvent réussir pleinement par eux même, du fait même de cette aspect aléatoire de la guerre. Dans notre cas, ce sont les dieux qui doivent pallier cela : leur omnipotence permet de ne plus &lt;/span&gt;&lt;/em&gt;&lt;em&gt;subir&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt; l'aléatoire des affrontements, comme Ulysse qui ne peut rentrer chez lui sans le soutien d'Athéna.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Avec du recul, on voit que les écrits occidentaux classiques sur la guerre ne parlent pas réellement de sa &lt;/span&gt;&lt;/em&gt;&lt;em&gt;théorie&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;, mais simplement des &lt;/span&gt;&lt;/em&gt;&lt;em&gt;bonnes pratiques&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;. Ainsi, au lieux d'avoir penser la guerre, ils étudient et appliquent une sorte d'heuristique génétique en mélangeant des schémas qui ont déjà fonctionné afin d'affronter des situations totalement nouvelles. Si les engagements peuvent se ressembler, la stratégie à adopter est quant à elle tout le temps nouvelle.&lt;/span&gt;&lt;/em&gt;
&lt;h2&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;4.2 Chine : utilisation de la propension de la situation&lt;/span&gt;&lt;/em&gt;&lt;/h2&gt;
Les textes chinois anciens se piochent leurs idées dans une école de pensée bien différente de nos grecs : le &lt;em&gt;taoïsme&lt;/em&gt;, l'art de rechercher le &lt;em&gt;tao&lt;/em&gt;, la voie&lt;em&gt;.&lt;/em&gt; Elle part du principe que toute action qui cherche à faire changer le réel de manière directe n'est pas idéale, car trop complexe et aléatoire. Il n'ont pas fait de distinctions entre un modèle parfait et le monde réel. Ils pensent qu'il faut faire avec ce que l'on a sous la main et ne pas chercher un idéal, mais plutôt améliorer ce qui est déjà réel. Sans cette distinction, qui est la base de la pensée occidentale, il n'y a pas besoin de revenir du modèle idéal pour l'appliquer au réel, avec toute la perte d'efficacité que ceci engendre.&lt;/p&gt;
&lt;p&gt;Il est pour eux bien plus &lt;em&gt;efficace&lt;/em&gt; d'étudier la situation et d'en voir les potentiels d'évolutions qui y sont présents afin d'influer sur eux, et non directement sur la situation en elle même. Ceci dans le but de faire évoluer cette dernière vers une direction qui est notre vrai objectif. La facilité de cette entreprise réside dans le fait que la transformation de ce qui est encore au stade de prémisse est facile. Cette &lt;em&gt;facilité&lt;/em&gt; est à opposer à celle qui réside dans la &lt;em&gt;difficile modification directe&lt;/em&gt; de la situation présente qui est déjà actualisée avec la seule utilisation d'actions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Cette manière de procéder nécessite une étude approfondie de la situation actuelle et de savoir déceler au plus tôt sa &lt;/span&gt;&lt;/em&gt;&lt;em&gt;propension&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt; afin de savoir vers où elle est sujette d'aller et d'en modifier le cours le plus tôt afin que ce soit le plus facile et le moins réversible possible.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Ce manque d'actions explique pourquoi les chinois n'ont pas ou très peu de grands &lt;/span&gt;&lt;/em&gt;&lt;em&gt;héros&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;. Ceci explique également l'absence d'&lt;/span&gt;&lt;/em&gt;&lt;em&gt;épopées&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt; comme en occident.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Leur théorie se veut complète. Elle ne cherche pas à penser un modèle idéal pour ensuite le faire entrer à coup de marteaux dans le réel, mais bien d'étudier ce dernier afin de l'influencer. L'effet souhaité est induit par l'évolution de la situation, et nous verrons qu'il ne laisse pas de place au hasard.&lt;/span&gt;&lt;/em&gt;
&lt;h1&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;5. Le libre : deux partis « ouverts », deux visions de l'affrontement différentes&lt;/span&gt;&lt;/em&gt;&lt;/h1&gt;
&lt;em&gt;&lt;span style="font-style: normal;"&gt;Jusqu'à maintenant, nous avons parlé du Libre comme une seule entité. C'est inexact car en son sein, deux partis coexistent : l'&lt;/span&gt;&lt;/em&gt;&lt;em&gt;Open Source&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt; d'un côté, le &lt;/span&gt;&lt;/em&gt;&lt;em&gt;Logiciel Libre&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt; de l'autre. Regardons comment chacun s'affaire dans cette guerre, et si on peut le rapprocher d'une des deux &lt;/span&gt;&lt;/em&gt;&lt;em&gt;méthodes de guerre&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt; que nous avons vues précédemment.&lt;/span&gt;&lt;/em&gt;
&lt;h2&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;5.1 Open Source : des champions ouverts qui s'opposent, vision occidentale&lt;/span&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;em&gt;&lt;span style="font-style: normal;"&gt;L'&lt;/span&gt;&lt;/em&gt;&lt;em&gt;Open Source&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt; consiste à fournir le code des programmes informatiques afin que tout-à-chacun puisse les étudier, les modifier et les redistribuer comme il le souhaite. Leur principe est que si un programme non open source existe et qu'il est meilleur que ses équivalents open sources, il n'y a pas de raison de ne pas l'utiliser. Par contre, ses membres vont travailler sur des équivalents libres jusqu'à ce qu'ils soient aussi performants, voir plus.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Cette vision est basée principalement sur la performance technique du modèle de développement plutôt que sur l'éthique. La liberté du code est utilisée comme un moyen d'obtenir de meilleurs outils ouverts, avec un mode de développement qui se veut le plus efficace possible.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Le mouvement de l'Open Source repose sur une concurrence sans merci entre les programmes ouverts. Cette concurrence renforce les programmes les plus en vus de cet écosystème, et en fait de véritables &lt;/span&gt;&lt;/em&gt;&lt;em&gt;champions de l'open source&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt; comme par exemple Mozilla Firefox ou bien Ubuntu. Bien sûr des projets plus modestes existent afin de contenter certaines niches particulières non gérées par les champions. Ces projets peuvent être de fantastiques boites à idées pour ces derniers.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Cette vision de l'affrontement direct des projets techniques peut être mit en parallèle avec la vison occidentale de la guerre. Tel un Achille participant à la chute de Troie, Firefox participe activement  à la chute d'Internet Explorer. Cette méthode demande beaucoup d'investissement en temps de développement afin d'obtenir des résultats satisfaisants face aux mastodontes de l'environnement privateur et leur position dominante.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Lorsqu'une victoire telle que celle de Firefox face à IE est obtenue, elle est annoncée en grande pompe afin de motiver le reste des projets.&lt;/span&gt;&lt;/em&gt;
&lt;h2&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;5.2 Logiciels Libres : un travail de fond sur les principes, vision orientale&lt;/span&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;em&gt;&lt;span style="font-style: normal;"&gt;Fruit de la lutte de nombreux défenseurs des libertés, dont le plus connu est indiscutablement son précurseur &lt;/span&gt;&lt;/em&gt;&lt;em&gt;Richard Stallman&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;, le mouvement des &lt;/span&gt;&lt;/em&gt;&lt;em&gt;Logiciels Libres&lt;/em&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt; met en avant l'éthique que représente les logiciels à code ouvert, comme un accès universel à la connaissance en matière informatique par exemple. L'ouverture du code et l'obtention de programmes disponibles pour tout le monde ne sont pas vus comme une finalité en soi, mais comme un simple moyen, une obligation en fait. Le but n'est pas d'avoir des logiciels performants de bonnes qualités, mais une informatique libre.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Ce mouvement présentant d'abord des idées, il n'est pas très médiatique, et ne repose par sur des « grands champions » pour promouvoir ses idées. Il n'y a pas non plus de grandes dates ou évènements particuliers. Il cherche plutôt à faire changer les mentalités des « utilisateurs » d'informatique afin de leur faire prendre conscience qu'il est dans leur intérêt d'adhérer à ce mouvement qui souhaite tout simplement leur liberté et celle de leurs données.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Cette « transformation » des mentalités en utilisant ce qui est amené à se développer (comme par exemple la protection de la vie privée) est ce qui relie le Logiciel Libre et la vision chinoise de la guerre. Il ne joue pas sur des actions fortes et vues de tous afin d'arriver à ses fins, mais bien sur une transformation qui débouche sur une situation où toutes les libertés sont sauves.&lt;/span&gt;&lt;/em&gt;
&lt;h1&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;6. L'efficacité des deux modèles&lt;/span&gt;&lt;/em&gt;&lt;/h1&gt;
&lt;em&gt;&lt;span style="font-style: normal;"&gt;Maintenant que nous avons survolé nos deux modèles, comparons leur efficacité.&lt;/span&gt;&lt;/em&gt;
&lt;h2&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;6.1 Définition de l'efficacité&lt;/span&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;em&gt;&lt;span style="font-style: normal;"&gt;Tout d'abord, définissons rapidement l'efficacité :&lt;/span&gt;&lt;/em&gt;
&lt;p style="text-align: left;"&gt;&lt;em&gt;&lt;span class="wp-caption" style="font-style: normal;"&gt;efficacité = effets obtenus/efforts&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Dans notre cas, les effets recherchés seront de proposer des logiciels ouverts afin que les utilisateurs puissent avoir un total contrôle sur leurs données et les traitements qu'elles subissent.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Nous allons voir maintenant l'efficacité des deux méthodes et comment ceci s'applique à notre exemple.&lt;/span&gt;&lt;/em&gt;
&lt;h2&gt;6.2 La part de chance&lt;/h2&gt;
&lt;h3&gt;6.2.1 Au niveau des méthodes&lt;/h3&gt;
Clausewitz a déjà admis que le modèle occidental n'était pas parfait, et qu'il faisait une part importante à la chance. L'application de l'heuristique et des meilleures méthodes est pratique dans un engagement tactique, mais plus on monte en complexité, moins elles sont efficaces. Arrivé au plan stratégique, elle n'évitent pas leurs parts de hasards et d'efforts nécessaires.&lt;/p&gt;
&lt;p&gt;Ceci tranche avec la vision chinoise : ils assurent la victoire pour quelqu'un qui saurait parfaitement étudier la situation des forces en présence et savoir quelles sont les tendances qui y sont présentes.
&lt;h3&gt;6.2.2 Dans notre exemple&lt;/h3&gt;
L'Open Source ne définit pas de &lt;em&gt;méthode&lt;/em&gt; parfaite sur comment faire en sorte que le projet arrive à battre ses opposants privateurs. Ces derniers jouant dans la même court, il leur &lt;em&gt;suffit&lt;/em&gt; de les battre sur le plan marketing et/ou technique pour l'emporter.&lt;/p&gt;
&lt;p&gt;A contrario, le Logiciel Libre a sa doctrine et s'y tient. Les logiciels privateurs ne peuvent rien contre cela, car ce qu'elle défend est avant tout le réel intérêt des utilisateurs : leur liberté.
&lt;h2&gt;6.3 Une reconnaissance inutile des efforts&lt;/h2&gt;
&lt;h3&gt;6.3.1 Au niveau des méthodes&lt;/h3&gt;
Les efforts sont glorifiés du côté occidental, avec la présence des « héros » qui agissent. Une entreprise n'est louée que si elle s'est faite avec difficulté face à une certaine adversité. Clausewitz affirme que l'efficacité a un coût important, qui est de l'ordre de la difficulté de ce que l'on entreprend.&lt;/p&gt;
&lt;p&gt;Là encore, la différence est flagrante avec la Chine. Les maîtres de guerre pensent plutôt que l'efficacité est inversement proportionnelle aux efforts consentis. Ou plutôt, que l'on a la meilleure efficacité lorsque l'on arrive à ses fins avec le moins d'efforts possibles. Ceci est plutôt en accord avec notre définition de l'efficacité. Ils disent même que le summum de l'efficacité est atteint lorsque l'on ne fait plus rien. En effet, à efforts qui tendent vers 0, l'efficacité tend logiquement vers l'infini (mais toujours avec les effets souhaités obtenus).&lt;/p&gt;
&lt;p&gt;En fait le sage (un sage et un maître de guerre utilisent les mêmes méthodes du point de vue chinois) arrive à faire peu d'efforts en influant sur les tendances de la situation en amont de l'affrontement afin que, le jour où il se décide à attaquer à la vue de tous, la situation soit totalement opposée à l'adversaire. Cette transformation faite au plus tôt ne coûte presque rien, et une fois que la situation tend vers ce qui nous arrange, il n'y a plus besoin d'agir du tout. Au lieu d'agir il suffit « d'assister ce qui vient naturellement ».
&lt;h3&gt;6.3.2 Dans notre exemple&lt;/h3&gt;
La lutte au niveau de l'Open Source implique d'être toujours plus performant et ergonomique que les logiciels privateurs. Même avec ses avantages, la guerre marketing tourne rarement dans le sens du libre. On glorifie des projets comme Firefox ou le noyau Linux, mais combien de lignes de codes et d'efforts marketing ont été nécessaires pour arriver à ce niveau de reconnaissance?&lt;/p&gt;
&lt;p&gt;Mais que se passe-t-il lorsqu'un logiciel privateur reprend la main sur le plan technique? La plupart des utilisateurs pensent Firefox comme un navigateur &lt;em&gt;gratuit&lt;/em&gt; avant tout. Peu savent que c'est un  outil dans lequel ils peuvent avoir confiance sur le sort de leurs données et qu'il ne leur cache rien. Lorsque Chrome aura autant de plugins que Firefox, ne verra-t-on pas une fuite des utilisateurs de ce dernier vers le navigateur de Google malgré les risques sur les données de leur vie privée?&lt;/p&gt;
&lt;p&gt;Les mouvement des Logiciels Libres eux ne demandent pas autant d'effort pour soutenir leurs idées. Il n'y a pas besoin d'avoir un million de lignes de code pour prouver que l'on a raison. Il faut juste trouver le bon exemple pour convaincre l'utilisateur qu'avoir un plein accès à ses données est dans son intérêt.&lt;/p&gt;
&lt;p&gt;Une fois la sensibilisation effectuée, l'utilisateur se posera la question sur qui possède réellement ses données. Même si techniquement supérieur, un outil privateur ne sera pas vu comme une alternative acceptable. Et là, les efforts sont limités, voir nuls une fois la personne convaincue. Les choses suivent leur cours, l'efficacité est à son maximum.
&lt;h2&gt;6.4 Une action localisée face à une transformation globale&lt;/h2&gt;
&lt;h3&gt;6.4.1 Au niveau des méthodes&lt;/h3&gt;
Un autre problème vient de l'utilisation de l'action : si forte soit-elle, est nécessairement limitée dans l'espace et le temps. A contrario, une transformation s'étend à tout l'espace et dans la durée. C'est même de cette continuité d'où découlent les effets les plus importants car ils paraissent naturels. Là où le temps est un ennemi de l'action, il est le soutien de la transformation. Il en est de même pour l'espace : une transformation s'applique en tout point.
&lt;h3&gt;6.4.2 Dans notre exemple&lt;/h3&gt;
Un logiciel comme Firefox impose le respect comme navigateur et influe sur les orientations du web dans le monde (ce qui n'est pas rien), mais il n'a aucun impact, par exemple, sur les logiciels de sauvegardes ou les tableurs. Un utilisateur peut très bien utiliser Firefox et Excel en même temps sans y voir le moindre inconvénient. Si l'on suit la logique de l'Open Source, tant que c'est techniquement supérieur, il n'y a pas de raison de ne pas l'utiliser. Firefox est supérieur aux autres navigateurs (tout du moins pour cet utilisateur), et Excel l'est également pour lui dans un autre domaine. L'un n'influe absolument pas sur l'autre.&lt;/p&gt;
&lt;p&gt;Concernant le Logiciel Libre, une fois que l'utilisateur a compris que Firefox, en tant que logiciel libre, lui garantissait un total respect de ses données et des transformations qui y sont effectuées, il peut se poser la question pour tous ses logiciels, voir même plus globalement sur l'informatique dans son ensemble. Au lieu d'agir localement et ponctuellement dans le temps, cette prise de conscience va amener l'utilisateur à faire le même raisonnement pour tout ce qui le touche. Ce n'est pas une action, mais une transformation qui s'est effectuée en l'utilisateur. Elle perdure dans le temps, et n'a pas de limite dans son espace d'application.
&lt;h2&gt;6.5 Une recherche de gloire non efficace&lt;/h2&gt;
&lt;h3&gt;6.5.1 Dans les méthodes&lt;/h3&gt;
Ce qui se cache derrière la recherche d'une modification du réel par l'action est un besoin de reconnaissance, cette gloire immortelle apportée par nos épopées. Achille lui même a choisi une vie courte mais glorieuse à une longue vie tranquille mais sans éclats. C'est un certain plaisir de l'aventure qui est recherché, car dans la guerre par action il y a cette dimension de chance si jouissive. Mais c'est un plaisir qui est recherché en tout premier lieu, pas l'efficacité.&lt;/p&gt;
&lt;p&gt;Les chinois se méfient tout particulièrement de cette recherche d'aventure au sein de la guerre. Ils recherchent l'efficacité brute, la victoire, pas la gloire. Pour eux, un grand général ne sera jamais connu, car il gagnera toujours des victoires faciles. Dans les faits, il a rendu ces victoires faciles même si ceci ne se voit pas de l'extérieur. Là où tout le monde ne regarde que l'engagement final, la grande bataille, les chinois prennent en compte tout ce qui s'est passé avant et qui a impliqué la situation du début du combat. Un bon général n'attaque que quand il sait la victoire acquise. Acquise car la situation où il se trouve à cet instant ne laisse aucun doute sur la défaire de l'adversaire.&lt;/p&gt;
&lt;p&gt;Mais c'est lui qui a modifié bien en amont des tendances dans les situations de l'époque afin d'arriver à la situation actuelle où son armée équivaut à une tonne là ou celle de l'autre ne vaut pas plus d'un gramme. Il n'y a plus à louer un général pour le combat, car c'est &lt;em&gt;visiblement&lt;/em&gt; une victoire facile. La différence de force impliquée par la situation empêche tout hasard quant à l'issue du combat.
&lt;h3&gt;6.5.2 Dans notre exemple&lt;/h3&gt;
Combien de temps et d'efforts a-t-il fallu à Firefox pour arriver là où il est aujourd'hui? Son succès en fait un exemple qu'il faut montrer tant la lutte face à Internet Explorer a été (et est toujours) rude.&lt;/p&gt;
&lt;p&gt;De l'autre côté, le logiciel libre ne fait pas de grandes annonces, n'a pas d'évènements marquants. Lorsqu'un utilisateur est convaincu ceci ne se voit pas, ou très peu. Mais la transformation est pérenne comme nous l'avons vu. Ce n'est pas spectaculaire, mais la transformation amorcée est irréversible. Lorsqu'un logiciel privateur sera proposé à un utilisateur au fait des problèmes qu'il rencontrera par son utilisation, la victoire sera assurée, sans grandes annonces. La guerre visible sera lors de ce choix. Elle est gagnée d'avance, même si tout s'est joué bien avant. Il n'y aura alors personne à louer, mais l'efficacité est assurée, car le gain est maximal et la peine pour y arriver minime.
&lt;h2&gt;6.6 Action/réaction, mais rien ne s'oppose à une transformation&lt;/h2&gt;
&lt;h3&gt;6.6.1 Au niveau des méthodes&lt;/h3&gt;
Un autre problème de l'action repose sur la réaction de l'adversaire, voir de l'environnement tout entier. Toute action implique une réaction. C'est particulièrement inefficace car le peu d'effet qu'avait apporté l'action est largement amenuisé par la réaction qui lui est opposée, généralement du même ordre de grandeur. Ceci explique en grande partie la difficulté du modèle par action.&lt;/p&gt;
&lt;p&gt;La transformation utilise la propension incluse dans la situation. Elle &lt;em&gt;pousse&lt;/em&gt; ce qui tend déjà à augmenter. Il n'y a donc pas d'action contre-nature qui s'impose au réel. Celui-ci n'a donc aucune raison de lui opposer une « réaction ».&lt;/p&gt;
&lt;p&gt;En fait, il peut y avoir des frictions dans l'application de cette transformation si elle n'est pas &lt;em&gt;pure&lt;/em&gt; : si elle est teintée du sceau de son initiateur par exemple, elle risque de ne pas s'insérer parfaitement dans la situation. Si quelque chose dépasse, il va y avoir une réaction immédiate et la transformation ne sera pas pleinement efficace. C'est aussi pour cela qu'il n'y a pas à louer les grands généraux. Ils ne font rien pour être reconnu car ceci ne serait tout simplement pas efficace pour arriver à leurs fins.&lt;/p&gt;
&lt;p&gt;Cette toute puissance de la situation, les chinois ne l'utilisent pas seulement contre l'adversaire, mais également pour leur propre troupe. Pour eux, leurs soldats ne sont jamais courageux par eux même, mais à cause de la situation. C'est pour cela qu'il se mettent dans une situation périlleuse (« zone de mort » de Sun Tzu) afin qu'elle implique du courage chez les soldats : ils n'ont pas le choix, donc ils combattent comme jamais, les plus poltrons deviennent courageux. C'est aussi pour cela que Jules César n'acculait jamais un ennemi, mais lui laissait toujours une voie de sortie : ce n'est pas par pitié (ce n'est pas le genre), mais pour éviter un regain de courage chez ses adversaires.
&lt;h3&gt;6.6.2 Dans notre exemple&lt;/h3&gt;
Lorsqu'un logiciel ouvert amène une nouvelle fonction innovante, les logiciels privateurs vont vite le copier. A l'action tentée, une réaction de l'adversaire est vite proposée. La nouvelle situation va demander encore beaucoup d'effort pour arriver à vaincre un tel adversaire.&lt;/p&gt;
&lt;p&gt;En ce qui concerne les logiciel libres, la transformation se fait au sein des utilisateurs. Respectant pleinement la morale, ses idées ne peuvent être combattues. D'ailleurs, les logiciels privateurs n'essaient même pas. L'effet est obtenu avec un effort minime car rien ne s'y oppose. Là encore, l'efficacité est maximale.&lt;/p&gt;
&lt;p&gt;De plus, là où l'Open Source est dans l'affrontement direct et déjà présent, le logiciel libre peut s'appliquer bien avant qu'un conflit avec un logiciel privateur arrive. Une fois que le conflit explosera, vu que l'utilisateur sera déjà convaincu, le logiciel privateur pourra utiliser tous les effets 3D de la planète, il sera déjà défait avant même de pouvoir combattre.
&lt;h2&gt;6.7 Deux visions de la victoire parfaite&lt;/h2&gt;
&lt;h3&gt;6.7.1 Au niveau des méthodes&lt;/h3&gt;
Pour Clausewitz et les occidentaux il n' y a pas de doute : le but ultime de la guerre est de détruire l'ennemi. Sans cela, l'ennemi est toujours en mesure de contre attaquer.&lt;/p&gt;
&lt;p&gt;Pour les chinois, la destruction de l'ennemi n'est qu'une demi victoire. Il est bien plus intéressant de prendre l'ennemi entier. L'idéal consiste à arriver à cette fin sans même avoir à combattre : nos pertes sont minimales, nos gains sont maximums. On a même bien plus de ressources après la guerre qu'au début. « L'art ultime est donc de vaincre avant d'avoir combattu ». Là dessus, le penseur chinois Mencius affirme qu'il est possible de prendre tous les peuples avec la morale, qu'ils vont aller d'eux mêmes vers le &lt;em&gt;prince&lt;/em&gt; le plus juste.&lt;/p&gt;
&lt;p&gt;Cependant, une telle chose ne peut s'acquérir avec la simple force : un peuple soumis par la force n'hésitera pas une seconde à se retourner au moindre signe de faiblesse de la part du prince. N'ayant plus rien à perdre, leur fureur sera terrible. Il faut les persuader de nous suivre afin que ce soit la situation qui tende à les garder sous notre bannière.&lt;/p&gt;
&lt;p&gt;Si l'on devait faire un parallèle avec la physique, le cas de soumission sera notre état d'équilibre. Cependant, ce dernier peut être de deux types : stable et non stable. On a &lt;em&gt;df/ds² &amp;lt;0&lt;/em&gt; dans le premier cas, &lt;em&gt;&amp;gt;0&lt;/em&gt; dans le second. Si c'est stable, comme dans le cas d'une transformation, chaque changement pourra être facilement infléchi avec juste une réaction (bien moins couteuse qu'une action) afin de retourner dans l'état de soumission, car les personnes souhaitent cet état. Dans le second, chaque modification va donner l'occasion de changer cet état et va tendre à s'en éloigner. Il sera donc tout particulièrement instable.
&lt;h3&gt;6.7.2 Dans notre exemple&lt;/h3&gt;
Le mouvement Open Source est orienté vers l'obtention des meilleurs outils ouverts. Leur lutte est directement orientée face à un ou plusieurs logiciels privateurs. Leur lutte a un objectif : que leur outil soit le seul utilisé. Si c'est une victoire possible, nous avons vu que ce n'était pas la meilleure.&lt;/p&gt;
&lt;p&gt;Le logiciel libre, quant à lui, est bien plus &lt;em&gt;efficace&lt;/em&gt; lorsque l'on parle de fin de guerre : au lieu de détruire l'ennemi, il l'absorbe. En effet, une fois la majorité des utilisateurs convaincus de l'avantage qu'ils ont d'utiliser des logiciels libres, que restera-t-il aux logiciels privateurs? Devenir libre. Et ça de nombreux éditeurs sont en train de le faire, comme Nokia qui ouvre Symbian par exemple. Par pure bonté d'âme? Surement pas! Mais pour attirer &lt;em&gt;ses&lt;/em&gt; utilisateurs vers son système car ces derniers ont un intérêt d'avoir accès au source : ce sont les développeurs d'applications pour portable, véritable nerf de la guerre du mobile.&lt;/p&gt;
&lt;p&gt;Comme un algorithme glouton, le logiciel libre progresse parmi les logiciels privateurs et les &lt;em&gt;libéralise&lt;/em&gt;. Le mouvement en sort plus fort, avec de nouveaux outils plus performants, et des adversaires en moins. L'efficacité est à son zénith.
&lt;h2&gt;6.8 L'alliance des partis est indispensable&lt;/h2&gt;
Comme nous l'avons vu, le modèle chinois est bien plus orienté efficacité que le modèle occidental. De même, le travail de fond du mouvement logiciel libre est plus efficace dans une guerre totale. Il y a cependant une guerre où ce mouvement n'est pas adapté : la guerre de l'image. Comme nous l'avons vu, le modèle chinois n'est absolument pas spectaculaire. C'est même totalement l'inverse. La guerre qui nous intéresse consiste à persuader des utilisateurs. Or l'image est une donnée particulièrement importante pour les utilisateurs occidentaux. Les utilisateurs en ont pleins les yeux et les oreilles. Il n'y a pas une journée sans &lt;em&gt;key note&lt;/em&gt; ou annonces du même genre. Il est particulièrement complexe de faire passer un message sur la morale dans un tel flot. Si l'accès aux utilisateurs est &lt;em&gt;bloqué&lt;/em&gt; la stratégie du logiciel libre s'effondre totalement.&lt;/p&gt;
&lt;p&gt;Si nous avons vu que l'Open Source en lui même n'est pas efficace, il peut être un fantastique vecteur d'accès aux utilisateurs. Ceux-ci viennent aux applications pour leur fonctionnalités. Une fois à la vue de l'utilisateur, il serait bon de lui faire passer le message pour les logiciels libres de manière général. Ce message ne doit pas être un obstacle à l'utilisation du logiciel sous peine d'être un frein plutôt qu'un accélérateur du libre.&lt;/p&gt;
&lt;p&gt;Les contres effets seront bien sûrs toujours présents, mais uniquement au niveau de l'open source. De toute façon, avec ou sans le message, ils l'auraient subis. Autant faire en sorte d'être le plus utile possible.&lt;/p&gt;
&lt;p&gt;Finalement, les premiers à convaincre ne sont pas les utilisateurs, mais les gestionnaires des champions open source qui eux sont spécialistes des grands effets d'annonces. Si ces dernières ne sont pas utiles en tant que tel pour les utilisateurs, elles permettent d'être le vecteur d'information qui manque au logiciel libre.&lt;/p&gt;
&lt;p&gt;Les deux partis doivent affronter un ennemi particulièrement puissant qui sait très bien manœuvrer sur les plan de l'espace médiatique. Si aucun des deux n'est en mesure de l'emporter (l'Open Source par un manque de constance dans le choix des utilisateurs, le Logiciel Libre dans l'accès à la parole auprès des utilisateurs), leur alliance peut régler le problème et offrir aux utilisateurs une informatique performante et libre.
&lt;h1&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;7. Plus loin dans l'art de la guerre&lt;/span&gt;&lt;/em&gt;&lt;/h1&gt;
Nous avons vu que la stratégie chinoise est plus &lt;em&gt;efficace&lt;/em&gt; que l'occidentale sur bien des points. Continuons d'étudier l'art de la guerre de Sun Tzu et identifions ce qui peut être utile dans notre contexte, ce que le libre fait déjà et ce qu'il devrait faire.
&lt;h2&gt;7.1 L'importance de la guerre et ses domaines&lt;/h2&gt;
&lt;h3&gt;7.1.1 La guerre est indispensable&lt;/h3&gt;
Sun Tzu commence fort logiquement par justifier l'importance de la guerre :
&lt;p class="wp-caption" style="text-align: left;"&gt;La guerre est d'une importance vitale pour l'État. C'est le domaine de la vie et de la mort: la conservation ou la perte de l'empire en dépendent; il est impérieux de le bien régler.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Il met l'accent sur son importance pour la conservation de l'état qui sera pour nous l'existence même des logiciels libres. Cette guerre est celle du choix : nous devons toujours pouvoir proposer ce choix aux utilisateurs. Il ne faut pas penser que nous avons pour but de faire couler tous les outils pivateurs : et si certains utilisateurs souhaitent les utiliser en toute connaissance de cause, de quel droit les empêcherions nous?&lt;/p&gt;
&lt;p&gt;Par contre, de quel droit les sociétés derrières les logiciels privateurs nous empêcherait de fournir ce choix aux utilisateurs ou au moins de les avertir? La guerre actuelle concerne ce point précis. Tout ce qui est contraire à cet objectif doit être éliminé. Le plus grand problème concerne bien entendu les brevets logiciels.&lt;/p&gt;
&lt;p&gt;Ces derniers sont d'un certain point de vue la réponse &lt;em&gt;méthode chinoise&lt;/em&gt; des logiciels privateurs : en orientant la situation vers une guerre de brevet, le libre n'est plus en mesure de combattre, et encore moins de vaincre. Si la situation aboutie à des brevets logiciels partout, la guerre est perdue.
&lt;h3&gt;7.1.2 Les domaines de la guerre&lt;/h3&gt;
Il ajoute également :
&lt;p class="wp-caption" style="text-align: left;"&gt;Si nous voulons que la gloire et les succès accompagnent nos armes, nous ne devons jamais perdre de vue: la doctrine, le temps, l'espace, le commandement, la discipline.&lt;/p&gt;
&lt;p class="wp-caption" style="text-align: left;"&gt;La doctrine fait naître l'unité de penser; elle nous inspire une même manière de vivre et de mourir, et nous rend intrépides et inébranlables dans les malheurs et dans la mort.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;La doctrine de Sun Tzu sera pour nous les grands principes du logiciels libres. Ils permettent de se placer sous en étendard bien identifié et sûr de cette force. Ses partisans n'hésiteront pas à la défendre face à l'adversité.
&lt;p class="wp-caption" style="text-align: left;"&gt;Si nous connaissons bien le temps, nous n'ignorerons point ces deux grands principes Yin et Yang par lesquels toutes les choses naturelles sont formées et par lesquels les éléments reçoivent leurs différentes modifications; [...]&lt;/p&gt;
&lt;p class="wp-caption" style="text-align: left;"&gt;L'espace n'est pas moins digne de notre attention que le temps; étudions le bien, et nous aurons la connaissance du haut et du bas, du loin comme du près, du large et de l'étroit, de ce qui demeure et de ce qui ne fait que passer.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Ici nous devons passer du monde bien réel de Sun Tzu au monde virtuel des logiciels et des libertés. Il met l'accent sur la connaissance approfondie de l'environnement. Sans cela, il n'y a pas à penser à la victoire car c'est là dessus que doivent se baser le logiciel libre afin de voir quelles sont les propensions de la situation qui vont aller dans son sens.
&lt;p class="wp-caption" style="text-align: left;"&gt;Discipline : posséder l'art de ranger les troupes; n'ignorer aucune des lois de la subordination et les faire observer à la rigueur;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Le général sera dans le cas du libre l'ensemble des responsables des principaux projets open source. Les &lt;em&gt;troupes&lt;/em&gt; seront les défendeurs des logiciels libres et les responsables des projets de plus faible notoriété. Les &lt;em&gt;généraux&lt;/em&gt; sont responsables de l'orientation et de l'image qu'ils donnent des logiciels libres et open source. La guerre de trolls n'est pas acceptable si elle ne fait pas progresser la situation dans un sens qui nous avantage, et doit être éradiquée sans la moindre once de pitié.
&lt;h3&gt;7.1.3 Une victoire assurée&lt;/h3&gt;
A contrario de la pensée occidentale, Sun Tzu en digne héritier de la pensée chinoise affirme pouvoir déterminer à l'avance qui sera victorieux.
&lt;p class="wp-caption" style="text-align: left;"&gt;[..] de sorte que vous pourrez conjecturer assez sûrement quel est celui des deux antagonistes qui doit l'emporter; et si vous devez entrer vous-même en lice, vous pourrez raisonnablement vous flatter de devenir victorieux.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Comme nous l'avons vu précédemment à l'avance sera en fait avant l'engagement. Car au moment de l'engagement, tout est déjà joué si l'un des belligérants utilise l'art de la guerre chinois.
&lt;h2&gt;7.2 Prendre les peuples sans combattre&lt;/h2&gt;
Sun Tzu fait écho à Mencius et son éloge de la morale sur le fait qu'il est possible, voir préférable,de prendre les peuples sans combattre :
&lt;p class="wp-caption" style="text-align: left;"&gt;Admirateurs de vos vertus et de vos capacités, les officiers généraux placés sous votre autorité vous serviront autant par plaisir que par devoir. Ils entreront dans toutes vos vues, et leur exemple entraînera infailliblement celui des subalternes, et les simples soldats concourront eux-mêmes de toutes leurs forces à vous assurer les plus glorieux succès.&lt;/p&gt;
&lt;p class="wp-caption" style="text-align: left;"&gt;Estimé, respecté, chéri des vôtres, les peuples voisins viendront avec joie se ranger sous les étendards du prince que vous servez, ou pour vivre sous ses lois, ou pour obtenir simplement sa protection.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Il affirme qu'un grand général inspire ses troupes et attire même les peuples voisins. Ici, un grand défenseur des logiciels libres va pouvoir donner du courage et de la détermination à tous les développeurs du monde libre. Il peut même attirer des peuples voisins qui seront soit des logiciels libres avec des principes un peu différents (comme BSD par exemple), voir même opposés comme des supporters des logiciels privateurs qui y verraient un avantage de ne plus subir de limitations artificielles.
&lt;h2&gt;7.3 L'art de la guerrilla&lt;/h2&gt;
&lt;h3&gt;7.3.1 Maximiser les gains, limitez les pertes&lt;/h3&gt;
Sun Tzu ne traite également de l'aspect guérilla de la guerre. Il la préconise même :
&lt;p class="wp-caption" style="text-align: left;"&gt;Également instruit de ce que vous pourrez et de ce que vous ne pourrez pas, vous ne formerez aucune entreprise qui ne puisse être menée à bonne fin.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Ne rien entreprendre si ce n'est pas sûr d'avoir un gain assuré. Ce principe est un peu contraire au fonctionnement actuel du monde libre, où tout le monde fait un peu ce qu'il veut, même si ca peut ne pas fonctionner. Sun Tzu y voit une perte de ressources, mais là où nous avons un avantage réside dans ses ressources justement : elles sont importantes et très variées. Au lieu de se disperser, on peut voir ce chaos comme une formidable manière d'explorer toutes les voies. Un petit peu comme pour les algorithmes imitant les fourmis et leur phéromones : une fois qu'un projet a trouvé une piste intéressante, il la marque et la partage avec le reste de la communauté. D'autres projets plus structurés peuvent alors prendre le relai et renforcer les champions avec une perte d'énergie pour ces derniers somme toute limitée.
&lt;h3&gt;7.3.2 Attirer des partisans ennemis&lt;/h3&gt;
Sun Tzu pousse plus loin le principe de la guérilla : les ennemis peuvent, et même doivent, devenir une ressource. De cette manière, le gain est double : on se renforce d'autant que l'ennemi s'affaiblit.
&lt;p class="wp-caption" style="text-align: left;"&gt;Conserver les possessions des ennemis est ce que vous devez faire en premier lieu, comme ce qu'il y a de plus parfait; les détruire doit être l'effet de la nécessité. Si un général agit ainsi, sa conduite ne différera pas de celle des plus vertueux personnages; elle s'accordera avec le Ciel et la Terre, dont les opérations tendent à la production et à la conservation des choses plutôt qu'à leur destruction.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Dans notre exemple, il ne faut pas cherche à détruire la réputation d'un logiciel privateur, mais si possible l'amener dans nos rangs, donc de l'ouvrir. Ce fut le cas de Blender par exemple ou Symbian plus récemment. Ils peuvent devenir de futurs grands noms du libre. Leur légitimité sera peu être même plus importante au vue du grand public qu'un projet démarré libre dès le départ.
&lt;p style="margin-bottom: 0cm;"&gt;&lt;/p&gt;
&lt;p class="wp-caption" style="text-align: left;"&gt;Vous profiterez de la dissension qui surgit chez vos ennemis pour attirer les mécontents dans votre parti en ne leur ménageant ni les promesses, ni les dons, ni les récompenses.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Comme pour la guérilla, attirer ses &lt;em&gt;ennemis&lt;/em&gt; permet de grossir ses rangs. Ce coup double et doit être recherché à tout prix. Dans notre cas, les efforts pour convaincre un utilisateur du problème que pose les logiciels privateurs peut être double : un support de moins pour eux, et une personne qui peut expliquer les principes libres à d'autres.
&lt;p class="wp-caption" style="text-align: left;"&gt;Si vos ennemis sont plus puissants et plus forts que vous, vous ne les attaquerez point, vous éviterez avec un grand soin ce qui peut conduire à un engagement général; vous cacherez toujours avec une extrême attention l'état où vous vous trouverez.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Il est contre une attaque systématique et irréfléchie de l'adversaire. Si l'on est inférieur, on se place en simple défense. Ce point rejoins la pensée taoïste : si rien n'est propice dans la situation actuelle, le sage se retire et attends. La roue tourne, de nouvelles opportunités vont survenir, et il sera alors temps de sortir de sa torpeur qui n'est qu'aparrente en fait.&lt;/p&gt;
&lt;p&gt;La seconde partie est plus problématique avec les principes du libre : cacher son état est complexe pour un écosystème qui se veut le plus ouvert possible. Tous les échanges sont ouverts. Ceci donne un gage de confiance aux utilisateurs, mais fourni également des informations aux adversaires.
&lt;p style="margin-top: 0.2cm; margin-bottom: 0.1cm; page-break-before: auto;"&gt;&lt;/p&gt;
&lt;p class="wp-caption" style="text-align: left;"&gt;Lorsque vos gens auront pris sur l'ennemi au-delà de dix chars, commencez par récompenser libéralement tant ceux qui auront conduit l'entreprise que ceux qui l'auront exécutée. Employez ces chars aux mêmes usages que vous employez les vôtres, mais auparavant ôtez-en les marques distinctives qui pourront s'y trouver.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Les victoires et ceux qui l'ont rendu possible doivent être publique et faire du bruit. Ceci va inciter les autres membres de la communauté à faire de même.
&lt;p class="wp-caption" style="text-align: left;"&gt;Traitez bien les prisonniers, nourrissez-les comme vos propres soldats; faites en sorte, s'il se peut, qu'ils se trouvent mieux chez vous qu'ils ne le seraient dans leur propre camp, ou dans le sein même de leur patrie. Ne les laissez jamais oisifs, tirez parti de leurs services avec les défiances convenables, et, pour le dire en deux mots, conduisez-vous à leur égard comme s'ils étaient des troupes qui se fussent enrôlées librement sous vos étendards. Voilà ce que j'appelle gagner une bataille et devenir plus fort.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Sun Tzu insiste sur le fait de bien traiter les prisonniers afin d'en faire des ressources. Dans notre cas, les développeurs issus du monde privateur doivent se sentir plus à l'aise dans le monde libre que de là où ils viennent. De même, les projets issus du monde privateur, mais libérés comme Blender, ne doivent pas subir de moqueries dues à leurs origines. Ils doivent être pleinement intégrés, voir même écouté car ils apportent une vue nouvelle, donc potentiellement intéressante.
&lt;p class="wp-caption" style="text-align: left;"&gt;N'oubliez rien pour lui débaucher ce qu'il y aura de mieux dans son parti: offres, présents, caresses, que rien ne soit omis. Trompez même s'il le faut: engagez les gens d'honneur qui sont chez lui à des actions honteuses et indignes de leur réputation, à des actions dont ils aient lieu de rougir quand elles seront sues, et ne manquez pas de les faire divulguer.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Ici il faut attirer les développeurs du côté ouvert. Mais plus encore, il faut attirer &lt;em&gt;ceux qui savent&lt;/em&gt; du côté ouvert. Ces personnes qui font référence en matière d'informatique dans le cocon familial ou entre amis. Ce sont eux qui conseillent et orientent les nouveaux utilisateurs. Il est capital de les convaincre que mettre du libre peut les arranger, ne serait-ce qu'en terme de licence, ou au moins avoir moins de cracks à chercher sur internet. Ils sont la première force de frappe marketing des logiciels privateurs. Cette force ne doit pas être sous estimée.
&lt;p style="margin-top: 0.2cm; margin-bottom: 0.1cm; page-break-before: auto;"&gt;&lt;/p&gt;&lt;/p&gt;
&lt;h3&gt;7.3.3 Attaquer où c'est faible&lt;/h3&gt;

&lt;p&gt;Sun Tzu reviens sur l'apparente tautologie du modèle chinois : pour gagner il faut attaquer là où l'ennemi ne se défends pas.
&lt;p class="wp-caption" style="text-align: left;"&gt;Lorsque l'ennemi est uni, divisez-le; et attaquez là où il n'est point préparé, en surgissant lorsqu'il ne vous attend point. Telles sont les clefs stratégiques de la victoire, mais prenez garde de ne point les engager par avance.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Un fantastique exemple est en train de prendre essor avec les bases &lt;em&gt;NoSQL&lt;/em&gt; : les principales références dans ce domaines sont toutes libres! Là où les éditeurs privateurs s'affairent encore à avoir une offre sql classique performante, le libre a déjà occupé le nouveau terrain de jeu. L'occupation est d'une importance stratégique importante. La renommée va être simple, et les nouveaux arrivants vont avoir du mal à s'implanter, surtout s'il arrivent avec des licences onéreuses là où l'on parle de services web qui sont amenés à grandir fortement.
&lt;p style="margin-top: 0.2cm; margin-bottom: 0.1cm; page-break-before: auto;"&gt;&lt;/p&gt;
&lt;p class="wp-caption" style="text-align: left;"&gt;diminuez ses forces le plus que vous pourrez, en lui faisant faire des diversions, en lui tuant de temps en temps quelque parti, en lui enlevant de ses convois, de ses équipages, et d'autres choses qui pourront vous être de quelque utilité.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Les ressources des adversaires des logiciels libres sont les utilisateurs et les développeurs de logiciels privateurs. Il faut faire en sorte de leur supprimer leur légitimité aux yeux de ces deux populations. Le reste se fera tout seul.&lt;/p&gt;
&lt;p&gt;Concernant la diversion, le modèle chaotique du libre force ses adversaires à avoir une recherche et développement importante pour arriver à suivre. Microsoft commence par exemple à être de plus en plus diversifiés, mais sans être un acteur principal sur ses nouveaux marchés. La diversification à outrance sans vision globale n'est pas une bonne chose du point de vue stratégique. Une telle organisation n'a pas la souplesse qu'a un modèle organisé sur un chaos.
&lt;h2&gt;7.4 Ne pas faire durer la guerre&lt;/h2&gt;
Sun Tzu revient un peu sur le &lt;em&gt;temps de guerre&lt;/em&gt; qui ne doit pas être trop important.
&lt;p class="wp-caption" style="text-align: left;"&gt;Ils n'ignorent point, et vous devez le savoir aussi, que rien n'épuise tant un royaume que les dépenses de cette nature; car que l'armée soit aux frontières, ou qu'elle soit dans les pays éloignés, le peuple en souffre toujours;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Les projets dans la tourmente d'un conflit avancent beaucoup moins bien que d'habitude. Il faut donc que ces périodes soient les plus brèves possibles. Que dire du cas FreeBSD au début de sa vie? GNU-Linux ne serait peu être pas passé devant sans le problème du droit d'auteur d'Unix.
&lt;p class="wp-caption" style="text-align: left;"&gt;Empêcher que les hameaux et les chaumières des paysans ne souffrent le plus petit dommage, c'est ce qui mérite également votre attention; porter le ravage et dévaster les installations agricoles de vos ennemis, c'est ce qu'une disette de tout doit seule vous faire entreprendre.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Sun Tzu ré-insiste sur le but premier de la guerre : conserver ses acquis. Dans notre analyse, l'exemple le plus frappant sera la lutte contre les brevets logiciels qui menace le monde du libre dans son entier. Prendre d'assaut les logiciels privateurs ne doit être qu'un moyen de se défendre contre cela.
&lt;p style="margin-bottom: 0cm;"&gt;&lt;/p&gt;&lt;/p&gt;
&lt;h2&gt;7.5 Éviter les attaques de front, voir les affrontements eux mêmes&lt;/h2&gt;

&lt;p style="margin-bottom: 0cm;"&gt;Pour Sun Tzu, l'attaque de front n'est pas une option intelligente. En cela, il suit bien la pensée chinoise classique.&lt;/p&gt;

&lt;p style="margin-bottom: 0cm;"&gt;&lt;/p&gt;

&lt;p class="wp-caption" style="text-align: left;"&gt;Sun Tzu dit: Il est d'une importance suprême dans la guerre d'attaquer la stratégie de l'ennemi.&lt;/p&gt;

&lt;p&gt;Une attaque de front n'est pas l'idéale. Un moyen de prendre les applications consiste à saborder leur support et à leur offrir une meilleure option dans le modèle libre. Un bon exemple ici est Nokia avec son système Symbian. Les applications sur portables sont le nerf de la guerre des téléphones. Avec de moins en moins de développeurs sur leur système, Nokia a choisi d'ouvrir leur système. D'autant plus, qu'avec QT, ils peuvent attirer facilement bon nombres de développeurs déjà friands des solutions libres ou des portages simples d'applications déjà existantes.
&lt;p style="margin-bottom: 0cm;"&gt;&lt;/p&gt;
&lt;p class="wp-caption" style="text-align: left;"&gt;Celui qui arrache le trophée avant que les craintes de son ennemi ne prennent forme excelle dans la conquête.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;En une phrase, Sun Tzu résume la philosophie chinoise que nous avons vu précédemment.
&lt;p style="margin-bottom: 0cm;"&gt;&lt;/p&gt;
&lt;p class="wp-caption" style="text-align: left;"&gt;[..] que vous le pourrez d'en venir aux mains avec lui; la prudence et la fermeté d'un petit nombre de gens peuvent venir à bout de lasser et de dompter même une nombreuse armée. Ainsi vous êtes à la fois capable de vous protéger et de remporter une victoire complète.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Avec l'application des techniques chinoise, il n'y a pas besoin d'être beaucoup pour l'emporter. Cependant, vu que le libre rassemble beaucoup de participants, il serait dommage de ne pas en profiter.
&lt;h2&gt;7.6 Connaissance de l'ennemi et de soit même&lt;/h2&gt;
&lt;p style="margin-bottom: 0cm;"&gt;Sun Tzu fait un résumé du calcul des chances de réussites assez facile à retenir :&lt;/p&gt;
&lt;p class="wp-caption" style="text-align: left;"&gt;Connais ton ennemi et connais-toi toi-même; eussiez-vous cent guerres à soutenir, cent fois vous serez victorieux.&lt;/p&gt;
&lt;p class="wp-caption" style="text-align: left;"&gt;Si tu ignores ton ennemi et que tu te connais toi-même, tes chances de perdre et de gagner seront égales.&lt;/p&gt;
&lt;p class="wp-caption" style="text-align: left;"&gt;Si tu ignores à la fois ton ennemi et toi-même, tu ne compteras tes combats que par tes défaites.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style="font-style: normal;"&gt;Il ne suffit pas de savoir à quel point les logiciels libres sont efficaces, il faut également démontrer que les opposants sont inefficaces et dangereux pour ses utilisateurs. C'est bien l'alliance de ces deux méthodes qui permettent d'obtenir la victoire. La connaissance des ennemis peut passer par exemple par une analyse fine et compréhensible des licences des principaux logiciels privateurs sur le marché. La plupart des clauses sont faites pour limiter les possibilités des utilisateurs. Ces derniers doivent être au courant de ce qu'ils signent.&lt;/span&gt;&lt;/em&gt;
&lt;p style="margin-bottom: 0cm;"&gt;&lt;/p&gt;&lt;/p&gt;
&lt;h2&gt;7.7 Les lieux d'affrontements&lt;/h2&gt;

&lt;p&gt;Les lieux sont une données très importante pour Sun Tzu.
&lt;p class="wp-caption" style="text-align: left;"&gt;Sun Tzu dit: Une des choses les plus essentielles que vous ayez à faire avant le combat, c'est de bien choisir le lieu de votre campement. Pour cela il faut user de diligence, il ne faut pas se laisser prévenir par l'ennemi, [...] En général, il n'y a que du désavantage à camper après les autres.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Camper sera dans notre cas mettre un pied dans un nouveau domaine. Par exemple, les logiciels libres ont débutés originellement sur les outils de programmations et tout ce qui touche au système. Désormais, il faut se rapprocher de plus en plus vers les utilisateurs standards.&lt;/p&gt;
&lt;p&gt;Un autre domaine qui émerge beaucoup des temps-ci pour les développeurs sont les bases NoSQL. Le libre est arrivé en force sur ce marché promis à un bel avenir.&lt;/p&gt;
&lt;p&gt;Un autre point important réside dans l'art du général à faire siéger son adversaire là où il souhaite :
&lt;p class="wp-caption" style="text-align: left;"&gt;S'il est véritablement habile, il pourra disposer à son gré du campement même et de toutes les marches de son ennemi. Un grand général n'attend pas qu'on le fasse aller, il sait faire venir. Si vous faites en sorte que l'ennemi cherche à se rendre de son plein gré dans les lieux où vous souhaitez précisément qu'il aille, faites en sorte aussi de lui aplanir toutes les difficultés et de lever tous les obstacles qu'il pourrait rencontrer;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Si dans le cas NoSQL cette technique intéressante pour le libre, ce dernier s'est fait pendre à ce piège concernant les brevet : le projet Mono et l'aide de Microsoft pour son développement ne sont rien d'autre qu'une aide pour le libre afin que celui-ci mette le pieds dans la fosse aux brevets logiciels. Heureusement, peu de projets sont tombés dans le panneau, mais le risque est toujours présent. Il ne faut pas oublier que l'adversaire est loin d'être stupide. Il ne faut pas nécessairement chercher à le blesser le plus possible, mais limiter les attaques qu'il peut nous faire. Le temps joue en faveur de ceux qui utilisent l'art de la guerre. Tachons juste de l'utiliser mieux qu'eux.
&lt;h2&gt;7.8 La maîtrise de l'adversaire&lt;/h2&gt;
L'effet de surprise est un paramètre important pour Sun Tzu.
&lt;p class="wp-caption" style="text-align: left;"&gt;Rendez-vous dans des lieux où l'ennemi ne puisse pas soupçonner que vous ayez dessein d'aller. Sortez tout à coup d'où il ne vous attend pas, et tombez sur lui lorsqu'il y pensera le moins.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Là est une grande force du libre : son modèle distribué lui permet de rechercher dans toutes les directions. Il n'est pas possible de prévoir de la part de ses opposants un cheminement précis où ils peuvent déjà bloquer l'accès. Ils sont obligés d'aller partout à la fois, donc nulle part de manière efficace du fait de leurs ressources limitées.
&lt;p style="margin-bottom: 0cm;"&gt;&lt;/p&gt;
&lt;p class="wp-caption" style="text-align: left;"&gt;La suprême tactique consiste à disposer ses troupes sans forme apparente; alors les espions les plus pénétrants ne peuvent fureter et les sages ne peuvent établir des plans contre vous.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Ce point est assez important et illustre bien l'efficacité du modèle &lt;em&gt;bazar&lt;/em&gt;. Les adversaires n'ont pas à faire à une structure bien identifiée, mais à une myriade de personnes liés par une éthique. Elles s'affairent sur des projets séparés mais qui travaillent bien ensemble. Même depuis l'intérieur du &lt;em&gt;bazar&lt;/em&gt; il est complexe de voir où il se dirige. Alors vu de l'extérieur...
&lt;h2&gt;7.9 L'adaptabilité&lt;/h2&gt;
Point important soulevé par Sun Tzu : l'adaptabilité.
&lt;p class="wp-caption" style="text-align: left;"&gt;L'eau, dans son cours, suit la situation du terrain dans lequel elle coule; de même, votre armée doit s'adapter au terrain sur lequel elle se meut.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Ce point est peu être le plus important de tout le traité : il faut s'adapter le plus possible. L'image de l'eau n'est pas anodine : elle représente chez les chinois ce qui a le moins de matière, de prise dans le réel. Pour les chinois, celui qui sera le plus à même de l'emporter sera celui qui est le moins pris forme dans le réel, celui qui peut encore changer la propension de la situation le plus en amont possible. Si l'un des acteurs est déjà en train d'affronter la réalité et n'est plus en mesure de s'adapter à la situation, alors il a de forte chances que son adversaire utilise cette faiblesse contre lui en orientant la situation là où ça ne l'arrange pas. Ne pouvant s'adapter, la loi de Darwin fera son œuvre.&lt;/p&gt;
&lt;p&gt;L'adaptabilité est donc d'une importance capitale pour Sun Tzu : il ne faut pas oublier que pour lui l'affrontement n'est que conclusif, la guerre est également, et surtout, constitué de tout ce qui a précédé et qui a figé le réel pour l'affrontement final. Arrivé au combat, c'est déjà fini. L'adaptabilité est la valeur clé dans cette phase capitale.&lt;/p&gt;
&lt;p&gt;Ça tombe bien, c'est une qualité indéniable du modèle libre. Son modèle chaos est encore ici d'un avantage certain. Il n'y a pas de comité central qui dicte sa voix à tous les participants du monde libre. Si un membre souhaite explorer une nouvelle voie, il peut le faire sans soucis, le temps qu'elle est libre (dans le cas contraire tout ce qu'il risque c'est un kick sur un forum IRC...). Comme nous l'avons vu, si cette voie est prometteuse, l'ensemble de la communauté va pouvoir s'y engouffrer. L'effort a été limité pour elle, les gains sont énormes. L'efficacité l'est également.&lt;/p&gt;
&lt;p&gt;L'adaptabilité vaut également pour les messages que l'on doit adresser aux utilisateurs : on ne convint pas un professionnel de l'informatique comme on convint un utilisateur final. Les premiers sont à la recherche d'une adaptabilité des sources et d'une certaine indépendance face aux éditeurs. Les seconds ne sont pas intéressé par l'adaptabilité du code et pour cause : la plupart ne savent pas comment fonctionne un programme et s'en moque bien. Par contre, le message doit être orienté vers les données des utilisateurs. C'est sur elles que doivent porter nos efforts afin de leurs faire comprendre qu'avec un modèle libre elles ne risquent rien, alors qu'avec un modèle privateur, l'éditeur peu à tout moment décider de ne plus supporter leurs données. Avec un logiciel privateur le vrai possesseur de ces données est l'éditeur, là où avec une solution libre, c'est bien l'utilisateur.
&lt;h1&gt;8. Au final&lt;/h1&gt;
Ce texte souhaitait faire la lumière sur l'utilisation de la philosophie chinoise, et en particulier sa vision de la guerre, appliqué monde du libre. Nous avons vu que le libre utilise déjà beaucoup de principes de la philosophie chinoise, sans en avoir forcément pris conscience. Les principales avancées pérennes engendrés par le libre sont par utilisation de cette méthode.&lt;/p&gt;
&lt;p&gt;Si nous souhaitons avoir une informatique libre, il n'est d'autre choix que de continuer à adopter ce modèle. Les adversaires sont spécialistes de l'action, des grandes annonces et occupent déjà une bonne partie du terrain. Il faut opter pour une transformation plutôt que de se lancer bêtement dans un affrontement au corps à corps. Cette transformation passe par des messages efficaces et ciblés auprès des différentes utilisateurs et décideurs de l'informatique. Ce fonctionnement est celui du Logiciel Libre. Si l'on rajoute la guerre médiatique d'aujourd'hui, un vecteur vecteur d'information est nécessaire. C'est indiscutablement les logiciels Open Source déjà présents chez les utilisateurs qui doivent être le faire de lance de ces messages.&lt;/p&gt;
&lt;p&gt;Nous pouvons avoir confiance, Sun Tzu nous annonce une victoire si nous appliquons correctement ces principes. Ils ont fonctionné parfaitement depuis plus de 4000 ans, il n'y a pas de raison qu'ils ne soient pas efficaces à notre époque également.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Références&lt;/strong&gt; :
&lt;ul&gt;
    &lt;li&gt;
&lt;p style="margin-bottom: 0cm;"&gt;&lt;a name="btAsinTitle"&gt;&lt;/a&gt;&lt;em&gt;L'Art  de la guerre&lt;/em&gt;, Sun Tzu, traduction du père Amiot, édition Mille     et Une Nuits&lt;/p&gt;
&lt;/li&gt;
    &lt;li&gt;
&lt;p style="margin-bottom: 0cm;"&gt;&lt;a name="btAsinTitle1"&gt;&lt;/a&gt;&lt;em&gt;Richard   Stallman et la révolution du logiciel libre. Une biographie     autorisée&lt;/em&gt;, Sam Williams (Auteur), Richard Stallman (Auteur),   Christophe Masutti, édition Eyrolles&lt;/p&gt;
&lt;/li&gt;
    &lt;li&gt;
&lt;p style="margin-bottom: 0cm;"&gt;&lt;a name="btAsinTitle2"&gt;&lt;/a&gt;&lt;em&gt;Traité    de l'efficacité&lt;/em&gt;, François Jullien, édition Le Livre de Poche&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;Licence&lt;/strong&gt; : ce texte est publié sous licence CC-BY-ND. Pour savoir ce que couvre cette licence, se référer à &lt;a href="http://creativecommons.org/licenses/by-nd/3.0/"&gt;http://creativecommons.org/licenses/by-nd/3.0/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Auteur&lt;/strong&gt; : Jean Gabès, naparuba@gmail.com&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Versions&lt;/strong&gt; :
&lt;ul&gt;
    &lt;li&gt;1.0 rc, 10 avril 2010 : version initiale&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt;1.0, 18 avril : intégration remarques rms&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Déduplication : bloc fixe VS bloc variable</title><link href="/deduplication-bloc-fixe-vs-bloc-variable/" rel="alternate"></link><published>2010-03-14T15:43:37+01:00</published><updated>2010-03-14T15:43:37+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2010-03-14:/deduplication-bloc-fixe-vs-bloc-variable/</id><summary type="html">&lt;p&gt;Déduplication : bloc fixe VS bloc variable&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;h2&gt;Intérêt de la dé-duplication&lt;/h2&gt;
&lt;p&gt;J'ai testé il y a quelques temps le filesystem lessfs (&lt;a href="http://www.lessfs.com/wordpress/"&gt;site officiel du projet&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;C'est un filesystem très simple à mettre en place, de type Fuse (donc en user space) qui permet de monter un espace de dé-duplication à la volée.&lt;/p&gt;
&lt;p&gt;Cette fonctionnalité permet de gagner une place considérable lorsque l'on a des données qui se ressemble fortement.&lt;/p&gt;
&lt;p&gt;Elle est complémentaire de la compression. Là où vous aller gagner sur un fichier avec la compression, si vous en avez deux, vous aller stocker deux fois la taille compressée. Avec une passe de dé-duplication avant, vous n'aurez qu'une fois chaque bloc, puis vous pouvez compresser ce qui reste.&lt;/p&gt;
&lt;h2&gt;Deux méthodes : bloc de taille fixe ou variable&lt;/h2&gt;
&lt;h3&gt;Taille fixe&lt;/h3&gt;
&lt;p&gt;Les blocs justement. Dans lessfs, ce sont des blocs de taille fixe. Donc on applique un algorithme très simple :
&lt;ul&gt;
    &lt;li&gt;on coupe la donnée en bloc de NKo (prenons 4Ko)&lt;/li&gt;
    &lt;li&gt;on fait un hash de chaque bloc&lt;/li&gt;
    &lt;li&gt;si on a déjà un hash, on change le bloc par un simple pointeur vers le bloc déjà sauvegardé&lt;/li&gt;
    &lt;li&gt;sinon on sauvegarde le bloc et son hash&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;Simple.&lt;/p&gt;
&lt;p&gt;Efficace? Pas si sûr. Bien entendu, si vous faites une copie d'un fichier, celle-ci ne va quasiment rien vous coûter. Mais faire des copies intactes de vos fichiers arrive parfois avec des sauvegardes, et encore...&lt;/p&gt;
&lt;h3&gt;Taille variable&lt;/h3&gt;
&lt;p&gt;Si l'on veut être plus efficace, il faut faire une recherche dans les données d'un bloc déjà vu. Mais là où avant on cherchait avec un début de bloc tous les 4Ko, là on cherche pour tous les octets. En effet, si vos blocs ne sont pas parfaitement alignés, vous ne reconnaîtrez pas votre bloc, car il a pris un simple offset de quelques octets!&lt;/p&gt;
&lt;p&gt;Bien sûr, ce genre de recherche est bien plus couteux en terme de CPU, 4K calculs fois plus. (En fait un peu moins, dès que vous raccrochez un wagon de blocs déjà connu, un seul calcul suffit).&lt;/p&gt;
&lt;h2&gt;Exemple de gain&lt;/h2&gt;
&lt;p&gt;Un exemple?&lt;/p&gt;
&lt;p&gt;J'ai codé rapidement un petit script en Python qui réalise ces deux types de dé-duplications :
&lt;ul&gt;
    &lt;li&gt;recherche des mêmes blocs de 4Ko avec recherche par fenêtre glissante&lt;/li&gt;
    &lt;li&gt;recherche brut de frondrie, bloc de 4k&lt;/li&gt;
&lt;/ul&gt;
Voici les résultats sur un répertoire plein de fichiers de type office and co:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;****** Stats Varible: Deplicated 342756761/465877423 = 73.00% Dedup+compress 426510002 =91.00%
****** Stats Fix: Deplicated 59596755/465877423 = 12.00% Dedup+compress 68349038 =14.00%
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On a donc &lt;strong&gt;73%&lt;/strong&gt; de gain avec des tailles de blocs variables, &lt;strong&gt;91%&lt;/strong&gt; si on les compresse par dessus. &lt;/p&gt;
&lt;p&gt;La méthode fixe bourrine n'arrive elle qu'à un faible &lt;strong&gt;12%&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Bon bah il faut demander à lessfs d'appliquer cet algo? 
Pas si simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;de un c'est ultra consommateur en CPU, donc il faut le faire en post-process, pas à la volée.&lt;/li&gt;
&lt;li&gt;Et surtout l'algo utilisé semble avoir été breveté par EMC... Et après ça qu'on vienne encore me sortir que les brevets sont fait pour protéger l'innovation.... l'investissement oui, l'innovation non...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour ceux qui ont la chance de ne pas habiter dans ce merveilleux pays des brevets logiciels, vous pouvez tester le script&lt;a href="/images/63/dedup.py"&gt;là&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: j&amp;#39;aime toujours aussi peu les brevets logiciels, surtout sur des algos aussi triviaux...
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>La réponse de l'auteur de Nagios</title><link href="/la-reponse-de-lauteur-de-nagios/" rel="alternate"></link><published>2010-03-02T11:43:48+01:00</published><updated>2010-03-02T11:43:48+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2010-03-02:/la-reponse-de-lauteur-de-nagios/</id><summary type="html">&lt;p&gt;La réponse de l'auteur de Nagios&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Ca y est, l'auteur de Nagios a répondu à la lettre ouverte sur la mailing list &lt;a href="https://sourceforge.net/mailarchive/forum.php?thread_name=4B8C9A41.9000306%40nagios.org&amp;amp;forum_name=nagios-devel"&gt;ici&lt;/a&gt;. Réponse assez complète, mieux que la blague qu'il nous a sorti sur "nagios-drama". Voici ce que l'on peut retenir de sa réponse :
&lt;ol&gt;
    &lt;li&gt;il ne lâche pas la partie open source, les fond de XI permettrons de développer d'avantage la partie open source&lt;/li&gt;
    &lt;li&gt;XI n'est pas open source car il utilise des modules externes qui ne le sont pas&lt;/li&gt;
    &lt;li&gt;la commercialisation de Nagios va se développer&lt;/li&gt;
    &lt;li&gt;la gestion du trademark ne sera pas assouplie&lt;/li&gt;
    &lt;li&gt;c'est lui qui dirige depuis 11ans, ça ne va pas changer comme ça&lt;/li&gt;
    &lt;li&gt;le core est bien comme il est, pas besoin de changements, ou alors dans les addons&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;
&lt;p&gt;Alors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bon le point 1 tant mieux, reste à le voir en action. &lt;/li&gt;
&lt;li&gt;Pour XI ok, de toute manière c'est son application, il n'a pas à justifier son choix de licence après tout. &lt;/li&gt;
&lt;li&gt;On voit mieux comment ça va s'articuler avec le point 3 : on est bien parti pour avoir une version Enterprise complète (XI) et une communautaire. Ca ressemble bien à Zenoss pour çe point là, espérons que le développement de la partie open source n'est pâtira pas.&lt;/li&gt;
&lt;li&gt;Le point 4 est ce qu'il est, même s'il protège un peu trop son trademark en ce qui concerne l'affaire nagios-fr/icinga au point de jouer contre son camp. &lt;/li&gt;
&lt;li&gt;Le point 5 bah pas grand chose à dire.&lt;/li&gt;
&lt;li&gt;Le point 6 lui est plus discutable. Je suis d'avis que ce n'est pas le core qui est bien, mais les idées qui propose (la gestion de la configuration, le support des sondes de checks et de notification) mais son implémentation le limite à des environnements de taille moyenne : les petits environnements tournent en général sous Windows, là où Nagios ne tourne pas, et les grands on besoin de bien plus de performances que Nagios propose pour l'instant, et surtout a besoin d'une centralisation de certaines choses comme les notifications et d'une supervision distribuée et hautement disponible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Au moins on sait où on va maintenant avec Nagios, on a les grandes lignes, le virage de la phase business (open source : dev, communauté puis business) est amorcé. Espérons qu'on ne tombe pas dans le ravin.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; NOTE 2021:
  * 1: bon courage pour le faire, faut beaucoup de moyen pour synchronizer les 2 :&amp;#39;(
  * 2: mauvaise justification -&amp;gt; pour payer les salaires, ça c&amp;#39;est plus vrai déjà ^^
  * 3: rien à dire, juste que c&amp;#39;est très cher à garder d&amp;#39;équerre 2 softs différents, perso j&amp;#39;ai du abandonner y à un moment
  * 4: fallait juste qu&amp;#39;il explique que sinon ses clients étaient perdus. Faut pas croire, il en faut peu, vraiment peu ^^
  * 5: toujours rien à dire, si t&amp;#39;es pas content tu fork (et après tu gères, bienvenu au club ^^)
  * 6: trop brusque comme annonce. Dire qu&amp;#39;il se limitera a un moteur pouvant être intégré dans X solutions ça oui, mais dire qu&amp;#39;il est fini
       ça personne n&amp;#39;y crois
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Nagios : l'auteur tente de museler sa communauté pour cause d'avoir été trop libre!!</title><link href="/nagios-lauteur-tente-de-museler-sa-communaute-pour-cause-davoir-ete-trop-libre/" rel="alternate"></link><published>2010-02-23T12:17:00+01:00</published><updated>2010-02-23T12:17:00+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2010-02-23:/nagios-lauteur-tente-de-museler-sa-communaute-pour-cause-davoir-ete-trop-libre/</id><summary type="html">&lt;p&gt;Nagios : l'auteur tente de museler sa communauté pour cause d'avoir été trop libre!!&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;C'est un cri d'alarme de la communauté Nagios que je me permets de relayer ici. En effet, après une longue phase d'ignorance de cette communauté de la part de l'auteur de l'outil, nous sommes arrivés à un point qui semble sans retour : l'auteur tente de museler la communauté française pour avoir été trop ouverte!!&lt;/p&gt;
&lt;p&gt;Revenons un peu sur les faits : lancé il y a plus de 10ans, Nagios est encore à l'heure actuelle l'outil de référence dans le monde de la supervision open source, et de sérieux concurrents comme Zabbix ou Zenoss commencent à lui faire de l'ombre. Dans le domaine de l'open source, et tout particulièrement celui de la supervision, la force des outils reposent sur leur communauté. Celle de Nagios a été fleurissante pendant des années. Cependant, depuis environs deux ans, l'absence de réponse de l'auteur principal aux propositions de cette communauté a légitimement irrité cette communauté, au point de voir fleurir un fork il y a environs un an, nommé Icinga.&lt;/p&gt;
&lt;p&gt;Là où l'histoire se complexifie se passe dans la sphère économique des sociétés utilisant et supportant Nagios. Comme pour beaucoup de logiciels commençant à prendre de l'ampleur, après plus de 8 années dédiées au projet l'auteur a légitimement crée une société de support et d'intégration nommée "Nagios Enterprise" et qui a déposé le nom "Nagios". Le fork "Icinga" est issu de membres de la communauté Nagios qui sont employés par "Netways", société allemande qui fait elle aussi du support et de l'intégration de Nagios. Si la licence GPLv2 est respectée, l'opportunisme et le manque de fair-play de cette société a fortement irritée l'auteur de Nagios et le reste de la communauté qui est restée fidèle dans sa grande majorité au projet initial.&lt;/p&gt;
&lt;p&gt;Cette histoire semble avoir malheureusement eu un effet collatéral : l'auteur de Nagios s'est retourné contre sa communauté et l'ouverture qui a permis ce fork en l'ignorant encore davantage si c'était encore possible, en ne répondant pas par exemple à des propositions d'amélioration substantielles de code. Dernier affront en date et non des moindres : l'auteur demande à ce que lui soit cédé l'enregistrement DNS nagios-fr.org afin qu'il puisse réunir une communauté plus "corporate" car celle-ci a parlée sur son site du projet open source, mais félon à ses yeux, Icinga. Posts qui de plus n'étaient pas particulièrement élogieux. Fork qui au final aura plus coupé l'auteur de sa communauté que simplement un projet en deux.&lt;/p&gt;
&lt;p&gt;La coupe est pleine pour la communauté qui se veut aussi ouverte que les outils qu'elle défend. Dans logiciel Open Source, il y "free as in beer" mais aussi "free as in speech". Olivier Jan, fondateur et leader de cette communauté francophone, a ainsi répondu [1] qu'il ne serait pas possible de se laisser dicter ce sur quoi la communauté pouvait parler. Pour ne pas risquer une hypothétique assignation en justice (pour protection de trademark), il a donc été décidé d'obtempérer à l'attaque en déplaçant le site de la communauté vers monitoring-fr et de donner nagios-fr.org à la société Nagios Enterprise une fois la migration finie.&lt;/p&gt;
&lt;p&gt;C'est donc avec une lettre ouverte [2] au titre de "The nagios community wants to keep its open soul" que la communauté demande où ce projet se dirige, s'il sera toujours ouvert et respectueux des principes même des l'open source. Des questions se posent en effet sur la réelle volonté de laisser ce projet open source en gelant la partie GPL et en l'incluant dans une solution fermée ("Nagios XI" éditée et diffusée sous peu par Nagios Enterprise) qui sera vraisemblablement seule à évoluer dans les années à venir. La communauté demande encore comment elle est perçue, si elle a encore sa place et si elle est tenue de tenir sa langue dans sa bouche sous peine de poursuite judiciaire en cas de non respect de la sacro sainte parole corporate de Nagios Enterprise.&lt;/p&gt;
&lt;p&gt;Cette communauté fortement active ces dernières année est supportrice de l'industrialisation et le support de Nagios par des sociétés de logiciels libres, mais à la condition de pouvoir garder son âme. Nous souhaitons tous que Nagios conserve son rang qui ne l'oublions pas lui a été apporté grâce au soutient de toute sa communauté et que le projet revienne à la "bonne époque" où les codeurs et personnes de bonne volontés avaient encore leur mots à dire face à la communication marketing.&lt;/p&gt;
&lt;p&gt;Espérons que cette lettre ne restera pas lettre morte, car ceci finirait de creuser le gouffre qui sépare l'auteur de Nagios et sa communauté qui est la vraie force motrice du projet et ferait le nid d'un fork qui diviserait encore la communauté, et qui rajouterai encore des noms tabous sur les sites traitant de Nagios.&lt;/p&gt;
&lt;p&gt;Toutes les personnes souhaitant apporter leur soutient à notre démarche peux le faire en votant sur &lt;a href="http://ideas.nagios.org/a/dtd/22035-3955"&gt;http://ideas.nagios.org/a/dtd/22035-3955&lt;/a&gt; (pas besoin d'avoir un compte) qui est le site des idées de Nagios.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[1] : &lt;a href="http://www.nagios-fr.org/2010/02/accuse-nagios-fr-org-levez-vous/"&gt;http://www.nagios-fr.org/2010/02/accuse-nagios-fr-org-levez-vous/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] : &lt;a href="https://sourceforge.net/mailarchive/forum.php?thread_name=20100223103544.9upjoc1mbogwwc4o%40intra.expertise-online.net&amp;amp;forum_name=nagios-devel"&gt;https://sourceforge.net/mailarchive/forum.php?thread_name=20100223103544.9upjoc1mbogwwc4o%40intra.expertise-online.net&amp;amp;forum_name=nagios-devel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; l'auteur a répondu. Voir &lt;a href="/la-reponse-de-lauteur-de-nagios/"&gt;là&lt;/a&gt; pour sa réponse.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: faut avouer qu&amp;#39;il a mal géré, il aurait pu dire la vérité et que pour un problème de marque et que sinon les clients
           payant ne comprendrait pas, on ne peux pas avoir un site nagios avec autre chose dedans.
           Mais le faire à l&amp;#39;arrache sans expliquer, c&amp;#39;est risquer de braquer tout le monde.
           SPOILER: c&amp;#39;est exactement ce qui s&amp;#39;est passé ^^
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Partie à trois : Python, __slots__ et metaclass</title><link href="/partie-a-trois-python-__slots__-et-metaclass/" rel="alternate"></link><published>2010-02-15T15:08:33+01:00</published><updated>2010-02-15T15:08:33+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2010-02-15:/partie-a-trois-python-__slots__-et-metaclass/</id><summary type="html">&lt;p&gt;Partie à trois : Python, &lt;strong&gt;slots&lt;/strong&gt; et metaclass&lt;/p&gt;</summary><content type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: je savais trouvé mes titres quand même ^^
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Les langages dynamiques sont pratiques pour se frotter facilement à de nouveaux paradigmes de programmations. Aucune technique n'étant parfaite, l'aspect dynamique se paye.&lt;/p&gt;
&lt;h2&gt;Le prix à payer pour les langages dynamiques&lt;/h2&gt;
&lt;p&gt;Bien souvent on pense au coût CPU pour ces langages, mais cette ressource n'est pas la seule à prendre cher. 
Là où un accès à une structure est en 0(1) en C ou C++, il peut être plus élevé dans des langages où les propriétés des objets ne sont pas identiques entre les instances. &lt;/p&gt;
&lt;p&gt;Il en est de même pour la RAM : les objets pouvant avoir de nouvelles propriétés à chaud, leur accès se fait en vérifiant le dictionnaire &lt;em&gt;&lt;strong&gt;dict&lt;/strong&gt;&lt;/em&gt; des objets. &lt;/p&gt;
&lt;p&gt;Le dictionnaire est fort simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;:
   &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
      &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;span class="nx"&gt;point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Initialement&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__dict__&lt;/span&gt;
&lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Apres&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__dict__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Donne :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Initialement {&amp;#39;y&amp;#39;: 2, &amp;#39;x&amp;#39;: 1}
Apres {&amp;#39;y&amp;#39;: 2, &amp;#39;x&amp;#39;: 1, &amp;#39;z&amp;#39;: 3}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;C'est sympa, c'est dynamique. 
Mais ceci a un coût en Mémoire : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ici nous avons un seul objet, mais si nous avons 1000 points, chacun aura son propre &lt;strong&gt;dict&lt;/strong&gt; indépendant&lt;/li&gt;
&lt;li&gt;et surtout les chaînes 'x', 'y' et 'z' seront dupliquées dans chaque instance. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Imaginons que nous avons 1000000 de points à conserver, la consommation de RAM va être de 176mo sur notre exemple (Python 2.6.4).&lt;/p&gt;
&lt;p&gt;Si nous prenons des classes avec des noms de propriétés plus grandes que 'x', on peut atteindre des sommets en terme de consommation de RAM pour finalement pas grand chose.&lt;/p&gt;
&lt;p&gt;Le module guppy (disponible sur pypi de mémoire) peut être très pratique pour observer qui consomme de la RAM dans notre application. &lt;/p&gt;
&lt;p&gt;Son utilisation est fort simple :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;guppy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hpy&lt;/span&gt;
&lt;span class="n"&gt;hp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hpy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;hp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sa sortie est (relativement) éloquente :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Partition of a set of 2024657 objects. Total size = 173885852 bytes.
Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
0 999999  49 135999864  78 135999864  78 dict of __main__.Test
1 999999  49 31999968  18 167999832  97 __main__.Test
2    127   0  4073248   2 172073080  99 list
3  10686   1   744928   0 172818008  99 str
4   5540   0   203368   0 173021376 100 tuple
5    347   0   115160   0 173136536 100 dict (no owner)
6   1539   0   104652   0 173241188 100 types.CodeType
7     64   0   100480   0 173341668 100 dict of module
8    175   0    94840   0 173436508 100 dict of type
9    194   0    86040   0 173522548 100 type
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;78% de la consommation mémoire est due aux&lt;em&gt; &lt;strong&gt;dict&lt;/strong&gt;&lt;/em&gt; de nos points, les valeurs de ces instances consommant quant à elles 18%.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;slots&lt;/strong&gt; : c'est les soldes pour Python&lt;/h2&gt;
&lt;p&gt;Lorsque l'on sait à l'avance quelles vont être les possibilités des noms de propriétés de nos instances, il peut être pratique de recourir à l'utilisation des &lt;em&gt;&lt;strong&gt;slots&lt;/strong&gt;&lt;/em&gt;. C'est un tuple dans la classe où les noms des propriétés vont être mises en commun pour toutes les instances de la classe. Attention, son utilisation est fort simple, mais elle limite certaines possibilités de Python par la suite, comme certains problèmes avec tout ce qui touche la sérialisation d'objet par exemple.&lt;/p&gt;
&lt;p&gt;Si vous souhaitez l'utiliser, c'est fort simple, il suffit de rajouter le tuple à la classe si elle hérite d'&lt;em&gt;object&lt;/em&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="nx"&gt;__slots__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
      &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si simple? Non en fait. le &lt;em&gt;&lt;strong&gt;slots&lt;/strong&gt;&lt;/em&gt; va remplacer &lt;em&gt;&lt;strong&gt;dict&lt;/strong&gt;&lt;/em&gt; qui va tout simplement disparaitre! &lt;/p&gt;
&lt;p&gt;Notre code va lamentablement échouer avec:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Initialement
Traceback (most recent call last):
File &amp;quot;test_slot.py&amp;quot;, line 10, in &amp;lt;module&amp;gt;
print &amp;#39;Initialement&amp;#39;, point.__dict__
AttributeError: &amp;#39;Test&amp;#39; object has no attribute &amp;#39;__dict__&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pour contourner cela, il suffit de rajouter &lt;strong&gt;dict&lt;/strong&gt; au slots:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="nx"&gt;__slots__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__dict__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
      &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On relance, la consommation passe à 47Mo. (Les gains sont encore plus importants avec des chaînes de plus d'un caractère :) ).
Pour Shinken par exemple, avec 100000 services, j'étais à plus de 2Go de RAM consommée, avec les slots, je suis tombé à moins 50Mo environs...&lt;/p&gt;&lt;/p&gt;
&lt;h2&gt;Metaclass : une classe pour en modifier d'autres&lt;/h2&gt;
&lt;p&gt;En Python, on a déjà vu que les classes sont des objets comme les autres. Qui dit objet dit instanciation. Lors de cette instanciation, il peut être pratique de changer des choses à la volée. C'est justement le rôle des &lt;em&gt;metaclass&lt;/em&gt;. C'est une classe qui va contrôler la création d'une autre. Elles peuvent être utilisées pour par exemple tracer automatiquement tous les appels de méthode d'une classe. Pour un tel exemple, voir sur &lt;a href="http://www.afpy.org/Members/kerflyn/metaclass"&gt;http://www.afpy.org/Members/kerflyn/metaclass&lt;/a&gt; qui présente très bien cela.&lt;/p&gt;
&lt;h2&gt;On mixe le tout&lt;/h2&gt;
&lt;p&gt;Vous allez me dire: bon c'est bien les &lt;em&gt;metaclass&lt;/em&gt;, mais c'est quoi le rapport avec les &lt;em&gt;&lt;strong&gt;slots&lt;/strong&gt;&lt;/em&gt;? 
Et bien c'est pratique lorsque l'on a beaucoup de propriétés dans une classe, comme par exemple Service ou Host de Shinken. 
Jusqu'à maintenant, lorsque je rajoutait une nouvelle propriété à ces classes, je rajoutais une ligne dans le tableau &lt;em&gt;properties&lt;/em&gt; ou &lt;em&gt;running_properties&lt;/em&gt;, mais je devais penser à rajouter ce même paramètre dans le tuple  &lt;em&gt;&lt;strong&gt;slots&lt;/strong&gt;&lt;/em&gt; de la classe.
Autant dire qu'une fois sur deux, j'oubliais. De plus, ça fait un gros pâté en début de classe, et je n'aime pas ça.&lt;/p&gt;
&lt;p&gt;Je suis tombé sur &lt;a href="http://code.activestate.com/recipes/435880/"&gt;http://code.activestate.com/recipes/435880/&lt;/a&gt; qui présente comment générer automatiquement le tuple &lt;em&gt;&lt;strong&gt;slots&lt;/strong&gt;&lt;/em&gt; pour ses classes en regardant tout simplement les variables fournies à &lt;em&gt;&lt;strong&gt;init&lt;/strong&gt;&lt;/em&gt; (il semble créer d'ailleurs une liste qui doit être changée en tuple par l'interpréteur). Bon pour les Host et Service, il n'y a qu'un seul paramètre, un tableau de construction. Mais ça m'a donné l'idée d'adapter ce code pour qu'il utilise les tableaux &lt;em&gt;properties &lt;/em&gt;et &lt;em&gt;running_properties&lt;/em&gt; de mes classes qui contiennent toutes les propriétés de mes objets.&lt;/p&gt;
&lt;p&gt;Edit : Merci à Bertrand Mathieu pour la simplification du code par set.&lt;/p&gt;
&lt;p&gt;Ceci donne au final la classe &lt;em&gt;AutoSlots&lt;/em&gt; suivante :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AutoSlots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;slots&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__slots__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt; &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;running_properties&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;properties&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;dct&lt;/span&gt;:
         &lt;span class="kt"&gt;slots.update&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;properties&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;running_properties&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;dct&lt;/span&gt;:
         &lt;span class="kt"&gt;lots.update&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;running_properties&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
      &lt;span class="nx"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__slots__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slots&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Qui est appelée avec :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SchedulingItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;AutoSlots&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;__slots__&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt;
   &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;running_properties&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;
   &lt;span class="nx"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AutoSlots&lt;/span&gt;
   &lt;span class="p"&gt;[..]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Maintenant les &lt;em&gt;&lt;strong&gt;slots&lt;/strong&gt;&lt;/em&gt; sont construits à la volée, et il n'y a plus de risque d'oublier des paramètres et mes classes Host/Service se re-concentrent un peu sur ce qu'elles doivent faire, et non sur une astuce pour contourner une consommation excessive de RAM par Python.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: c&amp;#39;est quand même con de devoir en arriver là pour gagner de la ram non?
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Les escalades de notifications enfin simples à mettre en place</title><link href="/les-escalades-de-notifications-enfin-simples-a-mettre-en-place/" rel="alternate"></link><published>2010-01-25T13:48:57+01:00</published><updated>2010-01-25T13:48:57+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2010-01-25:/les-escalades-de-notifications-enfin-simples-a-mettre-en-place/</id><summary type="html">&lt;p&gt;Les escalades de notifications enfin simples à mettre en place&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;J'ai rajouté dernièrement le support des escalades de notifications. &lt;/p&gt;
&lt;p&gt;Pour rappel, elles permettent d'envoyer à d'autres contacts les notifications lorsqu'un problème persiste. Par exemple, vous pouvez définir pour le service CPU sur main-server un escalade qui va prévenir les chefs si au bout de 3 notifications le problème n'est pas résolu :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;define serviceescalation{
    host_name main-server
    service_description Load
    contacts chef, grandchecf, coupeurdetete
    first_notification 3
    last_notification 0
    notification_interval 20
    escalation_period 24x7
    escalation_options w,u,c,r
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cependant, cette forme de définition pose un problème : elle va s'appliquer sur des éléments, ici des services, au lieu d'être appelée par ces éléments.&lt;/p&gt;
&lt;p&gt;Par clair? &lt;/p&gt;
&lt;p&gt;Disons qu'ici pour l'utiliser sur un service c'est sympa, mais en général on aimerait bien l'avoir pour un groupe de service, ou un groupe d'hôte, saufs certains service ou hôtes, etc. Bien sûr on a la possibilité de mettre * ou hostgroup_name, mais c'est vite limité. Bref, avoir la possibilité d'avoir une véritable gestion par des techniques d'héritages pourrait être utile (additif et implicite notamment).&lt;/p&gt;
&lt;p&gt;De plus, quand on y pense, ici encore on a bien souvent un héritage host-&amp;gt; service non? Genre si la machine serveur-1 tombe, on aimerait bien avoir cette même règle sur les services de cette machine. Mais Nagios ne pospose ue serviceescalation et hostescalation, donc c'est pardu pour l"héritage, surtout quand c'est une application sur des éléments, et non un appel de ces éléments.&lt;/p&gt;
&lt;p&gt;C'est pourquoi j'ai rajouté un nouvel object dans Shinken : escalation. Bah oui, ni service, ni host. Ca a un air de déjà vu pour la définition :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;define escalation{
    escalation_name ToBoss
    contacts chef, grandchecf, coupeurdetete
    first_notification 3
    last_notification 0
    notification_interval 20
    escalation_period 24x7
    escalation_options w,u,c,r
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Et après on l'appel depuis un hôte :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;define host{
    [...]
    escalations ToBoss
    [...]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Après si on ne défini rien sur les services de cet hôte, ce paramètre sera automatiquement hérité (TODO : rajouter une option pour hériter implicitement ou non certains champs). Et avec une telle définition, c'est ultra simple de le rajouter dans les templates qu'il faut, et hop, la gestion des escalade faciles. Ceci me permettra peut être de réellement les utiliser un jour, car dans leur état actuel, leur définition est un véritable cauchemars sur les grands environnements...&lt;/p&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: TODO: ça a été fait, ouf ^^
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Gestion des exclusions de timeperiods</title><link href="/gestion-des-exclusions-de-timeperiods/" rel="alternate"></link><published>2010-01-06T17:15:06+01:00</published><updated>2010-01-06T17:15:06+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2010-01-06:/gestion-des-exclusions-de-timeperiods/</id><summary type="html">&lt;p&gt;Gestion des exclusions de timeperiods&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Et bien après une bataille qui avait des air de guerre épique, j'ai mis en place les exclusions de timeperiods. &lt;/p&gt;
&lt;p&gt;Après une première version un peu ... bourrine, une nouvelle arrive qui passe les tests et qui en plus est rapide. &lt;/p&gt;
&lt;p&gt;Cette partie du code n'est pas celle que je préfère, car il faut dire que les problèmes des dates et de calcul d'intervalle, c'est touffu, surtout lorsque l'intervalle ressemble à '&lt;em&gt;monday 3 - thursday 4      00:00-11:00,12:00-24:00&lt;/em&gt;' (soit entre le troisième lundi du mois et le 4ième jeudi).&lt;/p&gt;
&lt;p&gt;Et puis le plus marrant dans ces définitions, c'est que c'est relatif par rapport au moment où vous calculer...&lt;/p&gt;
&lt;p&gt;Mine de rien, c'est sûrement la partie la plus complexe de l'outil. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: 12 ans après, je suis encore avec ça, c&amp;#39;est clairement ce qui m&amp;#39;a demandé le plus de taf et d&amp;#39;algorithmes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bon je ne vais pas me plaindre, le module &lt;strong&gt;time &lt;/strong&gt;de python a bien aidé. Bref, vous pouvez faire une déclaration du genre :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;define timeperiod{
   timeperiod_name                 24x7
   alias                           24_Hours_A_Day,_7_Days_A_Week
   sunday                          00:00-24:00
   monday                          00:00-24:00
   tuesday                         00:00-24:00
   wednesday                               00:00-24:00
   thursday                                00:00-24:00
   friday                          00:00-24:00
   saturday                                00:00-24:00
   exclude                         workhours
}
# &amp;#39;workhours&amp;#39; timeperiod definition
define timeperiod{
   timeperiod_name workhours
   alias           Normal Work Hours
   monday          09:00-17:00
   tuesday         09:00-17:00
   wednesday       09:00-17:00
   thursday        09:00-17:00
   friday          09:00-17:00
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Donc ici&lt;em&gt; 24x7&lt;/em&gt; sera sans les &lt;em&gt;workhours &lt;/em&gt;(bon bah c'est un exemple hein, à vous de trouver quelque chose de plus utile....). &lt;/p&gt;
&lt;p&gt;Donc un check en &lt;em&gt;24x7&lt;/em&gt; voulant être lancé vers 10h le sera à 17h en fait. Ceci gère aussi si les &lt;em&gt;timeperiods &lt;/em&gt;dans &lt;em&gt;exclude &lt;/em&gt;ont elles même des &lt;em&gt;exclude &lt;/em&gt;bien sûr.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: vous savez c&amp;#39;est quoi le pire: quelques années après, je me suis apperçu qu&amp;#39;en fait Nagios ne gérait pas du tout ça...
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Après MySQL, Oracle et couchdb : Sqlite</title><link href="/apres-mysql-oracle-et-couchdb-sqlite/" rel="alternate"></link><published>2010-01-04T12:23:11+01:00</published><updated>2010-01-04T12:23:11+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2010-01-04:/apres-mysql-oracle-et-couchdb-sqlite/</id><summary type="html">&lt;p&gt;Après MySQL, Oracle et couchdb : Sqlite&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Voici l'arrivée dans Shinken du support du schéma Merlin sous Sqlite (merci Python pour le support natif et simple). 
Sqlite permet d'avoir une base de données à peu de frais, directement dans un fichier, sans tout le bordel qu'il y a autour lorsque l'on souhaite une petite base simple en local.&lt;/p&gt;
&lt;p&gt;Les applications tierces n'auront plus d'excuses pour encore utiliser les fichiers plats, là on fait du Select en un temps records, installation de la base comprise.&lt;/p&gt;
&lt;p&gt;La configuration du plugin est simple :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;define plugin{
   plugin_name      ToMerlindb_Sqlite
   plugin_type      merlindb_sqlite
   database_path    /data/mabase.sqlite
}


NOTE 2021: je l&amp;#39;avais complètement oublié celui là ^^
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Généralisation des modulations de résultats</title><link href="/generalisation-des-modulations-de-resultats/" rel="alternate"></link><published>2009-12-31T12:29:27+01:00</published><updated>2009-12-31T12:29:27+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-12-31:/generalisation-des-modulations-de-resultats/</id><summary type="html">&lt;p&gt;Généralisation des modulations de résultats&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Comme vu dans des posts précédents, le fait de pouvoir changer des retours à la volée avant de les analyser peut être pratique, comme changer un critical en warning, ou bien un ok en critical. Sur la mailing list, Thomas Guyot-Sionnest a proposé de généraliser cela. C'est pourquoi je pense implémenter un nouvel objet dans Shinken (et oui, encore un :) ) : &lt;strong&gt;resultmodulation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Ceci va ressembler à :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;define resultmodulation{
   resultmodulation_name     critical_is_warning ;required
   exit_codes_match          2 ;optionnal, list of code to change
   output_match                     //                ;optionnal, regexp for activation of exit_code if output match
   exit_code_modulation      1 ;code that will be put if the code match
   output_modulation         s/// ;optionnal regexp to change output
   longoutput_modulation     s/// ;optionnal regexp to change long_output
   modulation_period         24x7 ;period when to apply the modulation
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Puis après dans les hôtes et service, on appelle le modulation, qui pourra être hérité de manière implicite: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;define host{
    [...]
    resultmodulations                 critical_is_warning
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On peut remarquer le s de resultmodulations. En effet, on peut avoir besoin de plusieurs modulations. Elles vont seulement être appliquées les unes à la suite des autres.&lt;/p&gt;
&lt;p&gt;Il ne reste plus qu'à implémenter alors, et enlever les paramètres spécifiques comme hotperiod (dommage j'aimais bien ce nom :) )&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Couchdb dans Shinken</title><link href="/couchdb-dans-shinken/" rel="alternate"></link><published>2009-12-17T12:42:54+01:00</published><updated>2009-12-17T12:42:54+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-12-17:/couchdb-dans-shinken/</id><summary type="html">&lt;p&gt;Couchdb dans Shinken&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;J'ai lu il n'y a pas longtemps des articles sur Couchdb (&lt;a href="http://couchdb.apache.org"&gt;http://&lt;/a&gt;&lt;cite&gt;&lt;a href="http://couchdb.apache.org"&gt;&lt;strong&gt;couchdb&lt;/strong&gt;.apache.org&lt;/a&gt;)&lt;/cite&gt;. J'ai voulu voir un peu ce que ça donne en vrai. L'intérêt de ce type de base est de na pas avoir de table, mais une liste de documents. J'ai donc essayé de faire un plugin Broker pour avoir un export en Couchdb des services (faut bien commencer par quelque chose).&lt;/p&gt;
&lt;p&gt;Ca tombe bien, il y a un module python-couchdb (&lt;a href="http://code.google.com/p/couchdb-python/"&gt;http://code.google.com/p/couchdb-python/&lt;/a&gt;) ultra simple à utiliser (bah c'est du Python hein). Après une belle frayeur sur les perfs (40ms par entrée, ça commence à faire beaucoup à mon goût) dû au protocole Nagle de TCP (pour beaucoup d'envois de faible taille, il faut mettre la socket en &lt;em&gt;NO_DELAY&lt;/em&gt;), j'ai été un peu plus rassuré : 1000 entrées insérées en 2secondes. Ce n'est pas ultra rapide, mais ce n'est pas ultra lent non plus. Ce que ça donne?&lt;/p&gt;
&lt;p&gt;Ca :&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/55/shinken-couchdb.png"&gt;&lt;img class="aligncenter size-full wp-image-425" title="shinken-couchdb" src="/images/55/shinken-couchdb.png" alt="shinken-couchdb" width="580" height="344" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pour l'instant seul la création des documents est faite, et ce uniquement pour les services (mais le reste est rapide). Pour la mise à jour (genre après un check :) ) il va falloir que je me penche sur les 'views' car il va falloir que je retrouve le service avant de le mettre à jour. En effet, pour l'instant l'id du document est son id (unique pour chaque service lors de la lecture de la conf). Je mettrais bien un truc du genre "srv-1/Cpu" comme id, un truc simple. Mais je ne me rappelle plus si dans Nagios les &lt;strong&gt;/&lt;/strong&gt; sont autorisés dans les noms d'éléments (sinon comment savoir quel est la partie host de "srv-1/CPU/1" pour le service CPU/1 de srv-1).&lt;/p&gt;
&lt;p&gt;Quelqu'un a une proposition pour l'id des services? Si on arrive à trouver un mix du nom d'hôte/nom de service, on n'a pas besoin de faire de views pour retrouver l'id dans co, ça sera autrement plus efficace :)&lt;/p&gt;
&lt;p&gt;PS: pour preuve que python-couchdb est ultra simple à utiliser : le broker reçoit les données dans un dictionnaire python (dict). Et bien pour créer le "document" en base, même pas besoin de créer un INSERT, VALUES and co, juste : db.create(dict)  :p&lt;/p&gt;
&lt;p&gt;Oui le Python, c'est vraiment pour les feignasses  8-)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: c&amp;#39;est encore utilisé couchdb?
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Shinken sur ZDNet!</title><link href="/shinken-sur-zdnet/" rel="alternate"></link><published>2009-12-16T16:03:54+01:00</published><updated>2009-12-16T16:03:54+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-12-16:/shinken-sur-zdnet/</id><summary type="html">&lt;p&gt;Shinken sur ZDNet!&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;&lt;a href="http://www.zdnet.de/it_business_technik_nagios_alte_probleme_und_neue_perspektiven_story-11000009-41524548-1.htm"&gt;http://www.zdnet.de/it_business_technik_nagios_alte_probleme_und_neue_perspektiven_story-11000009-41524548-1.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C'est Gerhard Laußer qui est interviewé. C'est un expert Nagios de la société ConSol (&lt;a href="http://www.consol.de"&gt;&lt;em&gt;www.consol.de&lt;/em&gt;&lt;/a&gt;) et qui m'a déjà fournis de nombreux patchs pour Shinken. Dans l'article et l'interview, Garhard parle de Nagios et de son activité récente. Vu que je ne parle pas un traitre mot d'allemand, je n'ai pu lire que la traduction google de l'article (&lt;a href="http://translate.google.fr/translate?js=y&amp;amp;prev=_t&amp;amp;hl=fr&amp;amp;ie=UTF-8&amp;amp;layout=1&amp;amp;eotf=1&amp;amp;u=http%3A%2F%2Fwww.zdnet.de%2Fit_business_technik_nagios_alte_probleme_und_neue_perspektiven_story-11000009-41524548-1.htm&amp;amp;sl=auto&amp;amp;tl=fr"&gt;http://translate.google.fr/translate?js=y&amp;amp;prev=_t&amp;amp;hl=fr&amp;amp;ie=UTF-8&amp;amp;layout=1&amp;amp;eotf=1&amp;amp;u=http%3A%2F%2Fwww.zdnet.de%2Fit_business_technik_nagios_alte_probleme_und_neue_perspektiven_story-11000009-41524548-1.htm&amp;amp;sl=auto&amp;amp;tl=fr&lt;/a&gt;) mais Gerhard m'a dit avoir été sympa avec Shinken dans l'interview :)&lt;/p&gt;
&lt;p&gt;Merci à lui.&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Python et le Data-Driven programming</title><link href="/python-et-le-data-driven-programming/" rel="alternate"></link><published>2009-12-16T11:22:34+01:00</published><updated>2009-12-16T11:22:34+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-12-16:/python-et-le-data-driven-programming/</id><summary type="html">&lt;p&gt;Python et le Data-Driven programming&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Suite au post d'un journal sur linux-fr concernant Shinken et l'avenir de Nagios (&lt;a href="http://linuxfr.org/~naparuba/29141.html"&gt;http://linuxfr.org/~naparuba/29141.html&lt;/a&gt;) certains m'ont demandé pourquoi j'ai choisi le Python (&lt;a href="http://www.python.org"&gt;www.python.org&lt;/a&gt;) pour Shinken. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;J'ai répondu que 80% du choix était dû à mon goût perso&lt;/li&gt;
&lt;li&gt;20% pour les qualités du langages sur la résolution du problème&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Les 20% sont en fait le module Pyro (&lt;a href="http://pyro.sourceforge.net/"&gt;http://pyro.sourceforge.net/&lt;/a&gt;) pour les objets distants (un peu comme Corba, mais autrement plus simple à utiliser et plus dynamique (pas de déclaration de squelette)).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOTE 2021: en fait j'ai enlevé Pyro au fil du temps, mais il m'a fait gagné beaucoup de temps au début en effet&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Et les 80% restant?&lt;/h2&gt;
&lt;p&gt;On peu un peu se demander ce qu'il y a dans les 80% restant. Outre le fait que le langage ne pique pas les yeux (et évite les nœuds ... au cerveau), et qu'il a d'intégré un module pour la gestion des pools de process (lancement des checks en parallèle), il a de réelles qualités sur son dynamisme qui permettent d'utiliser une vaste panoplie de paradigme de programmation. Il ne les fait pas tous bien entendu (genre la programmation logique (et le prolog)), mais il permets déjà d'utiliser les principaux:
&lt;ul&gt;
    &lt;li&gt;programmation itérative et récursive&lt;/li&gt;
    &lt;li&gt;programmation orientée objet&lt;/li&gt;
    &lt;li&gt;programmation orientée aspect (&lt;em&gt;decorator&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
Bon c'est bien, mais le rapport avec la choucroute il et où? Et bien suivant la situation, avec Python on peut choisir, c'est plutôt sympa. Lorsque vous gérez des graphes, le récursif s'impose de lui même (ou alors vous être vraiment tordu...), en règle général c'est de l'objet, et dans quelques cas particuliers l'aspect.&lt;/p&gt;
&lt;h2&gt;Une matrice de création nommée ADN&lt;/h2&gt;
&lt;p&gt;Concernant l'objet, la création des objets n'est pas classique pour la plupart des types dans Shinken. Nagios utilise des techniques d'héritages sur des objets (hosts/services) qui ont de multiples propriétés (et c'est rien de le dire). Alors m'amuser à faire des constructeurs de 5 lignes non extensibles facilement, non merci. Si c'est pour faire ça, autant rester à faire du C.&lt;/p&gt;
&lt;p&gt;C'est là que vient le &lt;em&gt;data-driven&lt;/em&gt; (enfin je crois que c'est comme ça que ca s'appelle) : vous décrivez votre objet dans un tableau quelconque, et au lieu de coder ce que vous devez faire pour chaque propriétés, vous faire une boucle sur votre tableau de description pour faire l'action, avec outre le nom de la propriété, les informations dans ce tableau sur quoi faire pour telle propriété. C'est tout (bah oui, c'est tout con, d'ailleurs je l'ai fait avant de savoir comment ça s'appelait...). L'intérêt? Aucun si vote objet a trois pauvres propriétés, mais énorme si elles commencent à devenir nombreuses (genre une bonne vingtaine).&lt;/p&gt;
&lt;p&gt;Comme pour la plupart des techniques de programmations, l'intérêt est d'avoir une factorisation des informations. Ici vos propriétés (et les propriétés de ces propriétés...) sont définies dans un seul endroit. Si vous voulez changer, rajouter, supprimer quelque chose, pas besoin d'aller parcourir l'ensemble du code. Celui-ci ne connait pas ce que vous avez mis comme données dans vos tableaux. Il sait les traiter, mais ne connait pas à l'avance ce qu'il y a dedans. Le tableau est une sorte d'ADN de l'objet : c'est sa matrice de fabrication.&lt;/p&gt;
&lt;h2&gt;Où qu'on le met cet ADN?&lt;/h2&gt;
&lt;p&gt;Ce qui est embêtant est d'accéder à ce tableau lors de vos traitement. Bien sûr il y a la méthode consistant à le mettre en variable global, mais les variables globales c'est un peu comme le goto : le mal absolu. Mettre le tableau dans chaque objet? Bof, c'est crade, un objet n'a pas besoin d'avoir son ADN d'accroché pour vivre une fois crée (vous utilisez votre ADN vous? Non, vous utilisez les protéines qu'il a permis de fabriquer). Python nous aide ici. Si vous faite &lt;em&gt;objet.&lt;strong&gt;class&lt;/strong&gt;&lt;/em&gt; vous obtenez la classe de l'objet. Et oui, une classe est un objet. Et un objet en python peut se voir accrocher des propriétés... genre notre tableau.&lt;/p&gt;
&lt;p&gt;Si on rajoute ceci à un héritage de nos objets à une classe "Item" qui va faire le travail de construction, on obtient une fabrique de n'importe quel objet le temps que l'on définisse son ADN dans la classe de l'objet. Pratique non? C'est diablement efficace pour factoriser le code à sa plus simple expression.&lt;/p&gt;
&lt;h2&gt;Et au final on y gagne beaucoup?&lt;/h2&gt;
&lt;p&gt;Vous voulez un exemple? Le code de Nagios pour juste la fabrication des objets avec les techniques d'héritages and co prends à lui seul plus de 11K lignes. Shinken dans son entier (architecture distribuée, configuration, envoi dans les bases de données, ordonnancement, etc) en prends un peu plus de 8K. &lt;em&gt;Owned&lt;/em&gt; comme dirait l'autre.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: en effet, par contre purée ce que ça coute chez en temps d&amp;#39;éxécution au run ^^
           un petit language compilé qui me permettrait de faire la même chose? :p
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Il fait chaud chaud cet hiver</title><link href="/il-fait-chaud-chaud-cet-hiver/" rel="alternate"></link><published>2009-12-15T13:39:09+01:00</published><updated>2009-12-15T13:39:09+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-12-15:/il-fait-chaud-chaud-cet-hiver/</id><summary type="html">&lt;p&gt;Il fait chaud chaud cet hiver&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Ca y est, les &lt;em&gt;hot_period&lt;/em&gt; sont implémentées (cf &lt;a href="/hot-periods"&gt;/hot-periods&lt;/a&gt;). Au passage j'ai viré la dépendance à &lt;em&gt;python-graph-core&lt;/em&gt;, plus d'erreurs avec &lt;em&gt;digraph &lt;/em&gt;suivant la version de &lt;em&gt;python-graph&lt;/em&gt; que vous utilisez. En plus les histoires de graph c'est toujours marrant...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: 12ans après, en effet, les graphes c&amp;#39;est toujours fun ^^
           je ne comprends toujours pas pourquoi je n&amp;#39;ai eu que 5/20 à cette matière, ça restera toujours un mystère cette histoire...
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Hot periods</title><link href="/hot-periods/" rel="alternate"></link><published>2009-12-14T12:24:27+01:00</published><updated>2009-12-14T12:24:27+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-12-14:/hot-periods/</id><summary type="html">&lt;p&gt;Hot periods&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Ce post fait suite à celui des modulateurs de code retour. Pour rappel, ils permettent pour des services de modifier les codes retours suivants ce que l'on veut. Les deux proposés sont:
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;inverse_ok_critical&lt;/strong&gt; : pour les services actifs/passifs&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;critical_is_warning&lt;/strong&gt; : pour les services sur des machines de priorités plus faibles comme celles de QUALIFICATION.&lt;/li&gt;
&lt;/ul&gt;
Pour les machines de Qualif, nous avons aussi le cas de machines de production faible : ce n'est pas de la production 70% du temps, mais critique les 30% restant. On peut mettre un &lt;em&gt;critical_is_warning&lt;/em&gt; pour ne pas être pollué visuellement en rouge pendant une période de faible activité, mais on perd l'avantage de la visibilité en période chaude.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;Personne ne voit où je veux en venir? Et bien oui, ces périodes chaudes justement :)&lt;/p&gt;
&lt;p&gt;Déjà tout comme &lt;em&gt;critical_is_warning&lt;/em&gt; est settable sur un host et héritable implicitement sur les services, cette période chaude est portée par l'hôte, et si l'administrateur le veut, est settable sur le service tout de même. Cette période chaude dé-inhibe le &lt;em&gt;critical_is_warning&lt;/em&gt; : pendant la période chaude, on repasse sur un comportement normal, avec "critical is critical".&lt;/p&gt;
&lt;p&gt;Un exemple? Et bien imaginez une application de paye, c'est critique 1semaine par mois (mais alors HAUTEMENT critique hein), le reste ça mérite un warning (sauf sécurité, mais là on ne met pas &lt;em&gt;critical_is_warning&lt;/em&gt;...). Et hop, encore du rouge qui disparait sur l'interface :p&lt;/p&gt;
&lt;p&gt;La propriété utilisée? &lt;em&gt;hot_period&lt;/em&gt; (sur host et/ou service si vous avez bien suivi).&lt;/p&gt;
&lt;p&gt;Bon reste à coder cela, mais ça ne va pas être très long, mais déjà je vire la dépendance à &lt;em&gt;python-graph-core&lt;/em&gt;... (et hop, retour dans le monde merveilleux des graphs orienté et des parcours en profondeur).&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Mes premiers patchs !</title><link href="/mes-premiers-patchs/" rel="alternate"></link><published>2009-12-10T09:12:51+01:00</published><updated>2009-12-10T09:12:51+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-12-10:/mes-premiers-patchs/</id><summary type="html">&lt;p&gt;Mes premiers patchs !&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Je viens de recevoir mes premiers patchs pour Shinken. Ca fait quelque chose  :D&lt;/p&gt;
&lt;p&gt;C'est &lt;strong&gt;Gerhard Lausser&lt;/strong&gt; de la société &lt;strong&gt;consol.de&lt;/strong&gt; qui me les a proposés. Patchs très bien écrit et permettant d'implémenter la directive &lt;em&gt;cfg_dir&lt;/em&gt; ainsi que les &lt;em&gt;trailing \&lt;/em&gt; (permet d'avoir une ligne de conf sur plusieurs lignes) dans les fichiers de conf. Merci beaucoup à lui !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: Gerhard a été un vrai soutient sur le projet. Si vous êtes ammené à travailler avec lui un jour, considérez vous comme chanceux, c&amp;#39;est un mec extraordinaire. Et je ne dit pas ça souvent :)
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Shinken : des modulateurs de résultats</title><link href="/shinken-des-modulateurs-de-resultats/" rel="alternate"></link><published>2009-12-09T14:57:10+01:00</published><updated>2009-12-09T14:57:10+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-12-09:/shinken-des-modulateurs-de-resultats/</id><summary type="html">&lt;p&gt;Shinken : des modulateurs de résultats&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Je viens de rajouter dans Shinken deux options qui peuvent se révérer intéressantes : &lt;strong&gt;critical_is_warning&lt;/strong&gt; et &lt;strong&gt;inverse_ok_critical&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Les deux options sont utiles pour remplacer des sur-chouches de checks comme &lt;em&gt;negate&lt;/em&gt; ou &lt;em&gt;nocritical.sh&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Le cas des serveurs de Qualifications&lt;/h2&gt;
&lt;p&gt;L'option critical_is_warning est utile pour les serveurs de Qualification. Il est en effet coutume d'avoir du rouge dans l'interface de supervision (et donc CRITICAL) si et seulement si c'est important et que cela demande une intervention immédiate. Mais que faire si le service remonte un état CRITICAL sur une machine de Qualification? Si deux erreurs arrivent sur l'interface, une sur un serveur de PROD, l'autre sur un serveur de Qualif, il va falloir regarder qui traiter en premier, et surtout connaître si les serveurs sont en Prod ou non. Pour les petits environnements point de problème, pour les plus gros, c'est plus difficile...&lt;/p&gt;
&lt;p&gt;C'est pour cette raison qu'il peut être pratique de "déclasser" les résultats d'un service sur un serveur de Qualification de Critical en Warning. Un script comme nocritical.sh (si exit_code==2 -&amp;gt; exit_code=1) peut être utile. &lt;/p&gt;
&lt;p&gt;Le problème est que l'on devait avoir des check_command dédiées pour cela. La moindre modification était double (version avec et sans nocritical.sh).&lt;/p&gt;
&lt;p&gt;Avec &lt;em&gt;critical_is_warning&lt;/em&gt;, l'administrateur va pouvoir tagguer une machine comme étant non critique. Ce paramètre sera hérité par les services (héritage implicite) si le service ne le défini pas déjà. Ainsi, il est possible d'avoir pour la plupart des services ce paramètre d'absent (et donc hérité de l'hôte, 0 par défaut) et certains services critiques partout (comme ceux concernant la sécurité) avec &lt;strong&gt;critical_is_warning&lt;/strong&gt; à 0. Les hôte taggué critical_is_warning à 1 seront automatiquement, et avec les même services que les autres, limités au niveau Warning. sur une configuration comme la mienne, ceci divise tout simplement le nombre de service par deux, ce qui n'est pas négligeable :)&lt;/p&gt;
&lt;h2&gt;Les services clusters passifs&lt;/h2&gt;
&lt;p&gt;Une autre problématique classique concerne les services sur les services passifs de cluster. Ils ont besoin d'être l'inverse de l'actif. Ici il n'est pas possible d'imaginer un attribut sur l'hôte, car il est cluster pour un service, mais pas pour tous les autres de l'hôte (comme le CPU par exemple). Le paramètre &lt;em&gt;inverse_ok_critical&lt;/em&gt; fait donc le même rôle que la célèbre sonde &lt;em&gt;negate &lt;/em&gt;(code retours : 0-&amp;gt;2, 2-&amp;gt;0). Il s'applique sur un service. Il va permettre de ne plus avoir de duplication des check_command, mais ne règle pas le besoin de définition d'un nouveau service. Il n'est pas dit que ce paramètre soit la solution ultime à ce problème des clusters, mais c'est une première réponse à cette problématique.&lt;/p&gt;
&lt;p&gt;Byebye &lt;em&gt;negate&lt;/em&gt;, tu nous auras bien aidé.&lt;/p&gt;
&lt;h2&gt;Ordre d'application&lt;/h2&gt;
&lt;p&gt;Il peut y avoir un service taggué avec ces deux paramètres. Quid alors d'un résultat CRITICAL? Et bien c'est le &lt;em&gt;critical_is_warning&lt;/em&gt; qui l'emporte. Mais il faut être un peu tordu pour mettre les deux à vrai dire...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: et bah dans la vraie vie c&amp;#39;est beaucoup utilisé pour gérer des sondes où on a pas la main, ou alors qu&amp;#39;on a peur de modifier
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Shinken : quel avenir pour Nagios? Shinken?</title><link href="/shinken-quel-avenir-pour-nagios-shinken/" rel="alternate"></link><published>2009-12-09T12:27:38+01:00</published><updated>2009-12-09T12:27:38+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-12-09:/shinken-quel-avenir-pour-nagios-shinken/</id><summary type="html">&lt;p&gt;Shinken : quel avenir pour Nagios? Shinken?&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Certains ont dû le remarquer : j'ai fait une proposition étonnante sur la mailing list de Nagios devel. Je ne propose rien de moins que de mettre Shinken comme branche développement de Nagios4 au lieu de l'ancienne implémentation C. Regardons un peu pourquoi je propose cela.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: vous remarquerez là une méthode bien typique de la philosophie: tu balances une bombe H et tu es sûr de reveiller du monde :)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;L'histoire récente de Nagios&lt;/h2&gt;
&lt;p&gt;Shinken est parti comme un proof of concept que j'utilisais pour démontre que mes idées pour Nagios n'étaient pas complètement absurdes. En effet, les patchs que j'ai proposés ont tous eu du mal à intégrer le core. Pourtant je les ait bien expliqué (enfin je crois), documenté et codé. Il est très simple de faire accepter un patch de correction dans Nagios, mais un patch d'amélioration de fonctionnement est bien plus long a intégrer. Pourquoi? Maitriser le cœur de Nagios n'est pas chose aisée, et je suis loin de connaître toutes ses subtilités malgré le temps que j'ai passé à le lire.&lt;/p&gt;
&lt;p&gt;Jusqu'il y a quelques mois, Ethan était seul à accepter les patchs pour Nagios. Mes patchs ont étés magnifiquement ignorés à cette époque. Puis il y a eu l'histoire Icinga. Là Ethan a eu chaud, mais a bien réagit : il a ouvert l'accès au CVS à d'autres dev. Et hop, pleins de patchs on étés intégrés, dont les miens. Il y a eu aussi une ouverture de nagios ideas et cie. Très bien.&lt;/p&gt;
&lt;p&gt;Et depuis? Bah Ethan se fait toujours aussi absent de la mailing list. Et qu'est ce qu'il nous sort? Nagios XI. C'est quoi cette bête? Et bien tout simplement une jolie couche graphique pour Nagios. Quel est l'intérêt face à des solutions comme Ninja ou même Centreon? Aucun. Un désavantage? C'est payant (quel bonheur de gérer des licences..) et non libre!!&lt;/p&gt;
&lt;h2&gt;Un Nagios a deux vitesses&lt;/h2&gt;
&lt;p&gt;On ne peux pas trop lui jeter la pierre, Ethan doit faire vivre sa société, et s'il décide de faire plus que du conseil/intégration et de vendre ses licenses on n'a pas à s'y opposer après tout, c'est son choix. Mais celui-ci implique que des parties des améliorations de Nagios ne seront plus open source. Il est prévu un module pour la supervision distribué... dans XI, pas dans le core. On voit poindre à l'horizon un Nagios a deux vitesses:
&lt;ul&gt;
    &lt;li&gt;Nagios community : le Nagios open source que l'on a sous la main&lt;/li&gt;
    &lt;li&gt;Nagios Enterprise : le Nagios d'Ethan avec pleins de trucs géniaux, mais en close source et sous licence.&lt;/li&gt;
&lt;/ul&gt;
Bien d'autres font ça, Zenoss par exemple. Personnellement je ne suis pas un grand fan de ce modèle. Je n'aime pas gérer les licences, ça tombe toujours au mauvais moment ces trucs là. Je ne parle même pas de la communauté Nagios qui va fondre comme neige au soleil (vers Zabbix peut être?). Ce n'est pas acceptable.&lt;/p&gt;
&lt;h2&gt;Une stagnation dangereuse pour Nagios et une solution&lt;/h2&gt;
&lt;p&gt;Il faut un Nagios full open source qui évolue plus vite. Zenoss avance vite, Zabbix aussi, Nagios doit faire au moins aussi bien. Bien sûr il ne faut pas casser la compatibilité pour les users, c'est à dire la configuration. Mais le reste? L'administrateur s'en fiche bien que ce soit une implémentation ou une autre le temps que ça marche pareil (voir mieux...).&lt;/p&gt;
&lt;p&gt;Les core dev ne sont pas fans des grands changement (purement technique) au sein du core. Leur réponse à un changement comme avoir un pool de process n'est pas " c'est totalement débile comme idée", mais "ça change trop de choses". On peut alors légitimement se poser la question sur l'avenir de Nagios. Si les propositions inovantes ne sont pas retenues, même si elles sont pertinentes, c'est qu'il y a un problème.&lt;/p&gt;
&lt;p&gt;Quel est-il ce problème justement? A mon avis, il vient de l'implémentation actuelle en C. J'aime le C, mais pas pour tout. Quoique l'on peut penser, un scheduler n'est pas un travail de bas niveau. Alors pourquoi Nagios est en C? Car il a plus de 10ans. A l'époque, les langages de plus haut niveaux n'avaient pas totalement fait leur preuve. De plus, je pense que c'est le langage préféré d'Ethan tout simplement. Cette implémentation est bien faite, mais avec du C point de miracle, c'est long à gérer et les possibilités d'erreurs sont multiples. Penser à un pool de process en C effraie, moi le premier. Mais c'est faisable en C avec pas mal d'efforts et de tests, Apache l'a bien fait. Mais dans les langages de plus haut niveaux, les Poll de threads ou de process sont livrés en standards, déjà débuggé et performants.&lt;/p&gt;
&lt;p&gt;Ce n'est qu'un exemple parmi tant d'autres sur l'intérêt d'utiliser de tel langages. Bien sûr, si vous voulez coder un driver pour un noyau, un tel langage n'a aucun intérêt, ce n'est pas leur cœur de cible. Mais un scheduler qui a besoin d'être très modulaire l'est. Même un scheduler qui lance des sondes à tout bout de champ.&lt;/p&gt;
&lt;p&gt;La solution à la stagnation de Nagios est de passer par un tel langage. Changer quelque chose avec une telle implémentation est faisable, voir même agréable (pas de compilation, langage qui ne pique pas les yeux...). C'est là qu'intervient Shinken. Il était un proof of concept, il devient une proposition pour une nouvelle implémentation. A titre d'exemple, rajouter un attribut a un objet (en gérant l'héritage, la valeur par défaut and co) revient à rajouter une ligne dans le code de Shinken, là où il en demande bien plus dans Nagios. Avoir une idée ne coûtera plus 2h de code, mais quelques secondes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: juste un language qui gère l&amp;#39;héritage, car purée quelle plaie le code de Nagios en C où il faut coder les algos 3 fois...
           par contre je relancerai le projet aujourd&amp;#39;hui, ça serait en rust pas en Python ^^
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;La proposition&lt;/h2&gt;
&lt;p&gt;J'ai proposé dans la mailing list devel de Nagios il y a une semaine que Shinken devienne la branche développement pour Nagios 4. 
Les réponses sont limitées pour l'instant. Ethan ne s'est même pas donné la peine de répondre (lit-il encore cette mailing list?), Andreas va tester un jour. Je vais relancer un peu le sujet, mais j'ai de moins en moins d'espoir d'atteindre mon objectif.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: Andreas a été débarqué du projet Nagios d&amp;#39;une manière bien moche par la suite. Il était vraiment un mec bien pourtant.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Un autre moyen sera de lancer un concurrent à Nagios, de mettre pas mal de coups de pieds au culs, puis de re-proposer l'inclusion. Mais combien de temps auront-nous perdu dans cette histoire?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: et tu paies comment les salaires petit malin? L&amp;#39;auteur de Nagios a eu le même problème. SPOILER: sans gros moyen de lancement, l&amp;#39;open source n&amp;#39;est pas soutenable.
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Shinken : gestion des noms en UTF8</title><link href="/shinken-gestion-des-noms-en-utf8/" rel="alternate"></link><published>2009-12-01T15:41:47+01:00</published><updated>2009-12-01T15:41:47+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-12-01:/shinken-gestion-des-noms-en-utf8/</id><summary type="html">&lt;p&gt;Shinken : gestion des noms en UTF8&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;J'ai voulu m'amuser et mettre des noms en UTF8 pour les hôtes et services. Une fois modifié le &lt;strong&gt;character_set&lt;/strong&gt; des bases merlin et ndo (de base en latin1...) ça a roulé sans problèmes, export en base compris.&lt;/p&gt;
&lt;p&gt;Merci Python  :D&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: oh purée, mais quel naïf. Python 3 arrivera dans quelques années, et là petit, tu vas voir ce que c&amp;#39;est que d&amp;#39;en baver à cause de l&amp;#39;unicode mal géré
           par ce fichu language....
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Shinken : Quoi de neuf docteur?</title><link href="/shinken-quoi-de-neuf-docteur/" rel="alternate"></link><published>2009-12-01T14:45:03+01:00</published><updated>2009-12-01T14:45:03+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-12-01:/shinken-quoi-de-neuf-docteur/</id><summary type="html">&lt;p&gt;Shinken : Quoi de neuf docteur?&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Shinken a bien avancé ces derniers temps. Dans le désordre :
&lt;ul&gt;
    &lt;li&gt;Support de l'export en base &lt;em&gt;NDO &lt;/em&gt;pour &lt;em&gt;MySQL &lt;/em&gt;et &lt;em&gt;Oracle &lt;/em&gt;(merci à &lt;strong&gt;Icinga &lt;/strong&gt;pour leur fichier Oracle.sql d'ailleurs)&lt;em&gt;
&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt;Les daemons sont maintenant réellement des daemons (option &lt;em&gt;-d&lt;/em&gt; et ils ont leur propre fichier de conf pour choisir par exemple le port et l'interface d'écoute à utiliser)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt;Vérifications des checks orphelins (en gros dans un poller depuis bien trop longtemps)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt;Support du fichier ressource pour les macros &lt;em&gt;$USERN$&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt;Tunning mémoire pour les hôtes (utilisation des &lt;em&gt;slots &lt;/em&gt;python comme pour les services)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt;Les plugins des brokers ont pris du galon : désormais ils sont configurable dans le fichier de conf principal avec un &lt;em&gt;define plugin&lt;/em&gt;. Ils sont après rattachés à un satellite (pour l'instant seul les brokers peuvent les utiliser). De cette manière, il est possible d'instancier un même type de plugin plusieurs fois pour un même daemon. L'exemple le plus explicite de cela concerne la création de deux fichier &lt;em&gt;service-perfdata&lt;/em&gt; ou bien l'export dans deux bases ndo.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt;Les plugins des brokers ne peuvent plus faire planter le broker. S'il y a une exception non catchée par eux, le module est désactivé.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La partie NDO n'est pas encore complète, mais le principal est là. Reste à l'optimiser, car pour l'instant la base morfle bien lorsque l'on créé beaucoup de services. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La base Merlin est bien plus performante, mais bon, une fois mes cours de SGBD relus, peut être que mes requêtes NDO seront un peu plus efficaces aussi  :p&lt;/p&gt;
&lt;p&gt;NOTE 2021: spoiler: non en fait le format de base de NDO c'était bien pourri&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="blog"></category></entry><entry><title>Shinken : l'art de l'inspiration</title><link href="/shinken-lart-de-linspiration/" rel="alternate"></link><published>2009-11-14T13:56:57+01:00</published><updated>2009-11-14T13:56:57+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-11-14:/shinken-lart-de-linspiration/</id><summary type="html">&lt;p&gt;Shinken : l'art de l'inspiration&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;h2&gt;Le partage des idées&lt;/h2&gt;
&lt;p&gt;Dans tout ce qui est libre on partage le code bien sûr, mais encore plus important on partage les idées. Deux modifications que j'ai apportées ces derniers temps aux Workers (utilisés par les pollers/reactionners) reflètent cela.&lt;/p&gt;
&lt;p&gt;Le problème des workers est double : avoir LE bon nombre de Worker et que chaque worker soit le plus efficace possible. Le tout bien sûr pour réduire leur charge au maximum.&lt;/p&gt;
&lt;h2&gt;Avoir le bon nombre&lt;/h2&gt;
&lt;p&gt;Le nombre de Worker n'est pas si simple à déterminer. On peut placer un nombre arbitraire (10, 30, 100 ou même 250) mais il ne sera jamais optimal, sauf à faire de nombreuses tentatives. De plus, mesurer leur utilisation n'est pas chose aisée.&lt;/p&gt;
&lt;p&gt;Sur un petit environnement, avoir 4 workers sera plus que suffisant. Sur les très gros, 30 n'est pas du luxe. En effet, si on prends un check simple qui fait toujours la même chose, il est relativement simple de savoir combien il en faut. Mais avec des checks qui mettent un temps aléatoire pour s'éxécuter, ça devient tout de suite plus dur.&lt;/p&gt;
&lt;p&gt;Après une petite réflexion, leur nombre optimal est venu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;temps_moyen_checks*checks à traiter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bon le nombres de checks à traiter est plus que facile à obtenir. Le temps moyen des checks un petit peu moins. Je suis parti d'un temps moyen depuis le lancement du daemon mais le problème est que le nombre de checks à la seconde n'est pas tout le temps le même, la nuit ça peut être plus calme par exemple. J'ai utilisé un calculun calcul similaire au load average Unix (une moyenne mobile exponentielle). Ceci permet de ne pas avoir de lisser un peu le nombres de workers demandés le tout en ayant une réactivité intéressante car j'ai pris un load à une minute.&lt;/p&gt;
&lt;p&gt;Ceci n'aurait pas été possible si les auteurs d'Unix d'auraient pas utilisés ce type de moyenne et que Linux m'ait montré le code (tout simple en plus..). Au passage j'ai cré une Class spéciale pour ce type de calcul afin de pouvoir le réutiliser dans d'autres parties du code.&lt;/p&gt;
&lt;p&gt;Pour l'instant c'est la partie montante du nombre de worker qui est utilisé. Il faut que je m'occupe de la partie descendante (où comment flinguer intelligemment les workers).&lt;/p&gt;
&lt;h2&gt;Attendre le temps qu'il faut&lt;/h2&gt;
&lt;p&gt;Revenons un peu sur les temps des checks. Ils sont aléatoires. Souvenez vous : j'ai changé le code du lancement des checks sous Unix par la variante Windows (avec un joli gain de perfs à la clé et une dépendance de moins). MAIS cette technique repose sur une boucle sur poll (pas de select malheureusement :( ) avec un sleep au milieu. OK, il suffit d'attendre le temps du checks... Ah flûte, on ne sait pas a priori combien de temps il va attendre. Attendre trop et c'est de la latence et un worker qui ne fai rien (donc plus de workers nécessaires). Attendre trop pu, c'est une latence minimale, mais un poll lancé trop souvent et donc de la charge inutile...&lt;/p&gt;
&lt;p&gt;Bref, il faut attendre le BON temps, ou a défaut le bon ordre de grandeur. Là on peut s'inspirer du TCP.&lt;/p&gt;
&lt;p&gt;Oulala, quel est le rapport entre le TCP et une boucle sur le poll? Et bien le slow start de TCP bien sûr! TCP est fait pour tout type de connexions, rapides, lentes, moyennes. Il doit optimiser le débit. Pour cela il augmente dès le début de la connexion le débit envoyé à chaque envoi. Fois 2 à chaque envois. Dès que ça ne passe plus, il a trouvé l'ordre de grandeur, et passe par une augmentation linéaire.&lt;/p&gt;
&lt;p&gt;On va utiliser un système similaire. Nous voulons l'ordre de grandeur (une fois qu'on a trouvé, c'est fini). On va donc partir d'une boucle toute simple :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wait_time = 0.0001
while process.poll() is None:
time.sleep(wait_time)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Et la changer en :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wait_time = 0.0001
while process.poll() is None:
wait_time = min(wait_time*2, 0.1)
time.sleep(wait_time)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En une ligne on a une recherche de l'ordre de grandeur. Simple non? Ici j'ai borné à 0.1s. 10 appels systèmes par secondes sont tout à fait acceptable, 10000 beaucoup moins. On change donc un nombre d'appel en &lt;strong&gt;O(n)&lt;/strong&gt; en &lt;strong&gt;O(log2(n))&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Il est marrant de voir à quel point les algo les plus remarquables sont toujours d'une simplicité étonnante...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: c&amp;#39;est sûrement l&amp;#39;algo de Shinken qui est passé le plus inaperçu, mais qui a sauvé le plus de cycle CPU sur ces
           10 dernières années. Comme quoi ^^
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Shinken : un nouveau logo</title><link href="/shinken-un-nouveau-logo/" rel="alternate"></link><published>2009-11-14T13:04:18+01:00</published><updated>2009-11-14T13:04:18+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-11-14:/shinken-un-nouveau-logo/</id><summary type="html">&lt;p&gt;Shinken : un nouveau logo&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Sur la page de Shinken dans (l'excellent) wiki de nagios-fr (&lt;a href="http://wiki.nagios-fr.org/nagios/shinken/start"&gt;http://wiki.nagios-fr.org/nagios/shinken/start&lt;/a&gt;) j'avais placé un petit texte sur un appel à un nouveau logo :&lt;/p&gt;
&lt;p&gt;L'auteur n'est pas contre une autre mascotte plus originale (moins manchot) le temps qu'elle respecte l'esprit du logiciel&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;En effet, le logo que j'avais assemblé au début du projet était le suivant :&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/44/shinken.png"&gt;&lt;img class="aligncenter size-full wp-image-139" title="shinken" src="/images/44/shinken.png" alt="shinken" width="370" height="370" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ok il est marrant, mais il a un gros soucis d'image : c'est un manchot. C'est àdire que c'est Très connoté Linux. J'aime Linux, je l'utilise tous les jours, et je suis en train de poster depuis a kubuntu chérie, MAIS pour un programme, le choix d'un logo manchot est à double tranchant : ça fait Linux OK, mais ça ne fait QUE Linux. Or Shinken est multiplateformes. Il faut un logo plus neutre, mais toujours avec la symbolique du Shinken qui coupe.&lt;/p&gt;
&lt;p&gt;Romuald FRONTEAU de l'équipe de nagios-fr a donc répondu à mon appel et m'a apporté un nouveau logo que j'aime tout particulièrement :&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/44/logo_shinken.png"&gt;&lt;img class="aligncenter size-full wp-image-348" title="logo_shinken" src="/images/44/logo_shinken.png" alt="logo_shinken" width="425" height="445" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sobre, élégant, efficace. Que demander de plus?&lt;/p&gt;
&lt;p&gt;Je vais garder mon manchot pour le blog et mettre le nouveau sur les sites du projet Shinken.&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Shinken : le choix de la licence AGPL</title><link href="/shinken-le-choix-de-la-licence-agpl/" rel="alternate"></link><published>2009-11-14T12:44:41+01:00</published><updated>2009-11-14T12:44:41+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-11-14:/shinken-le-choix-de-la-licence-agpl/</id><summary type="html">&lt;p&gt;Shinken : le choix de la licence AGPL&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Au début de l'écriture de Shinken s'est vite posé le choix de la licence. Ou plutôt le choix de la licence libre pour être plus exact. La BSD ou tout autre licence qui permet de prendre le code, de le placer dans du code propriétaire sans rien retourner à la communauté n'est pas à mon goût. Certains l'acceptent bien, moi non. Le choix de la GPL est vite arrivé comme un standard.&lt;/p&gt;
&lt;p&gt;Ensuite le problème des services distants se pose avec la GPL, d'où le choix final de l'AGPL qui impose à un fournisseur de service de fournir le code à ses clients s'il utilise le code en AGPL.&lt;/p&gt;
&lt;p&gt;Je viens de lire &lt;a href="http://www.framablog.org/index.php/post/2009/11/13/pourquoi-j-utilise-la-licence-gpl"&gt;http://www.framablog.org/index.php/post/2009/11/13/pourquoi-j-utilise-la-licence-gpl&lt;/a&gt; (traduction de &lt;a href="http://zedshaw.com/blog/2009-07-13.html"&gt;http://zedshaw.com/blog/2009-07-13.html&lt;/a&gt;) et ça me conforte dans ce choix.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: 10ans plus tard je pense que MIT a désormais pris le pas sur la GPL qui est tombée en désuétude, et est même vue comme un risque pour certains, même 
           dans la communauté open source, car c&amp;#39;est GALERE de l&amp;#39;utiliser. MIT aurait été un meilleur choix, mais bon trop tard ^^
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Shinken : un serveur? Inutile, préférez un eeepc...</title><link href="/shinken-un-serveur-inutile-preferez-un-eeepc/" rel="alternate"></link><published>2009-11-10T14:27:04+01:00</published><updated>2009-11-10T14:27:04+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-11-10:/shinken-un-serveur-inutile-preferez-un-eeepc/</id><summary type="html">&lt;p&gt;Shinken : un serveur? Inutile, préférez un eeepc...&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Hier je me suis amusé à voir jusqu'où pouvait aller Shinken en terme de perfs sur un eeepc 701 (le tout premier pas super puissant). Et bien il s'en tire plus qu'honorablement : 10000Checks/5min. C'est largement suffisant pour bon nombre d'installations. Bref, n'achetez plus de serveur pour votre supervision, prenez plutôt des eeepc, c'est beaucoup moins cher...&lt;/p&gt;
&lt;p&gt;Voici les specs du monstre :&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/42/eeepc.png"&gt;&lt;img class="aligncenter size-full wp-image-338" title="eeepc" src="/images/42/eeepc.png" alt="eeepc" width="580" height="348" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Et ce que donne shinken (ici l'ordonnanceur) :&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/42/shinken-eeepc.png"&gt;&lt;img class="aligncenter size-full wp-image-339" title="shinken-eeepc" src="/images/42/shinken-eeepc.png" alt="shinken-eeepc" width="580" height="348" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Je préfère m'abstenir de faire un bench avec Nagios sur cette machine  :mrgreen:&lt;/p&gt;
&lt;p&gt;Et bientôt une grande nouvelle concernant le logo de Shinken  ;-)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: j&amp;#39;ai encore le eeepc, mais les repository de la distribution sont mort depuis longtemps, dommage ^^
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Shinken : 100Kchecks? Ah désolé, il fallait lire 200K</title><link href="/shinken-100kchecks-ah-desole-il-fallait-lire-200k/" rel="alternate"></link><published>2009-11-09T18:36:26+01:00</published><updated>2009-11-09T18:36:26+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-11-09:/shinken-100kchecks-ah-desole-il-fallait-lire-200k/</id><summary type="html">&lt;p&gt;Shinken : 100Kchecks? Ah désolé, il fallait lire 200K&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Et oui désolé, mais le 100K checks/5min n'est plus de mise, désolé. C'était un compte rond, facile à retenir, mais non, il n'est plus.&lt;/p&gt;
&lt;p&gt;Il faut parler de 200K désormais (dans les même conditions donc Xeon 4coeurs)  :p&lt;/p&gt;
&lt;p&gt;La limitation n'est plus du fait du poller désormais, mais bien du scheduler. &lt;/p&gt;
&lt;p&gt;Et tout ça c'est à cause de Windows. En effet, je me suis demandé ce que donnait l'exec que j'utilise sous Windows sur Linux, donc sans passer par pexpect.&lt;/p&gt;
&lt;p&gt;Et bien les perfs sont autrement meilleures sans. Donc bye bye la lib, retour à la mano (10lignes, ça va...). Ceci m'a permis au passage de limiter le nombre de Workers en cours et donc de limiter fortement le load average de la machine, ce qui ne me déplais pas, c'est bien plus contrôlable.&lt;/p&gt;
&lt;p&gt;Avec une telle conf, la machine arrive à avoir 25% de CPU en idle, le scheduler lui est très sollicité (principalement par les échanges Pyro/cPickle). Je me demande à combien on peut monter en mettant un poller et deux schedulers...&lt;/p&gt;
&lt;p&gt;Pour la preuve au fait:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql select count(*),avg(latency) from service;
+----------+-----------------+
| count(*) | avg(latency)    |
+----------+-----------------+
|   200005 | 13.173913548248 |
+----------+-----------------+
1 row in set (0.30 sec)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PS: pas de capture de ninja ça coup-ci, la page part en timeout... trop de services à gérer...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: et oui petit malin, faire tourner le moteur à 200K ça va (même 300K en fait), mais côté interface, c&amp;#39;est pas 10 lignes, plutôt 10ans :p
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Shinken : à oui au fait, c'est multiplate-forme</title><link href="/shinken-a-oui-au-fait-cest-multiplate-forme/" rel="alternate"></link><published>2009-11-05T22:42:09+01:00</published><updated>2009-11-05T22:42:09+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-11-05:/shinken-a-oui-au-fait-cest-multiplate-forme/</id><summary type="html">&lt;p&gt;Shinken : à oui au fait, c'est multiplate-forme&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Shinken est écrit en Python et ses deux dépendances principales sont Pyro et Pygraph qui sont disponibles sur toutes les plate-formes où est Python (c'est à dire beaucoup). J'ai fait un test, et après quelques petits aménagements très légers (10 lignes...) dans la partie lancement des checks et autres, j'ai réussi à lancer Shinken sous Windows :)&lt;/p&gt;
&lt;p&gt;Une petite preuve çi-dessous:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/40/shinken-on-windows.png"&gt;&lt;img class="aligncenter size-full wp-image-322" title="shinken-on-windows" src="/images/40/shinken-on-windows.png" alt="shinken-on-windows" width="580" height="362" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;En fait j'ai dû bypasser la partie lecture du pipe nommé nagios.cmd pour que ca marche, les pipes nommées sous Windows n'étant pas gérés directement (ni simplement...). Mais tout le reste fonctionne comme sur un Linux :)&lt;/p&gt;
&lt;p&gt;Certains vont se demander à quoi ça sert. Alors:
&lt;ul&gt;
    &lt;li&gt;ca coûte rien de le porter pour Windows, alors faut pas se priver&lt;/li&gt;
    &lt;li&gt;Shinken gère les très grands environnements avec le découpage de conf and co (là où Nagios péchait par manque de perf et l'architecture distribuée hautement disponible), mais il ne faut pas oublier que Nagios est aussi exclu des PME à cause de la nécessité d'avoir un Linux (la solution cygwin n'est pas acceptable ni recommandée...). Shinken permet de ne plus avoir ce problème et offre à Nagios un nouveau terrain de jeu, et non des moindres.&lt;/li&gt;
&lt;/ul&gt;
Reste à voir si Ninja est prévu pour Windows, et après on peut penser à un pack Shinken/Ninja/Python/Xampp.&lt;/p&gt;
&lt;p&gt;Questions performances le lancement de process sous Windows coûte cher. Ici la machine est très chargée, mais bon elle avait 1500 checks/5min et surtout c'était une VM (faut pas trop lui en demander). Sous Windows ça sera les petits environnements, donc 1500 checks c'est déjà pas si mal :)&lt;/p&gt;
&lt;p&gt;Dernière info : l'installation de python et des dépendances de shinken sous un Windows est une véritable partie de plaisir, un grand bravo aux auteurs de Python et leur processus d'installation sous Windows, car ça marche très bien, c'est un vrai next/next/next :)&lt;/p&gt;
&lt;p&gt;Aller vraiment la dernière : là c'est un XP, mais ça roule de la même manière sur un Seven  :p&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: ça coute rien de porter: soit. Mais grand malin tu as pris en compte le prix de maintenance? petit naïf va ^^
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Shinken : les realms sont là</title><link href="/shinken-les-realms-sont-la/" rel="alternate"></link><published>2009-11-03T18:37:23+01:00</published><updated>2009-11-03T18:37:23+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-11-03:/shinken-les-realms-sont-la/</id><summary type="html">&lt;p&gt;Shinken : les realms sont là&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ca y est, j'ai implémenté les Realms et tout ce que ça implique sur le dispatching des configurations et la gestion des spares. Une configuration l'utilisant va devenir par exemple :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;define realm {
   realm_name       All
   realm_members    Europe,US,Asia
   default          1    ;Est le realm par défaut. Doit être le seul dans ce cas...
}
define realm{
   realm_name       Europe
   realm_members    Paris   ;Le realm Paris est contenu dans Europe
}

define reactionner{
       name reactionner-All
       address  localhost
       port 7769
       spare    0
       realm    All
       }

define poller{
       name     poller-All
       address  localhost
       port     7771
       spare    0
       realm    All
       manage_sub_realms  1
}

define broker{
       name broker-All
       address  localhost
       port 7772
       spare    0
       realm    All
       }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ici c'est un cas très simple, sans spare (et avec des realms un peu vide...) mais qui montre un peu la conf que cela va donner.&lt;/p&gt;
&lt;p&gt;Il ne me manque plus qu'à gérer le cas où l'administrateur n'en a défini aucun (ce qui sera pour les petites et moyennes configurations). &lt;/p&gt;
&lt;p&gt;Dans ce cas je vais en créer un à la volée et mettre tout le monde dedans tout simplement :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: créer à la volée de tel objets: idée bien claquée, qu&amp;#39;il ne faut SURTOUT pas faire ^^
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Shinken : Pool -&gt; Realm</title><link href="/shinken-pool-realm/" rel="alternate"></link><published>2009-11-01T10:26:06+01:00</published><updated>2009-11-01T10:26:06+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-11-01:/shinken-pool-realm/</id><summary type="html">&lt;p&gt;Shinken : Pool -&amp;gt; Realm&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Bonjour,&lt;/p&gt;
&lt;p&gt;Petit changement cosmétique pour les pools. Ils ne s'apellent plus comme ça, je préfère utilisé realms à la place. Il y aura beaucoup moins de confusion avec les pools. Si certains ne savent pas ce que signifie ce terme, il y a wikipedia &lt;a href="http://en.wikipedia.org/wiki/Realm" target="_blank"&gt; http://en.wikipedia.org/wiki/Realm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bon c'est parti pour du query remplace maintenant...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: merci mongo, serveur privé de World of warcraft pour le terme realm, qui a donné royaume :)
           ça me fait penser que j&amp;#39;avais fait un patch pour mongo à une époque... ^^
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Shinken : la notion de pool, ou comment pousser encore plus loin l'architecture</title><link href="/shinken-la-notion-de-pool-ou-comment-pousser-encore-plus-loin-larchitecture/" rel="alternate"></link><published>2009-10-29T16:29:01+01:00</published><updated>2009-10-29T16:29:01+01:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-10-29:/shinken-la-notion-de-pool-ou-comment-pousser-encore-plus-loin-larchitecture/</id><summary type="html">&lt;p&gt;Shinken : la notion de pool, ou comment pousser encore plus loin l'architecture&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: grand merci à la voiture de ma femme qui a eu besoin d&amp;#39;aller se faire réparer à l&amp;#39;époque, le temps d&amp;#39;attente
           pour la réparation a été utile, avec un petit café et un cachier, j&amp;#39;ai mis sur papier ce que vous voyez ci-dessous
           et qui restera LE gros ajout de Shinken jusqu&amp;#39;à encore aujourd&amp;#39;hui, les royaumes (appelé Pool au début)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;L'illumination du jour&lt;/h2&gt;
&lt;p&gt;Bonjour,&lt;/p&gt;
&lt;p&gt;Hier j'ai eu tout le temps de pousser l'architecture de Shinken plus loin que je ne l'avais fait jusqu'alors. En effet, elle permet dans sa forme actuelle d'avoir un point unique d'administration de plusieurs ordonnanceurs, pollers, reactionners et brokers. Les hôtes sont dispatchés sur les ordonnanceurs, les services suivent, les satellites (poller/reactionner/broker) tapent sur tous les ordonnanceurs. C'est implémenté, et le pire, c'est que ça fonctionne. Tout le monde est content.&lt;/p&gt;
&lt;p&gt;Tout le monde? Non. Un petit village d'irréductibles gaul... oups, je m'égare...&lt;/p&gt;
&lt;p&gt;Tout le monde? Non. Imaginons un peu qu'un administrateur ait une infrastructure distribuée sur plusieurs continents (un quelconque rapport avec l'infra de l'auteur est fort plausible...). Avec l'archi de Shinken actuellement, si l'administrateur a mis deux ordonnanceur : un a Bordeaux et un à Shangaï (toujours par le plus grand des hasard hein...) et de même un poller sur Bordeaux, et un sur Shangaï, les pollers tapent sur les deux ordonnanceurs, et pour ceux qui n'ont pas le grand bonheur d'avoir un site à shangaï, autant vous dire que les lignes internet sont plutôt... bon disons que c'est aléatoire pour rester poli. De plus, un hôte va se voir affecté sur un ordonnanceur ou un autre sans pouvoir influer dessus.&lt;/p&gt;
&lt;p&gt;Bref, Shinken, dans son état actuel, est pratique pour avoir de la haute dispo, répartition de charge et performance mais pour un site unique. Et là vous me voyez venir à des kilomètres : la gestion des sites.&lt;/p&gt;
&lt;h2&gt;Un pool, des pools&lt;/h2&gt;
&lt;p&gt;Alors on va utiliser un nom plus général qu'un site (après tout ça peut être une séparation plus organisationnelle que géographique) : un pool. (A ne pas confondre avec les pollers donc).&lt;/p&gt;
&lt;p&gt;Un pool est un groupe de ressources indissociables auquel vont pouvoir être rattachés des hôtes ou des groupes d'hôtes. Une telle association sera unique, un hôte ne pourra se trouver que dans un pool donné et il faudra que ses parents soient dans le même pool (sinon le découpage de conf et le dispatchign ne sera pas content). Si ces derniers n'ont pas de pool désignés, il hériterons de celui-là.&lt;/p&gt;
&lt;p&gt;Un pool est donc un groupe de schedulers, pollers, reactionners, brokers (les deux derniers sont optionnels). Dans un pool, les pool vont se connecter à tous les schedulers du pool.&lt;/p&gt;
&lt;p&gt;Un pool peut contenir un autre pool. Ceci ne change rien pour les ordonnanceurs/pollers, ceux-ci ne s'adressant qu'aux ordonnanceurs du même pool. Les hôte d'un pool ne seront dispatchés que sur les schedulers du pool, pas de ses fils. Là où une hiérarchie de pool devient utile concerne les reactionners/brokers : ils sont associés à un pool, mais si ce dernier contient d'autres pools (qui eux même en contiennent d'autres etc etc) et bien les reactionners/broker vont chercher les infos sur tous les ordonnanceurs de la hiérarchie de pool.&lt;/p&gt;
&lt;p&gt;En fait, cette notion de satallites qui peuvent atteindre les sous-pools devrait être paramétrable, genre une option acces_inner_pool avec comme valeur par défaut les pollers a 0, et les reactioners/broker 1. Si après l'administrateur veux le changer pour décloisonner/cloisonner, libre à lui.&lt;/p&gt;
&lt;p&gt;Il faut bien retenir une chose : un seul Arbiter (et son spare) et une seule conf, quelque soit le nombre de pools que vous avez. Ah une autre chose : pour l'instant rien n'est implémenté! Mais bon ça ne devrait pas être trop méchant je pense.&lt;/p&gt;
&lt;h2&gt;Au secours, je comprends rien!&lt;/h2&gt;
&lt;p&gt;Pas clair? Oui je m'en doute un peu, avec mes pools, sous-pool, pollers et schedulers.&lt;/p&gt;
&lt;p&gt;En résumé, vous mettez un hôte ou un groupe d'hôte dans un pool. Celui-ci est un ensemble de ressources pour superviser vos hôtes et les services qui y sont raccrochés. Vous pouvez enlever ou rajouter des ressources au pool sans avoir à changer la conf des 30K hôtes que vous avez patiemment configuré car vous avec rajouté un ordonnanceur ou un poller de plus dans le lot.&lt;/p&gt;
&lt;p&gt;Bref, le pool est une facilité pour gérer ses ressources. Si vous n'avez qu'un petit site gérable par un ordonnanceur/poller/reactionner/broker, pas la peine de vous embêter avec un pool, par défaut shinken en créera un pour vous à la volée et vous n'en entendrez même pas parler :)&lt;/p&gt;
&lt;h2&gt;Dessine moi un diagramme&lt;/h2&gt;
&lt;p&gt;Des diagrammes, c'est encore mieux que toutes ces explications :)&lt;/p&gt;
&lt;p&gt;Imaginons que l'on a deux environnements distribués un peu partout dans le monde. Dans un cas, on souhaite un cloisonnement total des continents. Dans un autre, on accepte que les réactionners et brokers soient communs à tous les ordonnanceurs du monde (oui, rien que ça :) ).&lt;/p&gt;
&lt;h3&gt;Les diagrammes&lt;/h3&gt;
&lt;p&gt;Voici le cas isolé :&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/37/shinken-architecture-isolated-pools.png"&gt;&lt;img class="aligncenter size-full wp-image-297" title="shinken-architecture-isolated-pools" src="/images/37/shinken-architecture-isolated-pools.png" alt="shinken-architecture-isolated-pools" width="580" height="426" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Et le cas plus communs avec les réactionner/broker de communs :&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/37/shinken-architecture-global-pool.png"&gt;&lt;img class="aligncenter size-full wp-image-298" title="shinken-architecture-global-pool" src="/images/37/shinken-architecture-global-pool.png" alt="shinken-architecture-global-pool" width="580" height="439" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comme vous pouvez le voir, les éléments sont raccrochés à un seul pool. suivant l'héritage qu'on leur a donné, ils utilisent les ordonnanceurs des sous-pool ou non.&lt;/p&gt;
&lt;h3&gt;Et dans la conf, ça donne quoi?&lt;/h3&gt;
&lt;p&gt;Voici ce que ça devrait donner pour le second cas :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;define pool {
   pool_name   All
   pools       Europe, US, Asia
}
define pool{
   pool_name  Europe
   pools      Paris
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(je ne sais pas encore si c'est bien utile de forcer la définition des autres pools même s'ils n'ont qu'un nom...).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;define scheduler{
  scheduler_name  sched Paris
  pool            Paris
}
define reactionner{
  reactionner_name   reactionner-maitre
  pool               All
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Et dans les hôtes :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;define host{
  host_name  serveur-paris
  pool       Paris
  [...]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pour ces derniers ce paramètre sera géré par l'héritage comme toutes les propriétés des hôtes.&lt;/p&gt;
&lt;h2&gt;Ce qui est susceptible de changer&lt;/h2&gt;
&lt;p&gt;Il me reste quelques petits points à voir : doit-on faire le lien entre les schedulers/pollers/reactionners/broker et les pools au niveaux du define des pools, ou bien comme ci-dessus au niveau des éléments? Les deux? Mais quoi faire en cas d'incompatibilité des deux types de configuration? Je prends tout commentaires :)&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Shinken : dispatch des commandes externes</title><link href="/shinken-dispatch-des-commandes-externes/" rel="alternate"></link><published>2009-10-24T15:45:16+02:00</published><updated>2009-10-24T15:45:16+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-10-24:/shinken-dispatch-des-commandes-externes/</id><summary type="html">&lt;p&gt;Shinken : dispatch des commandes externes&lt;/p&gt;</summary><content type="html">&lt;p&gt;&amp;lt;--! relu --&amp;gt;&lt;/p&gt;
&lt;h2&gt;Des commandes importantes&lt;/h2&gt;
&lt;p&gt;Nous avons déjà vu le dispatch des configurations vers les schedulers et les satellites, regardons désormais comment se passe l'envoi de commandes externes par le client. Dans la philosophie Shinken, celui-ci n'a besoin d'envoyer ses ordres que d'un seul endroit, à côté de l'Arbiter.&lt;/p&gt;
&lt;p&gt;Il faut séparer les commandes en deux catégories :
&lt;ul&gt;
    &lt;li&gt;les commandes globales à tous les ordonnanceurs;&lt;/li&gt;
    &lt;li&gt;les commandes spécifiques à un élément (host/service/contact).&lt;/li&gt;
&lt;/ul&gt;
En fait une partie des deuxièmes commandes est en fait globale : les contacts sont partout et les commandes les concernant sont envoyées partout.&lt;/p&gt;
&lt;h2&gt;Comment shinken les dispatch&lt;/h2&gt;
&lt;p&gt;En fait ce n'est pas sorcier. Pour chaque type de commande Shinken sait s'il elles sont globales ou non. Pour les globales, il ne se pose pas de question, il envoie à tout le monde et voila.&lt;/p&gt;
&lt;p&gt;Pour les spécifiques, il faut qu'il trouve quel est l'ordonnanceur en question. Il cherche pour cela dans les N configurations l'élément impacté (hôte ou service). Une fois trouvé, il sait à qui envoyer l'ordre et il le fait.&lt;/p&gt;
&lt;p&gt;Une fois les ordres reçus, les ordonnanceurs n'ont plus qu'à les appliquer.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;? Vous voulez un diagramme? Bon ok, voici un exemple avec une commande spécifique et une globale.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/36/shinken-external-commands.png"&gt;&lt;img class="aligncenter size-full wp-image-291" title="shinken-external-commands" src="/images/36/shinken-external-commands.png" alt="shinken-external-commands" width="580" height="315" /&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Shinken : le dispatching des configurations et les spares</title><link href="/shinken-le-dispatching-des-configurations-et-les-spares/" rel="alternate"></link><published>2009-10-23T10:19:06+02:00</published><updated>2009-10-23T10:19:06+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-10-23:/shinken-le-dispatching-des-configurations-et-les-spares/</id><summary type="html">&lt;p&gt;Shinken : le dispatching des configurations et les spares&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;h2&gt;Rappel sur les daemons et les configurations&lt;/h2&gt;
&lt;p&gt;J'ai déjà évoqué le fait que Shinken utilise plusieurs daemons qui ont chacun leur rôle. Le maître de tous est l'Arbiter qui lit la conf, la découpe et l'envoie vers ses petits camarades. Bien sûr, les satellites comme les pollers ont besoin de connaître l'adresse des ordonnanceurs. Ces derniers ont la responsabilité de l'ordonnancement de la supervision. La perte d'un d'entre eux peu être embêtante : une partie des hôtes ne seront plus surveillés!&lt;/p&gt;
&lt;p&gt;C'est pourquoi Shinken utilise un système de spare : des daemons seront lancés mais non actifs. Ils ne se verront affecter une configuration et donc une responsabilité que si un daemon maître meurt. Typiquement un placement de ces spares sur la machine de l'Arbiter peut être utile, il y a peu de chance qu'elle perde le lien avec elle même.&lt;/p&gt;
&lt;p&gt;Regardons un peu le dispatching des configurations vers les ordonnanceurs et ce qui se passe lorsqu'un ordonnanceur n'est plus disponible&lt;/p&gt;
&lt;h2&gt;Dispatch des configurations&lt;/h2&gt;
&lt;p&gt;L'arbiter lit la configuration globale de l'administrateur, il la coupe en morceaux (autant que l'ordonnanceurs NON spare). Le dispatcheur (une Classe dans l'Arbiter), l'envoi vers les ordonnanceurs. Puis il créé une configuration particulière avec juste les adressess des ordonnanceurs à destinations des satellites comme les pollers ou le broker. Et hop, tout le monde est content.&lt;/p&gt;
&lt;p&gt;Ca se résume en un diagramme:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/35/shinken-conf-dispatching.png"&gt;&lt;img class="aligncenter size-full wp-image-281" title="shinken-conf-dispatching" src="/images/35/shinken-conf-dispatching.png" alt="shinken-conf-dispatching" width="580" height="410" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Lorsqu'un ordonnanceur tombe&lt;/h2&gt;
&lt;p&gt;Personne n'est parfait, les OS non plus. Une machine ça peut tomber, un réseau aussi. Bref, les daemons ne seront pas toujours joignables. C'est pour cela qu'on peut définir des spare qui vont reprendre le flambeau des vérifications. Pour l'instant, seul les ordonnanceurs peuvent avoir un spare, mais ca ne devrait pas tarder pour les satellites car ce n'est pas bien différent.&lt;/p&gt;
&lt;p&gt;L'Arbiter vérifie régulièrement que tout le monde est vivant. Si un ordonnanceur est déclaré mort alors qu'il avait la responsabilité d'une configuration, il envoie la configuration vers un spare disponible.Il met à jour les informations des satellites pour qu'ils prennent en compte cette nouvelle disposition.&lt;/p&gt;
&lt;p&gt;Un cas intéressant arrive lorsque l'ordonnanceur n'était pas disponible à cause d'une perte réseau (vous savez, cette grande variable aléatoire  :mrgreen: ). Il était encore vivant mais on ne le voyait plus c'est tout. Si la conf a été envoyé à un spare, on a un problème : deux ordonnanceurs avec la même conf. Pour l'instant il est demandé à l'ordonnanceur maître de gentiment arrêter son ordonnancement et d'attendre une nouvelle conf. Dans l'avenir, une solution plus élégante sera de demander plutôt au spare de lâcher la main, car il y a de fortes chances que ce dernier aient moins d'informations que le premier.&lt;/p&gt;
&lt;p&gt;Ca se résume en un diagramme :&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/35/shinken-scheduler-lost.png"&gt;&lt;img class="aligncenter size-full wp-image-282" title="shinken-scheduler-lost" src="/images/35/shinken-scheduler-lost.png" alt="shinken-scheduler-lost" width="580" height="410" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;En bref&lt;/h2&gt;
&lt;p&gt;Imaginez un même système en C (juste le dispatching et la gestion des spares). &lt;/p&gt;
&lt;p&gt;... Ca y est vous le voyez?&lt;/p&gt;
&lt;p&gt;Compter le nombre de lignes que ca demande. ... &lt;/p&gt;
&lt;p&gt;Combien alors?&lt;/p&gt;
&lt;p&gt;Tout ça? Maintenant regardons combien ce prends dans Shinken : dispatcher 200 lignes, satellitelink 100 lignes (et ca va fortement diminuer), satellite pour la gestion de la conf : 50 lignes. &lt;/p&gt;
&lt;p&gt;Ah oui, le tout avec 30% de commentaires  :-)&lt;/p&gt;
&lt;p&gt;Le Python c'est bon.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: bon on doit être à 10x plus dans le code actuel, facilement. Mais d&amp;#39;expérience c&amp;#39;est classqiue: 10% du temps pour coder un truc, 90% restant pour le stabiliser et
           gérer TOUS les cas à la con et faire que les utilisateurs ne soient pas perdu

NOTE 2021: 30% de commentaires, j&amp;#39;en suis encore à ce ratio après 20ans de code, juste que mes commentaires sont différents, mais j&amp;#39;en ferai un article
           (qui énervera Ben, coucou ben ^^ )
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Patch Nagios : SSL pour Ndo</title><link href="/patch-nagios-ssl-pour-ndo/" rel="alternate"></link><published>2009-10-16T11:13:33+02:00</published><updated>2009-10-16T11:13:33+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-10-16:/patch-nagios-ssl-pour-ndo/</id><summary type="html">&lt;p&gt;Patch Nagios : SSL pour Ndo&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;J'avais travaillé sur 3 patchs pour Nagios et je n'en ais évoqué ici que 2 pour la bonne raison que c'étaient les seuls à être intégrés.&lt;/p&gt;
&lt;p&gt;Et bien en fait c'est inexact : le troisième l'a été aussi :)&lt;/p&gt;
&lt;p&gt;Ce patch permet d'établir une connexion chiffrée entre le module ndomod et ndo2db.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: ndo: envoyer les infos de Nagios en base de données. Une hérésie totale, même en 2009 :)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En effet, avant tous les paquets étaient envoyés en clair sur le réseau. 
Ceci a beau être de la supervision, il y a tout de même le nom de toute nos machines, c'est assez embêtant. &lt;/p&gt;
&lt;p&gt;Avec le patch que j'ai proposé (commit sur &lt;a href="http://nagios.git.sourceforge.net/git/gitweb.cgi?p=nagios/ndoutils;a=commitdiff;h=9d9dcccab9690c896a7f1c3d2015064430c5157a"&gt;http://nagios.git.sourceforge.net/git/gitweb.cgi?p=nagios/ndoutils;a=commitdiff;h=9d9dcccab9690c896a7f1c3d2015064430c5157a&lt;/a&gt; par Hendrik Baecker) il y a une option de plus sur ndomod.cfg et ndo2db.cfg : &lt;strong&gt;use_ssl&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Par défaut elle est à &lt;strong&gt;0&lt;/strong&gt; pour un soucis de compatibilité. &lt;/p&gt;
&lt;p&gt;Une fois passée à &lt;strong&gt;1&lt;/strong&gt;, la communication sur socket (uniquement celle en réseau, pas cette sur le socket unix) est chiffrée.&lt;/p&gt;
&lt;p&gt;Je n'ai pas réinventé la roue, j'ai emprunté le code à &lt;strong&gt;NRPE&lt;/strong&gt; tout simplement. Je l'ai juste un peu adapté et mis au bon endroit.&lt;/p&gt;
&lt;p&gt;Et voila, je suis dans le fichier THANKS de ndoutils maintenant :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: j&amp;#39;avais bien aimé ce patch à l&amp;#39;époque. Jusque qu&amp;#39;en y repensant, je crois que c&amp;#39;était un chiffrement très faible, mais je n&amp;#39;ai jamais vérifié depuis.
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>100K checks/5minutes</title><link href="/100k-checks5minutes/" rel="alternate"></link><published>2009-10-13T15:05:53+02:00</published><updated>2009-10-13T15:05:53+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-10-13:/100k-checks5minutes/</id><summary type="html">&lt;p&gt;100K checks/5minutes&lt;/p&gt;</summary><content type="html">&lt;p&gt;Je viens de faire un test sur une "petite" machine : un Xeon 5140 (4coeurs, 3.1Ghz). J'ai réussi à dépasser la symbolique limite des 100000 (oui oui, 100K) checks en 5 minutes. J'ai un peu triché pour cela : j'ai exporté le broker et la base MySQL sur un autre serveur. J'arrive à un trafic à 50Ko/s entre le scheduler et le broker, ce qui est raisonnable vu le nombre de checks ;)&lt;/p&gt;
&lt;p&gt;Petite preuve avec un ninja situé sur la machine avec la base :&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gabes.fr/jean/wp-content/uploads/2009/10/100k.jpg"&gt;&lt;img class="aligncenter size-full wp-image-269" title="100k" src="http://www.gabes.fr/jean/wp-content/uploads/2009/10/100k.jpg" alt="100k" width="580" height="389" /&gt;&lt;/a&gt;Pour ceux qui sont curieux : oui, Ninja rame un peu avec autant de services à gérer, mais cela reste acceptable ;)&lt;/p&gt;
&lt;p&gt;Cette configuration sera de plus la plus répandue sur les gros environnements avec plusieurs schedulers. Pour rappel, sur cette même machine je plafonne à 10K checks avec un Nagios non tuné, 30K en le tunant un max.&lt;/p&gt;
&lt;p&gt;Moi je ne dirais qu'une chose : merci Python, mettre en place un pool de process est d'une simplicité monstrueuse. Maintenant, reste à faire de même avec Nagios (et de convaincre ses auteurs...). Qui sait, la barre des 200K sera peu être atteinte un jour?&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Shinken : Les grandes lignes</title><link href="/shinken-les-grandes-lignes/" rel="alternate"></link><published>2009-10-06T07:50:30+02:00</published><updated>2009-10-06T07:50:30+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-10-06:/shinken-les-grandes-lignes/</id><summary type="html">&lt;p&gt;Shinken : Les grandes lignes&lt;/p&gt;</summary><content type="html">&lt;!-- RELU --&gt;

&lt;p&gt;Il y a quelques temps j'ai présenté dans les grandes lignes mon proof of concept Shinken, le Nagios en Python. Et bien il a plutôt bien avancé depuis. En voici un état des lieux et une idée de là où il va.&lt;/p&gt;
&lt;h2&gt;Architecture générale&lt;/h2&gt;
&lt;p&gt;Shinken est pensé pour les environnements distribués. Il est bien sûr possible de faire tourner tous ses composants sur une seule et même machines. Les composants justement, parlons en.&lt;/p&gt;
&lt;h3&gt;Architecture de Nagios&lt;/h3&gt;
&lt;p&gt;Nagios est (quasiment) monolithique. Il lit la conf, la traite, ordonnance les checks, les lance ainsi que les actions qui en résultent (les notifications et les event handlers). Il exporte également des informations vers un daemon externe pour mise en base de données.&lt;/p&gt;
&lt;p&gt;Lorsque l'on a un petit environnement, tout marche bien, c'est pratique et presque rapide. Le problème se pose avec les grands environnements : Nagios est capable de gérer facilement jusqu'à 10000checks/5minutes sur un serveur moyen de gamme. Avec du tuning on peu arriver à 30000, mais gère plus, même en rajoutant pleins de CPU sur le serveur. La mise en place des environnements distribués n'est pas triviale (la preuve, elle demande un chapitre à part entière dans mon livre :) ). La tâche est encore plus hardue pour les environnements distribué ET hautement disponibles. Cette dernière exigence est très complexe à gérer si on ne veux pas perdre trop en performances, voir pas faisable du tout pour les très gros environnements sauf à mettre une armée de serveurs.&lt;/p&gt;
&lt;p&gt;C'est là que vient Shinken : mettre en place un environnement distribué hautement disponible facilement. Le côté facile doit venir aussi de la gestion de conf. Nagios a une gestion de la configuration impressionnante, mais qui nécessite un gros travail manuel lorsqu'il est question d'environnements distribués.&lt;/p&gt;
&lt;p&gt;De même pour donner des ordres à Nagios, il faut passer par le pipe nommé nagios.cmd situé sur le même serveur. Pour un serveur ça va, mais pour une dizaine, se souvenir sur quel serveur Nagios se trouve l'hôte que vous voulez rescheduler devient un peu plus complèxe...&lt;/p&gt;
&lt;p&gt;Pour résumer la situation, l'architecture de Nagios est la suivante :&lt;/p&gt;
&lt;p&gt;&lt;img class="aligncenter size-full wp-image-249" title="nagios-architecture" src="/images/32/nagios-architecture.png" alt="nagios-architecture" width="580" height="410" /&gt;&lt;/p&gt;
&lt;h3&gt;Architecture de Shinken&lt;/h3&gt;
&lt;p&gt;Shinken propose une solution à ces problèmes : le découplage des rôles de Nagios. Ces rôles sont éparpillés sur différents processus. Voici le schémas global, le rôle de chaque élément sera précisé plus bas:&lt;/p&gt;
&lt;p&gt;&lt;img class="aligncenter size-full wp-image-256" title="shinken-architecture" src="/images/32/shinken-architecture.png" alt="shinken-architecture" width="580" height="352" /&gt;
&lt;ul&gt;
    &lt;li&gt;Arbiter : lit la configuration, la découpe en N partie et l'envoi vers les autres processus. Il lit l'unique fichier nagios.cmd de l'architecture, et transmet les ordres à qui il faut. Il est également le garant de la haute disponibilité et la répartition de charge.&lt;/li&gt;
    &lt;li&gt;Schedulers (nom de processus Shinken) : il lit la conf que lui envoi Arbiter. Il peux y avoir N schedulers, chacun avec ses propres éléments (hôtes/services). Il est en charge d'ordonnancer les checks, de les proposer aux autres éléments, récupère le retour des checks, et propose des notifications/event handlers si besoin qui seront lancé par des éléments externes.&lt;/li&gt;
    &lt;li&gt;Pollers : Il peux y en avoir autant qu'on veut. Ils récupèrent les checks auprès des schedulers, les lance et renvoi le retour aux scheduler en question. Il n'y a pas intelligence ici. Ils récupèrent des checks, les lancent, renvoient le résultat. Point barre.&lt;/li&gt;
    &lt;li&gt;Actionner : De préférence il n'y en a qu'un (et un spare). Il est en charge de lancer les notifications et les event handlers. Il fonctionne de la même manière que les pollers, mais il est à part car on préfère en avoir un et un seul qui fait les notifications (pour les problèmes d'acès aux serveur SMTP ou les flux RSS par exemple).&lt;/li&gt;
    &lt;li&gt;Broker : Unique avec un spare, Les schedulers exportent des informations dans des 'broks', des morceaux d'informations. Ils sont récupérés par le Broker qui en fait ce qu'il veut après, suivant les plugins qu'il a. Chaque plugin traite l'information comme il le veut. Les plugins actuellement développés sont l'export du fichier service-perfdata et l'export dans la base merlin. La base ndo ne devrait pas tarder, mais ca sera plus long que pour celle de merlin, car elle est vraiment mal fichue!&lt;/li&gt;
    &lt;li&gt;Bah c'est tout. C'est déjà pas mal non? :)&lt;/li&gt;
&lt;/ul&gt;
Les éléments de charge sont éclatés d'où le load balancing. L'arbiter est le garant de la haute dispo, il réparti les conf aux vivants, et envoi les conf des éléments morts aux spare si un membre actif vient à mourrir (bah ca peut arriver hein, personne n'est parfait). L'administrateur n'a pas à se soucier de quel scheduler va gérer son élément (hôte), l'arbiter va découper la conf pour lui de manière automatique, et en faire des paquets les plus équilibrés possible en terme de charge. Shinken tiens son nom de là d'ailleurs :)&lt;/p&gt;
&lt;h2&gt;La configuration&lt;/h2&gt;
&lt;p&gt;Qui dit nouveaux éléments dit nouvelle configuration. L'arbiter mis à part, chaque élément a un élément de configuration qui lui est dédié. Elle est de la forme (par exemple ici pour les scheduler):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;define scheduler{
   name     scheduler-main
   address      192.168.0.1
   port      7768
   spare        0
}

define poller{
   name      poller-main
   schedulers     scheduler-main, scheduler-spare
   address      192.168.0.1
   port      7771
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ceci doit être donné à l'arbiter dans le fichier nagios.cfg, comme n'importe quel autre configuration d'éléments dans Nagios. Ceci va permettre à l'Arbiter d'envoyer les configuration et de gérer les liens avec les schedulers, pollers and co. Je n'ai pas encore prévu de configuration locale au poller and co. Mais à part le port d'ouverture, il n'y aura pas gand chose à configurer.&lt;/p&gt;
&lt;p&gt;Je prévois de faire en sorte de créer automatiquement un élément en local s'il n'est pas défini dans la configuration, genre dans le cas de l'import d'une configuration existante sans avoir à la modifier.&lt;/p&gt;
&lt;h2&gt;Les performances&lt;/h2&gt;
&lt;p&gt;J'en vois déja arriver avec leur grands sabots : "c'est en python donc c'est tellement lent qu'on ne va pas pouvoir tester sur de vrais environnements". Ca aurait été sacrément inutile si c'était le cas. Je n'aime pas trop perdre mon temps. Allons directement à la mesure dans de vraies conditions : serveur Xeon bi-coeurs 3ghz. J'ai utilisé une configuration générée tout comme dans le chapitre 9 de mon livre (quoi,vous ne l'avez pas encore lu?). La latence nous permet de savoir si le programme a assez de ressources ou non.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nagios dans sa configuration standard a stagnée a 9500 checks/5min, avec du tunning poussé, 25000. Je n'ai pas encore fait les tests avec export en base de données avec ndo2db;&lt;/li&gt;
&lt;li&gt;Shinken arrive à 50000 avant que j'ai eu à faire du tunning de code...Et l'export en base de données fait en prime, le tout sur la même machine bien sûr.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il n'y a pas de secret ici : La charge de Nagios vient du lancement de nouveaux process Nagios qui doivent lancer les plugins et le fait de "reaper" les résultats dans des fichiers plats. Shinken utilise un pool de process (les pollers ont un pool de workers) donc pas de surcharge ici, et les pollers envoient directement les résultats des checks en mémoire (technique d'objets distribués de type Corba, mais en autrement plus simple à utiliser). Pas de fichiers à parser, beaucoup moins de charge. "Et voila".&lt;/p&gt;
&lt;p&gt;Par contre ce n'est pas parfait : le lancement de l'Arbiter est légèrement plus lent que Nagios pour la lecture de la configuration, mais rien de rédhibitoire. Je vois revenir les gros sabots pour la consommation mémoire : Oui, ceci consomme plus de RAM que Nagios. Nagios est vraiment bien optimisé sur ce point, Shinken est "seulement" 3 fois plus consommateur, genre 250Mo pour les 50000 checks. C'est tout à fait acceptable à mon goût.&lt;/p&gt;
&lt;p&gt;Bref, c'est testable même avec des grands environnements. Et ca veut dire que l'on peut encore améliorer Nagios. Bon reste à faire la partie Worker en C. Je l'aurais bien prise chez Apache, mais question de licence, ça le fait pas je pense. Puis le code est .. complexe pour juste une gestion de worker, mais bon c'est le C hein...&lt;/p&gt;
&lt;h2&gt;Ce qui est déjà fait&lt;/h2&gt;
&lt;p&gt;Les fonctionnalités principales de Nagios sont déjà dans Shinken:
&lt;ul&gt;
    &lt;li&gt;ordonnancement de Nagios (HARD, SOFT, etc)&lt;/li&gt;
    &lt;li&gt;gestion des périodes de temps Nagios (sauf les exclusions)&lt;/li&gt;
    &lt;li&gt;checks passif&lt;/li&gt;
    &lt;li&gt;gestion des dépendances&lt;/li&gt;
    &lt;li&gt;macros&lt;/li&gt;
    &lt;li&gt;vérification de la fraicheur des états&lt;/li&gt;
    &lt;li&gt;export des données de performances&lt;/li&gt;
    &lt;li&gt;export des données dans une base MySQL de type Merlin&lt;/li&gt;
    &lt;li&gt;la gestion du flapping&lt;/li&gt;
    &lt;li&gt;le cache de checks pour les dépendances&lt;/li&gt;
    &lt;li&gt;services volatiles (pour les logs)&lt;/li&gt;
    &lt;li&gt;gestion du fichier de rétention&lt;/li&gt;
&lt;/ul&gt;
Pas si mal hein?&lt;/p&gt;
&lt;h2&gt;Ce qu'il reste à faire&lt;/h2&gt;
&lt;p&gt;Avant de le présenter "officiellement" aux auteurs de Nagios, je tiens à ce que la gestion des spares soient complète. De même que l'export vers la base ndo. Après je le présente, avec dans l'espoir de voir les bonnes idées s'il y en a (comme le pool de process) intégrée dans Nagios si c'est possible. (Bon tout est possible, mais en C ça devient beaucoup plus long à faire... beaucoup plus long à faire même...et pourtant j'aime le C, faut pas croire).&lt;/p&gt;
&lt;p&gt;Ah oui, il faut que je fasse une VM de type VirtualBox avec Shiken et Ninja pour l'interface. En fait plusieurs VM seraient mieux pour l'aspect distribué.&lt;/p&gt;</content><category term="blog"></category><category term="shinken"></category></entry><entry><title>Sortie de mon livre sur Nagios</title><link href="/sortie-de-mon-livre-sur-nagios/" rel="alternate"></link><published>2009-08-26T16:27:16+02:00</published><updated>2009-08-26T16:27:16+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-08-26:/sortie-de-mon-livre-sur-nagios/</id><summary type="html">&lt;p&gt;Sortie de mon livre sur Nagios&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;En octobre dernier j'ai entrepris d'écrire un livre sur Nagios. Après avoir écris plusieurs articles sur le sujet dans Linux Mag, il était temps de se lancer un nouveau défi. Je dois bien avouer que je suis particulièrement fier du résultat. Il est édité par Eyrolles dans la collection blanche. Ca tombe bien, c'est ma collection favorite (il n'y a qu'a regarder ma bibliothèque). Voici une petit photo de la couverture :&lt;/p&gt;
&lt;p&gt;&lt;img class="size-full wp-image-233 alignleft" title="nagios3" src="/images/31/nagios3.jpg" alt="nagios3" width="175" height="215" /&gt;&lt;/p&gt;
&lt;p&gt;Je n'ai pas été seul à travailler sur cet ouvrage. Je remercie encore chaleureusement ma femme Caroline pour ses diagrammes (je ne suis pas doué avec open office draw, elle oui :) ) et également Cedric Temple pour sa préface que j'apprécie énormément.&lt;/p&gt;
&lt;p&gt;Le livre est découpé en trois grande partie:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L'aprentissage de la supervision/métrologie avec la théorie (et oui, il faut y passer!) et une première mise en place de Nagios.&lt;/li&gt;
&lt;li&gt;Les techniques avancées de Nagios pour gérer les cas particuliers comme les Trap SNMP mais le tuning de Nagios ou la mise en place d'environnements distribués hautement disponibles.&lt;/li&gt;
&lt;li&gt;Enfin, la dernière partie concerne l'écosystème de Nagios avec des outils indispensables comme Centreon ou Nagvis.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ce livre a un but simple : faire le tour de la question Nagios. Une fois qu'un administrateur l'aura lu, il connaitra tous les principes et les astuces qui entourent Nagios et ses principaux outils (Centreon et NagVis). Il sera de même à gérer du début à la fin un projet de supervision/métrologie. En effet, l'accent est tout particulièrement mis sur l'aspect humain d'une telle entreprise. Faire accepter un util de supervision n'est pas aisé, même avec la meilleure volonté du monde. Ce livre donne toutes les informations pour déminer le terrain et permettre d'avoir un système informatique le plus efficace qu'il soit.&lt;/p&gt;
&lt;p&gt;Au passage, c'est l'écriture de ce livre qui m'a permis de voir les plus gros points noirs de Nagios (oui, il en a quelques uns et je n'évite pas d'en parler dans le livre) et de les corriger. Par exemple, sans le chapitre 8 sur la gestion de configuration pour les grands environnements, le patch pour qu'un service appliqué sur un hôte passe devant le même service apliqué sur un groupe d'hôtes ne serait pas être jamais sorti ;)&lt;/p&gt;
&lt;p&gt;Je continue bien sûr mon activité dans le monde Nagios avec comme point de mire les performances et les environnements distribués pour avoir un Nagios encore plus fort dans le monde de l'open source, et même au delà.&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Monter un cluster filesystem avec OCFS2</title><link href="/monter-un-cluster-filesystem-avec-ocfs2/" rel="alternate"></link><published>2009-08-03T14:22:39+02:00</published><updated>2009-08-03T14:22:39+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-08-03:/monter-un-cluster-filesystem-avec-ocfs2/</id><summary type="html">&lt;p&gt;Monter un cluster filesystem avec OCFS2&lt;/p&gt;</summary><content type="html">&lt;!-- RELU --&gt;

&lt;h2&gt;Intérêt de la solution&lt;/h2&gt;
&lt;p&gt;Les architectures clusters sont de plus en plus présentes. Si nous avons vu dans de précédent post la partie réseaux avec IPVS, il reste la question des applications, et tout particulièrement du partage des données, notamment les fichiers des applications, et parfois même les datafile des bases.
C'est justement un éditeur de base de données, Oracle, qui a mis au point un cluster filesystem développé sous licence GPLv2. Les noeuds doivent avoir accès au même device qui va être "formaté" en ocfs2 pour pouvoir être monté par plusieurs noeuds à la fois. c'est un cluster file system quoi...&lt;/p&gt;
&lt;p&gt;Pour ceux qui n'ont pas suivi, voici ce que cela donne avec deux noeuds (mais après vous pouvez en mettre bien plus) :&lt;/p&gt;
&lt;p&gt;&lt;img class="aligncenter size-medium wp-image-214" title="cluster filesystem" src="/images/30/cluster-filesystem.png" alt="cluster filesystem" width="300" height="255" /&gt;&lt;/p&gt;
&lt;p&gt;Ici, le &lt;strong&gt;même&lt;/strong&gt; disque est accessible des deux machines grâce à des liens SAN qui peuvent être Fibre ou iScsi (ce dernier suffit la plupart du temps). Dans cet exemple, chaque machine voit le disque sur un nom de device différent, mais ce n'est pas obligatoire.&lt;/p&gt;
&lt;p&gt;Regardons un peu comment il fonctionner et comment on le met en place.&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;Mise en place&lt;/h2&gt;
&lt;p&gt;&lt;h3&gt;Installation&lt;/h3&gt;
Il faut tout d'abord identifier la version de noyau qu'on utilise afin de récupérer les bons modules:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uname -r
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Il faut ensuite aller sur le site http://oss.oracle.com/projects/ocfs2/files/ et récupérer le bon RPM ocfs2.
Il faut faire de même pour le module ocfs2-tool &lt;a title="http://oss.oracle.com/projects/ocfs2-tools/files/RedHat/RHEL4/" href="http://oss.oracle.com/projects/ocfs2-tools/files/RedHat/RHEL4/"&gt;http://oss.oracle.com/projects/ocfs2-tools/files/RedHat/RHEL4/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Uploader les deux RPM sur les serveurs et faire:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rpm -Uvh --test ocfs2*
rpm -Uvh ocfs2*&amp;lt;/span&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Il faut aussi que les noeuds aient accès au même device (iScsi, SAN, autre) comme dit précédement.&lt;/p&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Il faut ensuite lancer sur un des noeuds la commande graphique ocfs2console.
Pour ajouter des noeuds, faire ''Cluster-&amp;gt;Configure nodes''. Une fois tous les noeuds ajoutés, il faut envoyer la configuration sur l'ensembles des noeuds, pour cela cliquer faire ''Cluster-&amp;gt;Propagate Configuration''.&lt;/p&gt;
&lt;p&gt;Attention, il faut que les serveurs puissent dialoguer entre eux par SSH avec des clés déjà positionnées pour le compte root si vous ne voulez pas retaper votre mot de passe à chaque fois.&lt;/p&gt;
&lt;p&gt;Le fichier de configuration principal est &lt;em&gt;/etc/ocfs2/cluster.conf&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Il faut ensuite formater le device. Le sélectionner puis faire ''Task-&amp;gt;Format''. Attention, on peux augmenter le nombre de noeuds du cluster, mais jamais le diminuer.&lt;/p&gt;
&lt;p&gt;En ligne de commande:
Pour formater un volume avec des blocks de 4k, 32k de cluster size sur 4 noeuds possibles:&lt;/p&gt;
&lt;p&gt;mkfs.ocfs2 -b 4K -C 32K -N 8 -L oracle_home /dev/sdf2&lt;/p&gt;
&lt;p&gt;On initialise et démarre le cluster:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; /etc/init.d/o2cb configure
 /etc/init.d/o2cb start
 /etc/init.d/ocfs2 start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pour monter le filesystem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount -t ocfs2 /dev/sdf2 /u01
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pour le démonter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;umount /u01
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pour certaines applications il faut des montages particuliers. Par exemple, les Datafiles ou tout ce qui y ressemble doivent avoir les options suivantes:
 &lt;em&gt;&lt;em&gt;datavolume&lt;/em&gt; : force les process à avoir le flag o_direct
 &lt;/em&gt;&lt;em&gt;nointr&lt;/em&gt; : permet d'enpécher les interuptions par signaux des lectures et écritures&lt;/p&gt;
&lt;p&gt;Exemple de montage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount -t ocfs2 -o datavolume,nointr /dev/sdf2 /u01
mount
/dev/sdf2 on /u01 type ocfs2 (rw,datavolume,nointr)
cat /etc/fstab
/dev/sdf2 /u01 ocfs2 _netdev,datavolume,nointr 0 0
/dev/sdg2 /orahome ocfs2 _netdev 0 0&amp;lt;/span&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;L'option &lt;em&gt; _netdev&lt;/em&gt; permet de demander le montage après que le réseau soit up et de même pour l'arrêt.&lt;/p&gt;
&lt;p&gt;Afin d'avoir le lancement d'ocfs2 au démarrage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chkconfig --add ocfs2
chkconfig --add o2cb
/etc/init.d/o2cb configure
Load O2CB driver on boot (y/n) [n]: y
Cluster to start on boot (Enter &amp;quot;none&amp;quot; to clear) []: ocfs2
Writing O2CB configuration: OK&amp;lt;/span&amp;gt;
To mount by label, do:
mount -L datafiles /u01
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Administration&lt;/h2&gt;
&lt;p&gt;Pour voir l'état du cluster:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;o2cb&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;
&lt;span class="k"&gt;Module&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;configfs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;Not&lt;/span&gt; &lt;span class="n"&gt;loaded&lt;/span&gt;
&lt;span class="n"&gt;Filesystem&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;configfs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;Not&lt;/span&gt; &lt;span class="n"&gt;mounted&lt;/span&gt;
&lt;span class="k"&gt;Module&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ocfs2_nodemanager&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;Not&lt;/span&gt; &lt;span class="n"&gt;loaded&lt;/span&gt;
&lt;span class="k"&gt;Module&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ocfs2_dlm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;Not&lt;/span&gt; &lt;span class="n"&gt;loaded&lt;/span&gt;
&lt;span class="k"&gt;Module&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ocfs2_dlmfs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;Not&lt;/span&gt; &lt;span class="n"&gt;loaded&lt;/span&gt;
&lt;span class="n"&gt;Filesystem&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ocfs2_dlmfs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;Not&lt;/span&gt; &lt;span class="n"&gt;mounted&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pour mettre le cluster online:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/o2cb online ocfs2
Starting cluster ocfs2: OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pour mettre le cluster offline:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/o2cb offline ocfs2
Cleaning heartbeat on ocfs2: OK
Stopping cluster ocfs2: OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pour ajouter o2cb au lancement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; /etc/init.d/o2cb configure
Configuring the O2CB driver.
This will configure the on-boot properties of the O2CB driver.
The following questions will determine whether the driver is loaded on
boot. The current values will be shown in brackets (&amp;#39;[]&amp;#39;). Hitting
&lt;span class="nt"&gt;&amp;lt;ENTER&amp;gt;&lt;/span&gt; without typing an answer will keep that current value. Ctrl-C
will abort.
Load O2CB driver on boot (y/n) [n]: y
Cluster to start on boot (Enter &amp;quot;none&amp;quot; to clear) []: ocfs2
Writing O2CB configuration: OK&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Une fois configuré, le lancement/arrêt du cluster se fait par:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/o2cb start
Loading module &amp;quot;configfs&amp;quot;: OK
Mounting configfs filesystem at /config: OK
Loading module &amp;quot;ocfs2_nodemanager&amp;quot;: OK
Loading module &amp;quot;ocfs2_dlm&amp;quot;: OK
Loading module &amp;quot;ocfs2_dlmfs&amp;quot;: OK
Mounting ocfs2_dlmfs filesystem at /dlm: OK
Starting cluster ocfs2: OK
/etc/init.d/o2cb stop
Cleaning heartbeat on ocfs2: OK
Stopping cluster ocfs2: OK
Unmounting ocfs2_dlmfs filesystem: OK
Unloading module &amp;quot;ocfs2_dlmfs&amp;quot;: OK
Unmounting configfs filesystem: OK
Unloading module &amp;quot;configfs&amp;quot;: OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Changer le nombre de noeuds d'un filesystem&lt;/h3&gt;
&lt;p&gt;&lt;p style="text-align: left;"&gt;Pour augmenter le nombre de montages possible d'un même filesystem OCFS, il faut utiliser la commande tunefs.ocfs2. Il faut le faire cluster arrété.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;umount /montage
/etc/init.d/ocfs2 stop
tunefs.ocfs2 -N 16 /dev/emcpowerd
(Répondre y)
/etc/init.d/ocfs2 start
mount -a&amp;lt;/span&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Modifications sur les configurations des noeuds&lt;/h3&gt;
&lt;p&gt;La seule opération qui peut se faire à chaud est le rajout de noeuds. En cas de changement dans les IP des noeuds ou bien le changement des ports de communications, il faut que le cluster soit offline.&lt;/p&gt;
&lt;h3&gt;Rajout d'un noeud au cluster&lt;/h3&gt;
&lt;p&gt;Cette opération peut se faire à chaud. Il faut Lancer la commande suivante sur &lt;strong&gt;TOUS LES NOEUDS&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;o2cb_ctl -C -i -n NODENAME -t node -a number=NODENUM -a ip_address=IPADDR -a ip_port=IPPORT -a cluster=CLUSTERNAME&amp;lt;/span&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Copier ensuite un fichier /&lt;em&gt;etc/ocfs2/cluster.conf&lt;/em&gt; d'un des noeuds sur le nouveau.&lt;/p&gt;
&lt;h3&gt;Le cluster ne veux pas passer offline&lt;/h3&gt;
&lt;p&gt;Dans ce cas, il faut vérifier que les informations des fichiers &lt;em&gt;cluster.conf&lt;/em&gt; sont bonnes.&lt;/p&gt;
&lt;h3&gt;Redimensionnement d'un file system OCFS2&lt;/h3&gt;
&lt;p&gt;On peut agrandir un filesystem OCFS2 avec la commande tunefs.ocfs2. Attention, ceci permet de resizer le filesystem, pas le volume.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tunefs.ocfs2 -S /dev/sdX
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Afin de redimensionner à la taille max mais attention : le redimensionnement est offline.&lt;/p&gt;
&lt;h3&gt;Voir l'agrandissement des filesystem sur les autres noeuds&lt;/h3&gt;
&lt;p&gt;Sans avoir besoin de redémarrer:
    blockdev --rereadpt /dev/sdX&lt;/p&gt;
&lt;h3&gt;&lt;span style="font-weight: normal; font-size: 13px;"&gt;Limitations&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Le nombre de sous répertoires dans un répertoire est limité à 32000.&lt;/li&gt;
&lt;li&gt;La taille d'un file system est limité à (2 ^ 32) * blocksize. Avec des blocks à 4KB ceci donne 16TB.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Connectivité réseau&lt;/h3&gt;
&lt;p&gt;Un noeud va considérer un autre vivant lorsqu'il réponds sur le port TCP sans avoir un timeout d'idle de O2CB_IDLE_TIMEOUT_MS&lt;/p&gt;
&lt;h3&gt;Super blocks&lt;/h3&gt;
&lt;p&gt;Un super block est un block décrivant le filesystem. Il est indispensable, et le perdre est plus qu'embêtant. On peut donc (doit!) le backuper. Ocfs2 en fait des backup aux adresses  1G, 4G, 16G, 64G, 256G et 1T byte&lt;/p&gt;
&lt;p&gt;Pour voir ces backups:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;debugfs.ocfs2 -R &amp;quot;stats&amp;quot; /dev/sdX | grep &amp;quot;Feature Compat&amp;quot;
Feature Compat: 1 BackupSuper&amp;lt;/span&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Récupération du backup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fsck.ocfs2 -f -r 2 /dev/sdX&amp;lt;/span&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Configuration des timeouts&lt;/h3&gt;
&lt;p&gt;Les différents timeouts sont:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O2CB_HEARTBEAT_THRESHOLD : timeout de didk. Nombre de ticks (2secondes) avant qu'un noeud soit déclaré mort. O2CB_HEARTBEAT_THRESHOLD = (((timeout in seconds) / 2) + 1). Par exemple, pour donner un timeout a 60 secondes, il faut le placer a 31. C'est la valeur par défaut.&lt;/li&gt;
&lt;li&gt;O2CB_IDLE_TIMEOUT_MS : timeout d'idle réseau. Nombre de millisecondes d'idle pour qu'un noeud soit déclaré unreachable. La valeur par défaut est de 30s (30000).&lt;/li&gt;
&lt;li&gt;O2CB_KEEPALIVE_DELAY_MS : timeout de keep alive réseau. C'est le délai maximum en millisecondes avant qu'un paquet keepalive soit envoyé. La valeur par défaut est de 2000ms (2s).&lt;/li&gt;
&lt;li&gt;O2CB_RECONNECT_DELAY_MS : C'est le delai minimum en millisecondes entre les tentavies de connexions. Par défaut 2000ms (2s).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On peut voir ces valeurs dans &lt;em&gt;/etc/sysconfig/o2cb&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /etc/sysconfig/o2cb&amp;lt;/span&amp;gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Patch Nagios pour une gestion plus fine de la configuration</title><link href="/patch-nagios-pour-une-gestion-plus-fine-de-la-configuration/" rel="alternate"></link><published>2009-07-02T13:39:21+02:00</published><updated>2009-07-02T13:39:21+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-07-02:/patch-nagios-pour-une-gestion-plus-fine-de-la-configuration/</id><summary type="html">&lt;p&gt;Patch Nagios pour une gestion plus fine de la configuration&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Lorsque l'on étudie un peu la gestion de configuration de Nagios, on est impressionné par la richesses des possibilité, que ce soit sur les macros, les services appliqués sur les groupes, les exeptions, etc. En fait, une seule fonctionalité manque lorsque l'on souhaite gérer finement et effiacement sa configuration : les exeptions sur les services appliqués sur des groupes de noeuds.&lt;/p&gt;
&lt;p&gt;Un tel service appliqué sur un groupe prenait systématiquement le pas sur le même service appliqué sur un noeud. On était obligé de contourner le problème avec la mise en place de MACROS spécifiques et de modifier les commandes. Ce n'est désormais plus nécessaire avec la nouvelle version de Nagios. J'ai proposé dernièrement un patch qui a été appliqué dans la &lt;em&gt;3.1.2&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Cette modification permet à un service appliqué sur un noeud de prendre le pas sur le service appliqué d'un groupe. Cette possibilité permet de définir très simplement une execptions d'un service, sans avoir à sortir un noeud d'un groupe et dupliquer tous les autres services qui y étaient acrochés.&lt;/p&gt;
&lt;p&gt;Par exemple, avec la défiition suivante :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;define service{
   use                  generic-service
   hostgroup_name       all-server
   service_description  service-test
   check_command        check_ping
   }

   define service{
   use                  generic-service
   host_name            srv-1
   service_description  service-test
   check_command        check_local_disk
   }
&lt;/pre&gt;&lt;/div&gt;


&lt;p style="text-align: left;"&gt;Et bien maintenant c'est la seconde définition qui va gagner, ce qui est tout de même bien pratique  :mrgreen:&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Shinken : quand un python rencontre Nagios</title><link href="/shinken-quand-un-python-rencontre-nagios/" rel="alternate"></link><published>2009-07-02T13:31:08+02:00</published><updated>2009-07-02T13:31:08+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-07-02:/shinken-quand-un-python-rencontre-nagios/</id><summary type="html">&lt;p&gt;Shinken : quand un python rencontre Nagios&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;J'ai commencé voila quelques temps le projet &lt;strong&gt;Shinken&lt;/strong&gt;. C'est une ré-implémentation de &lt;a href="http://www.nagios.org"&gt;Nagios&lt;/a&gt; en Python qui va me permettre de maqueter certains principes pour Nagios avant de me les fader en C.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE: (Jean 2021): oui bah finalement le recodage en C n&amp;#39;est jamais arrivé ^^
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;C'est pour cela que j'ai choisi le langage Python qui est particulièrement élégant et jouissif. Si vous ne le connaissez pas, aller faire un petit tour sur &lt;a href="http://www.python.org/"&gt;http://www.python.org/&lt;/a&gt; et laissez vous emporter par ce super langage.&lt;/p&gt;
&lt;p&gt;Shinken est le résultat de mon étude de Nagios dont je parlerai un peu plus tard. Ce projet est déjà très efficace, mais j'étais persuadé que certains petits détails étaient encore améliorables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Par exemple, le lancement des sondes est ce qui coute le plus cher en terme de performance pour Nagios. Éviter de forker en ayant un pool de processus peut être bien plus intéressant. Ceci se code en quelques lignes de Python. &lt;/li&gt;
&lt;li&gt;De même, les aspects distribué de Nagios ne sont pas parfait. Les Nagios n'ont aucune connaissance des autres. Si avec des solutions comme Centreon il est facile de les gérer, certains problèmes persistent comme les notifications qui sont envoyées par chaque Nagios et ce séquentiellement.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L'intérêt de Shinken est de reprendre la configuration de Nagios ainsi que ses principes de supervision qui sont très pousés tout en proposant une novuelle architecture pour le programme à proprement parlé. Shinken est par exemple capable de couper automatiquement la configuration en partie totalement indépendantes qui vont pouvoir être, encore automatiquement, envoyées vers un scheduler qui va ordonnancer les vérifications et prendre les décisions en cas de problèmes.&lt;/p&gt;
&lt;p&gt;Le nom du projet n'a pas été facile à trouver : je suis très long pour trouver des noms. Je peux dire merci à &lt;a href="http://en.wikipedia.org/wiki/Shinken"&gt;Wikipedia &lt;/a&gt;pour celui-là. je cherchai un nom de sabre japonais (j'aime bien la sonorité des noms japonais) et je suis tombé sur celui-là. Le sabre illustre la faculté de couper la charge automatiquement sur plusieurs machines. Et le Shinken est le sabre qui coupe le plus.&lt;/p&gt;
&lt;p&gt;Le code est déjà bien avancé et est en licence AGPLv3.&lt;/p&gt;
&lt;p&gt;Je reviendrai plus tard sur ce choix. Je suis en train de monter une première version sur &lt;a href="https://sourceforge.net/projects/shinken/"&gt;sourceforge&lt;/a&gt;. Et plus important encore, le logo est déjà prêt :)&lt;/p&gt;
&lt;p&gt;&lt;img class="alignnone size-medium wp-image-139" title="shinken" src="/images/27/shinken.png" alt="shinken" width="300" height="300" /&gt;&lt;/p&gt;
&lt;p&gt;Merci à l'auteur cisoun pour sa mascotte &lt;a href="http://tux.crystalxp.net/en.id.2203-cisoun-ouaaargh.html"&gt;ouaaargh&lt;/a&gt; qui a servi de base à ce logo :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE: (Jean 2021): Ca reste encore à ce jour le logo que je préfère, il montrait bien ce que je pensais de Shinken: un truc un peu fou qui fonce dans le tas sans se poser trop de questions :p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pour ceux qui veulent voir un peu ce que cela donne, vous pouvez obtenir la dernière version du code avec git (paquet git-core sous debian):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://github.com/naparuba/shinken.git
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Patch Nagios pour un démarrage (bien plus) rapide</title><link href="/patch-nagios-pour-un-demarrage-bien-plus-rapide/" rel="alternate"></link><published>2009-07-02T10:08:29+02:00</published><updated>2009-07-02T10:08:29+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-07-02:/patch-nagios-pour-un-demarrage-bien-plus-rapide/</id><summary type="html">&lt;p&gt;Patch Nagios pour un démarrage (bien plus) rapide&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Il y a de cela un an, j'ai pris au mot l'auteur de Nagios lorsqu'il écrit dans la documentation de Nagios concernant les vérifications effectuées au démarrage :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;That means all you CompSci graduate students who have been emailing me about doing your thesis on Nagios can contribute some code back. :-)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Je ne sais pas qui ils sont, mais j'ai essayé de résoudre le problème poser : la vérification des liens de parentés dans Nagios était horriblement longue. &lt;/p&gt;
&lt;p&gt;En fait, j'ai même réussi.&lt;/p&gt;
&lt;p&gt;Pour rappel, Nagios permet de définir pour un host un ou plusieurs parents (en terme de réseau):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;De cette manière, si un switch tombe par exemple et que l'administrateur a bien configuré ses serveurs pour qu'ils soient des fils du switch en question, il ne va recevoir qu'une seule alerte, celle du switch, plutôt que N alertes des serveurs. C'est la dépendance réseau. &lt;/li&gt;
&lt;li&gt;Cette relation forme un arbre : Nagios remonte les branches pour trouver la cause du problème. La racine est le noeud Nagios lui même. &lt;/li&gt;
&lt;li&gt;Mais que se passe-t-il si on autorise les cycles dans la configuration? Nagios va tourner en rond lors de la recherche de l'erreur!  :evil:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour éviter cela, Nagios fait une vérification au démarrage afin de trouve les cycles dans cette configuration s'ils existent. Un premier algorithme naïf est en O(n²). Et bien dans Nagios arrivait à faire du O(n3)... &lt;/p&gt;
&lt;p&gt;Vous aller me dire que ce n'est pas si grave que ça. Et bien en fait si. Prenons une configuration "costaux" de 40000 hosts avec des relations de parentées. Et bien la vérification prends &lt;strong&gt;70s&lt;/strong&gt; sur un Core2 à 2.4Ghz. Ce n'est pas négligeable, car pendant ce temps, il n'y a pas de supervision...&lt;/p&gt;
&lt;p&gt;J'ai donc décidé d'appliquer mes cours de théorie des graphes et de faire un simple &lt;a href="http://en.wikipedia.org/wiki/Depth-first_search"&gt;parcours en profondeur&lt;/a&gt;, aussi nommé Deep First Search (DFS). C'est donc un algorithme récursif, ce qui n'a rien d'étonnant dans le monde des graphs  :mrgreen:&lt;/p&gt;
&lt;p&gt;Son fonctionnement est légèrement différent du DFS standard, car le but n'était pas de savoir si une boucle existait, mais de trouver TOUS les noeuds étant dans une boucle, afin d'aider l'utilisateur à corriger les problèmes en un passage.De plus, il n'y a pas de noeud root sur cet arbre de relation. On peut potentiellement partir en plein milieu de l'arbre, ce qui ne facilite pas les choses.&lt;/p&gt;
&lt;p&gt;Les noeuds peuvent avoir plusieurs attributs :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DFS_UNCHECKED&lt;/strong&gt; : 0 (valeur par défaut)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DFS_TEMPORARY_CHECKED&lt;/strong&gt; : 1 (a été parcouru une fois)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DFS_OK&lt;/strong&gt; : 2 (pas de problème)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DFS_NEAR_LOOP&lt;/strong&gt; : 3 (a des fils à problèmes)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DFS_LOOP_INSIDE&lt;/strong&gt; : 4 (fait parti d'une boucle)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nouveau test avec ce parcours en profondeur au lieu de l'algorithme initial : &lt;strong&gt;0.006864 sec&lt;/strong&gt;  :-D&lt;/p&gt;
&lt;p&gt;Après une longue période de non réponse de l'auteur de Nagios et le "coup de pied au cul" de Icinga avec leur tentative de Fork (&lt;strong&gt;NOTE 2021&lt;/strong&gt;: bah plus qu'une tentavive finalement ^^), de nouveaux développeurs ayant accès au CVS de Nagios ont été nommés. C'est ainsi que mon patch a été &lt;a href="http://nagios.cvs.sourceforge.net/viewvc/nagios/nagios/base/config.c?r1=1.119&amp;amp;r2=1.120" target="_blank"&gt;intégré&lt;/a&gt; dans la version 3.1.2 de Nagios et que des milliers d'administrateurs vont voir leur Nagios démarrer bien plus rapidement.&lt;/p&gt;
&lt;p&gt;Reste à appliquer ce principe aux autres relations de dépendances dans Nagios...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: Ca reste à ce jour un de mes algorithmes favoris, car trouver une boucle est trivial, trouvé l&amp;#39;ensemble des éléments les constituant c&amp;#39;est tout autre chose ^^
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Administration et supervision de HeartBeat/Ldirectord/IPVS</title><link href="/administration-et-supervision-de-heartbeatldirectordipvs/" rel="alternate"></link><published>2009-06-30T15:17:45+02:00</published><updated>2009-06-30T15:17:45+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-06-30:/administration-et-supervision-de-heartbeatldirectordipvs/</id><summary type="html">&lt;p&gt;Administration et supervision de HeartBeat/Ldirectord/IPVS&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;On a conçu une solution de load balancing et de répartition de charge et nous l'avons mis en place. Le travail n'est pas fini pour autant. Il nous reste à administrer et superviser ces outils.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: Après pas loin de 20ans dans l&amp;#39;informatique je dirais même que mettre en place la solution c&amp;#39;est les 20% du travail le plus facile. Vivre avec c&amp;#39;est clairement les 80% restant ^^
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On peut administrer la solution à plusieurs niveaux :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Heartbeat&lt;/li&gt;
&lt;li&gt;IPVS&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;HeartBeat&lt;/h3&gt;
&lt;p&gt;Heartbeat est particulièrement résilient. Il est plus que rare de le voir défaillir. Par contre il peut être utile de voir l'allocation des ressources et l'états des noeuds.&lt;/p&gt;
&lt;p&gt;Par exemple pour voir l'état d'un noeud, il faut lancer la commande :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/bin/cl_status nodestatus frontal2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Elle va afficher :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cl_status[22045]: 2009/06/30_14:56:43 debug: optind: 1   argv[optindex+1]: frontal2
active
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;=&amp;gt; On voit ici que le second noeud est bien en vie.&lt;/p&gt;
&lt;p&gt;Nagios possède un scheck dédié pour cela, disponible sur &lt;a href="http://www.monitoringexchange.org/cgi-bin/page.cgi?g=Detailed%2F1803.html;d=1"&gt;http://www.monitoringexchange.org/cgi-bin/page.cgi?g=Detailed%2F1803.html;d=1&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$/usr/local/nagios/libexec/check_heartbeat_link
Heartbeat Link OK: frontal2:eth0:up
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Il faut le lancer sur les deux frontaux. De cette manière, vous saurez si un noeud ne réponds plus au sens cluster HeartBeat.&lt;/p&gt;
&lt;p&gt;En cas de problème avec HeartBeat, il ne faut pas hésiter à aller lire le fichier &lt;strong&gt;/var/log/ha-log&lt;/strong&gt; qui est très clair.&lt;/p&gt;
&lt;h3&gt;IPVS&lt;/h3&gt;
&lt;p&gt;En ce qui concerne IPVS, la commande ipvsadm nous permet d'obtenir les infos souhaitées.
Voir les serveurs actifs :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipvsadm -Ln
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voir le status de la table des sessions :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipvsadm -Lnc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voir les entrées sauvegardées :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipvsadm -Lc | grep NONE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voir les infos du daemon de synchronisation :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipvsadm -L --daemon
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voir les stats d'utilisation :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipvsadm -L --rate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pour voir l'espace mémoire utilisé par IPVS, il faut regarder l'utilisation du module noyau &lt;strong&gt;ip_vs&lt;/strong&gt; du noyau, il n'est donc pas possible de voir l'utilisation mémoire de ce module depuis top. Il faut pour cela utiliser la commande :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;slabtop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;et regarder la ligne &lt;strong&gt;ip_vs_conn&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: slabtop, une commande tellement peu connue qui sauva pourtant tant de mes analyses de consommation mémoire...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On peut considérer qu'une connexion prends 1/10 de Ko. Donc une machine de 512Mo peut gérer 512*1024/10=&lt;strong&gt;52428&lt;/strong&gt; connexions simultanées. Ca laisse de la marge, surtout lorsqu'on voit le prix de la mémoire actuellement...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: Oui clairement avec le temps la mémoire est quand même resté sacrément bon marché
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Mise en place d'une solution de load balancing hautement disponible</title><link href="/mise-en-place-dune-solution-de-load-balancing-hautement-disponible/" rel="alternate"></link><published>2009-06-30T14:24:49+02:00</published><updated>2009-06-30T14:24:49+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-06-30:/mise-en-place-dune-solution-de-load-balancing-hautement-disponible/</id><summary type="html">&lt;p&gt;Mise en place d'une solution de load balancing hautement disponible&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Nous avons vu le principe de la solution de load balancing hautement disponible, regardons désormais comment la mettre en place.&lt;/p&gt;
&lt;h2&gt;Les load balanceurs&lt;/h2&gt;
&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;Nous allons appeler les répartiteurs de charges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;frontal1 (&lt;strong&gt;192.168.0.1&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;frontal2 (&lt;strong&gt;192.168.0.2&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;l'IP virtuelle (VIP) est &lt;strong&gt;192.16.8.0.3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;le service sera sur le port &lt;strong&gt;80&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La distribution de notre exemple sera ici une Redhat entreprise 4, mais il est très facile de généraliser pour d'autres.&lt;/p&gt;
&lt;p&gt;Les serveurs réels seront:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reel1 (linux) en 192.168.0.4&lt;/li&gt;
&lt;li&gt;reel2 (linux) en 192.168.0.5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Les composants importants sont:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Heartbeat afin de faire la bascule en cas de mort d'un loadbalanceur&lt;/li&gt;
&lt;li&gt;ldirector qui se charge de configurer et surveiller les serveurs réels&lt;/li&gt;
&lt;li&gt;ipvsadm qui contrôle le module LVS du noyau (&lt;strong&gt;ip_vs&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;En terme de package RPM ceci donne à installer (rpm -Uvh *rpm) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;heartbeat-2.0.7-1.c4.i386.rpm&lt;/li&gt;
&lt;li&gt;heartbeat-ldirectord-2.0.8-2.el4.centos.i386.rpm&lt;/li&gt;
&lt;li&gt;heartbeat-pils-2.0.7-1.c4.i386.rpm&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;heartbeat-stonith-2.0.7-1.c4.i386.rpm&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;ipvsadm-1.24-6.i386.rpm&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;perl-Authen-Radius-0.13-1.el4.rf.noarch.rpm&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;perl-Data-HexDump-0.02-1.2.el4.rf.noarch.rpm&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;perl-Digest-HMAC-1.01-13.noarch.rpm&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;perl-Digest-SHA1-2.07-5.i386.rpm&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;perl-IO-Socket-SSL-1.01-1.el4.rf.noarch.rpm&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;perl-Mail-POP3Client-2.17-1.c4.noarch.rpm&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;perl-MailTools-1.76-1.el4.rf.noarch.rpm&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;perl-Net-DNS-0.59-5.el4.i386.rpm&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;perl-Net-IMAP-Simple-1.16-1.c4.noarch.rpm&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;perl-Net-IMAP-Simple-SSL-1.3-1.c4.noarch.rpm&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;perl-Net-IP-1.25-3.el4.noarch.rpm&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;perl-Net_SSLeay.pm-1.25-4.el4.at.i386.rpm&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;perl-TimeDate-1.16-3_2.el4.at.noarch.rpm&lt;/li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ces versions sont valables pour une RHES 4U4. Ils sont disponibles sur &lt;a href="http://mirror.centos.org/centos/4/extras/i386/RPMS/"&gt;http://mirror.centos.org/centos/4/extras/i386/RPMS/
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Une fois tous ces packages installés, il faut les configurer. Nous allons nous placer dans une configuration en mode direct.&lt;/p&gt;
&lt;h3&gt;Configuration de Heartbeat&lt;/h3&gt;
&lt;p&gt;Notre configuration commence par celle de Heartbeat. Nous allons commencer par configurer un simple cluster actif/passif d'une adresse virtuelle, &lt;strong&gt;192.16.8.0.3&lt;/strong&gt;. Elle ne sera active que sur un des frontaux à la fois. Si le maitre tombe, le second prend la main.&lt;/p&gt;
&lt;p&gt;Le fichier de configuration principal est &lt;strong&gt;/etc/ha.d/ha.cf&lt;/strong&gt; sur chaque frontal. &lt;/p&gt;
&lt;p&gt;Ici sur le serveur frontal1 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ucast         eth0 192.168.0.2
debugfile     /var/log/ha-debug
logfile       /var/log/ha-log
logfacility   local0

keepalive     2
deadtime      10
warntime      6
initdead      60

udpport       694
node          frontal1
node          frontal2

auto_failback on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Le fichier de configuration de &lt;strong&gt;frontal2&lt;/strong&gt; ne va différer que de la première ligne :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ucast         eth0 192.168.0.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La ligne &lt;strong&gt;ucast&lt;/strong&gt; permet d'aller vérifier si l'autre noeud est toujours en vie ou non. Il est possible de spécifier une autre interface que &lt;strong&gt;eth0&lt;/strong&gt; si on possède un lien dédié à cette communication. Ici par soucis de facilité, nous utiliserons le lien LAN normal.&lt;/p&gt;
&lt;p&gt;Le fichier &lt;strong&gt;/etc/ha.d/haresources&lt;/strong&gt; qui décrit les services mis en place par HeartBeat. Pour l'instant, nous nous contentons de l'adresse virtuelle :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;frontal1 IPaddr::192.168.0.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;IPaddr&lt;/strong&gt; est un script dans &lt;strong&gt;/etc/ha.d/resource.d&lt;/strong&gt; qui permet de monter une adresse sur un alias d'interface. Ici il va créer &lt;strong&gt;eth0:0&lt;/strong&gt; avec comme IP &lt;strong&gt;192.168.0.3&lt;/strong&gt;. Il est important de comprendre que ce script est appelé avec &lt;strong&gt;start&lt;/strong&gt; sur le maitre, &lt;strong&gt;stop&lt;/strong&gt; sur l'esclave. &lt;/p&gt;
&lt;p&gt;Lorsqu'une bascule s'opère, c'est tout simplement l'inverse et donc le neoud secondaire prends l'IP.&lt;/p&gt;
&lt;p&gt;Les deux noeuds ont besoin de s'authentifier. Pour cela, il faut éditer le fichier &lt;strong&gt;/etc/ha.d/authkeys&lt;/strong&gt; qui décrit comment communiquent
les deux noeuds :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auth 2
1 md5 &amp;quot;vive ipvs&amp;quot;
2 crc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Faire un :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chmod 600 /etc/ha.d/authkeys
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Il faut ajouter le lancement de heartbeat au démarrage des deux frontaux :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chkconfig --add heartbeat
chkconfig heartbeat on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lancer les services sur les deux frontaux avec :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/heartbeat start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vous pouvez vérifier que vosu avec un alias de monté sur le noeud maitre et pas sur le noeud secondaire :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eth0      Link encap:Ethernet  HWaddr 00:50:57:85:5C:96
inet addr:192.168.0.1  Bcast:192.168.0.255  Mask:255.255.255.0
[...]
eth0:0    Link encap:Ethernet  HWaddr 00:50:57:85:5C:96
inet addr:192.168.0.3  Bcast:192.168.0.255  Mask:255.255.255.0
[...]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On remarque que &lt;strong&gt;eth0&lt;/strong&gt; est toujours disponible, mais que eth0:0 est apparu avec notre VIP.&lt;/p&gt;
&lt;h3&gt;Configuration de Ldirectord&lt;/h3&gt;
&lt;p&gt;Une fois HeartBeat de configuré, penchant nous sur la mise en place de &lt;strong&gt;ldirectord&lt;/strong&gt; qui va gérer les règles de load balancing.&lt;/p&gt;
&lt;p&gt;Ldirectord utilise des fichiers de conf situé dans &lt;strong&gt;/etc/ha.d/conf&lt;/strong&gt;, soit dans la configuration de Heartbeat. C'est en effet ce dernier qui le lancera sur le noeud primaire uniquement. 
Le mieux concernant ldirectord est de faire un fichier de conf par service. Ici nous prendrons le fichier &lt;strong&gt;/etc/ha.d/conf/www.cf&lt;/strong&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtual = 192.168.0.3:80
protocol = tcp
scheduler = wlc
real = 192.168.0.4:80 gate 1
real = 192.168.0.5:80 gate 1
checktype = connect
quiescent = no
persistent = 3600
fallback = 127.0.0.1:80
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Les paramètres sont :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gate : mode direct&lt;/li&gt;
&lt;li&gt;1 : poids du nœud par rapport aux autres&lt;/li&gt;
&lt;li&gt;scheduler : algorithme de détermination du serveur réel a qui envoyer le client&lt;/li&gt;
&lt;li&gt;checktype : mode de supervision, ici simple ouverture de port&lt;/li&gt;
&lt;li&gt;quiescent : si mis à no, le serveur réel est retiré de la liste lorsqu'il est mort. S'il revient, il est automatiquement ajouté&lt;/li&gt;
&lt;li&gt;persistent : durée des sessions&lt;/li&gt;
&lt;li&gt;fallback : serveur qui prends le relai lorsque tous les serveurs réels sont morts. typiquement c'est juste un 404.html avec un message d'erreur.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Configuration de la synchronisation de la table des sessions&lt;/h3&gt;
&lt;p&gt;La table des sessions sur le &lt;strong&gt;frontal1&lt;/strong&gt; peut (doit!) être synchronisée sur le frontal2 de temps en temps (toutes les 30secondes environs). &lt;/p&gt;
&lt;p&gt;En effet, en cas de tombée du serveur1, lorsque le 2 arrive, s'il n'a pas déjà la table des sessions, les utilisateurs vont devoir se reconnecter. Un système existe afin de synchroniser les serveurs.&lt;/p&gt;
&lt;p&gt;Pour cela, créer le fichier &lt;em&gt;/etc/init.d/lvsstate&lt;/em&gt; sur les deux frontaux :
&lt;pre class="wp-caption" style="text-align: left;"&gt;#!/bin/sh&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h1&gt;Created 2000-01-03 by naparuba@gmail.com&lt;/h1&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h1&gt;lvsstate      This shell script takes care of starting and stopping&lt;/h1&gt;
&lt;h1&gt;sessions managers for IPVS.&lt;/h1&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h1&gt;chkconfig: -  80 30&lt;/h1&gt;
&lt;h1&gt;description: ipvs_syncmaster is a daemon for syncronising sessions\&lt;/h1&gt;
&lt;h1&gt;between two IPVS.&lt;/h1&gt;
&lt;h1&gt;processname: ipvs_syncmaster&lt;/h1&gt;
&lt;h1&gt;config: /none.cfg&lt;/h1&gt;
&lt;p&gt;case "$1" in
 start)
    /sbin/ipvsadm --start-daemon backup --syncid=1
    /sbin/ipvsadm --start-daemon master --syncid=1
 ;;
 stop)
    /sbin/ipvsadm --stop-daemon=backup
    /sbin/ipvsadm --stop-daemon=master
 ;;
 restart)
    $0 stop
    $0 start
 ;;
 status)
    ipvsadm -L --daemon
 ;;
 *)
    echo "Usage: $0 {start|stop|restart|status}"
esac&lt;/p&gt;
&lt;p&gt;exit 0&lt;/pre&gt;
Attention, il y a la paramètre &lt;em&gt;syncid&lt;/em&gt; qui permet de ne pas entrechoquer plusieurs LVS sur le réseau. On peut définir par exemple :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3 = TEST&lt;/li&gt;
&lt;li&gt;2 = QUALIF&lt;/li&gt;
&lt;li&gt;1 = PROD&lt;/li&gt;
&lt;li&gt;0 = non configuré!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ainsi, si le service est en mode heartbeat primaire, il est en mode master lvs, et en mode heartbeat secondaire, il est backup dans le mode lvs.
Pour info, seules les sessions en état &lt;strong&gt;ESTABLISHED&lt;/strong&gt; sont transférées. Les sessions mortes ou non encore actives ne sont pas transmises. De plus, les deux noeuds doivent avoir la syncronisation active en même temps. Les deux peuvent avoir de lancé le backup et le master, ce ci ne pose pas de soucis.&lt;/p&gt;
&lt;p&gt;Puis on les met au démarrage de la machine :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chkconfig --add lvsstate
chkconfig lvsstate on
/etc/init.d/lvsstate start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Une fois ceci réalisé, il est temps d'ajouter ldirectord dans les ressources HeartBeat afin qu'il soit lancer sur le noeud maitre et que le noeud secondaire prenne la main si besoin.&lt;/p&gt;
&lt;p&gt;Dans le fichier &lt;strong&gt;/etc/ha.d/haresources&lt;/strong&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;frontal1 IPaddr::192.168.0.3 ldirectord::www.cf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La règle dans haressources est simple : on lancer de gauche à droite, et on arrète de droite à gauche. 
Donc ici, on montera bien la VIP avant de lancer le load balancing.&lt;/p&gt;
&lt;p&gt;On peux vérifier que c'est bien lancé avec :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipvsadm -L
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Les serveurs réels&lt;/h2&gt;
&lt;p&gt;Nous avons vu dans le post précédent que les serveurs réels dans le cas du mode direct on besoin de la VIP, mais ne doivent pas répondre à l'ARP sur cette VIP. L'astuce ici est de configurer un alias d'interface avec la VIP (ici 192.168.0.3) et de bloquer les requêtes ARP sur cette adresse (car seul le loadbalanceur doit répondre pour cette VIP).&lt;/p&gt;
&lt;p&gt;Il faut monter un alias d'interface en tant que VIP. Nous considérons ici que seule l'interface eth0 est active pour le serveur. Nous allons donc créer l'alias eth0:0. Cependant, il ne faut pas que l'interface réponde à l'ARP, ne serait-ce qu'une seule réponse!&lt;/p&gt;
&lt;p&gt;On demande au noyau de ne pas répondre sur les alias d'interfaces :
Dans le fichier &lt;strong&gt;/etc/sysctl.conf&lt;/strong&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;net.ipv4.conf.lo.arp_ignore = 1
net.ipv4.conf.lo.arp_announce = 2
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.all.arp_announce = 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pour les paramètres:
 &lt;strong&gt;arp_annonce&lt;/strong&gt; : détermine les adresse ip source annoncée dans les requêtes ARP émises.
 * 1 : utilise une IP source qui correspond au sous réseau cible sur une interface primaire ou secondaire/aliasée
 * 2 : seules les interfaces primaires peuvent répondre&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;arp_ignore&lt;/strong&gt; : détermine l'adresse MAC à retourner en réponse ARP
 * 0 : adresse MAC quelconque de la machine
 * 1 : utilise l'ARP seulement si elle est configurée avec l'ip cible de la requête
 * 8 : inhibe l'ARP totalement&lt;/p&gt;
&lt;p&gt;L'alias va être monté sur &lt;strong&gt;lo0&lt;/strong&gt;. Pour cela, il faut créer le fichier &lt;em&gt;/etc/sysconfig/network-scripts/ifcfg-lo:1&lt;/em&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEVICE=lo:1
IPADDR=192.168.0.3
NETMASK=255.255.255.255
NETWORK=192.168.0.0
ONBOOT=yes
ARP=no
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Il faut s'assurer que le programme loadbalancé ouvre bien sur l'ensemble des interfaces son port, ou à défaut au moins sur la VIP.&lt;/p&gt;
&lt;h2&gt;Le Sorry Server&lt;/h2&gt;
&lt;p&gt;Le &lt;strong&gt;Sorry Server&lt;/strong&gt; est en fait un serveur de repli lorsque tous les serveurs réels sont tombés. 
C'est la clause &lt;strong&gt;fallback = 127.0.0.1:80&lt;/strong&gt; du fichier de configuration dans ldirectord.
La situation la plus courante est de le placer directement sur le loadbalanceur afin d'afficher un message comme quoi l'application est en maintenance (on est gentils, on ne va pas dire qu'elle s'est encore plantée...).&lt;/p&gt;
&lt;p&gt;Nous allons donc mettre un Apache minimum sur les frontaux qui ne va servir que pour une page. Il faut éditer le fichier &lt;strong&gt;/etc/httpd/conf/httpd.conf&lt;/strong&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ErrorDocument 404 /error/404.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Puis générer le fichier &lt;em&gt;/var/www/error/404.html &lt;/em&gt;comme souhaité (sympa quoi) puis lier l'index pour être plus propre :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ln -s /var/www/error/404.html /var/www/html/index.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dans le fichier de conf d'apache, on va limiter le nombre de processus. Dans le module &lt;strong&gt;IfModule prefork.c&lt;/strong&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;StartServers 2
MinSpareServers 2
MaxSpareServer 10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Et encore, ces valeurs sont un peu élevées, mais bon.&lt;/p&gt;
&lt;h2&gt;En conclusion&lt;/h2&gt;
&lt;p&gt;Et voila, vous avez entre les mains une solution fonctionnelle et performante pour faire de la répartition de charge hautement disponible. Nous verrons dans un prochain post comment l'administrer et surtout la superviser.&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>La haute disponiblité et la répartition de charge avec HeartBeat/IPVS</title><link href="/la-haute-disponiblite-et-la-repartition-de-charge-avec-heartbeatipvs/" rel="alternate"></link><published>2009-06-30T09:16:59+02:00</published><updated>2009-06-30T09:16:59+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-06-30:/la-haute-disponiblite-et-la-repartition-de-charge-avec-heartbeatipvs/</id><summary type="html">&lt;p&gt;La haute disponiblité et la répartition de charge avec HeartBeat/IPVS&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;&lt;a href="/images/23/LVS-logo.jpg"&gt;&lt;img class="size-full wp-image-70" title="LVS-logo" src="/images/23/LVS-logo.jpg" alt="LVS-logo" width="100" height="100" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Intérêt et problématique&lt;/h2&gt;
&lt;p&gt;Commençons par la problématique : vous avez besoin pour une application  de haute disponibilité et/ou de répartition de charge. Si votre application supporte le fait au les clients arrivent sur tel ou tel serveur (puis restent connectes au même serveur) alors vous pouvez utiliser un système automatiques de répartition des utilisateurs. Là, le choix est vaste.&lt;/p&gt;
&lt;p&gt;Déjà, si l'application possède un tel répartiteur en frontal, il faut l'utiliser. Sinon on peux utiliser des switchs dédiés si vous avez un budget important et surtout des besoins de débits très important (de l'ordre de plusieurs dizaines de Mo/s). En cas de débits moindres, il est possible d'utiliser des solutions logicielles open sources que nous allons étudier ici.&lt;/p&gt;
&lt;h2&gt;Fonctionnement&lt;/h2&gt;
&lt;p&gt;Des solutions logicielles existent, on va en voir : IPVS, le module du noyau Linux dédié a cette tache. La qualité de la pile réseau de Linux n'est plus à démonter, et ce module l'illustre parfaitement. Associé au programme HeartBeat, il permet de bâtir une solution de haute disponibilité et répartition de charge fiable. Ce premier post présente le fonctionnement global. D'autres posts suivront pour présenter la mise en place effective.&lt;/p&gt;
&lt;p&gt;Deux frontaux se partagent (en fail over) une VIP grâce à l'application HeartBeat. Le client va s'adresser à ces frontaux (un seul à la fois, ils sont en fail over). Le frontal maitre va alors décider suivant une table de sessions basées sur les IP sources et du nombre de connexions actives vers quel serveur réels  il va adresser la requête. Le second frontal reçoit régulièrement les nouvelles sessions de l'actif et met à jour sa propre table de session. De cette manière, s'il doit passer actif, les connexions ne seront pas perdues.&lt;/p&gt;
&lt;p&gt;Les règles de répartitions sont les grandes classiques (round robin, serveur le moins chargé en terme de connexions, etc). Le frontal « transfère » la requête, et là deux solutions sont possibles :
&lt;ul&gt;
    &lt;li&gt; la requête est envoyée vers le serveur, puis revient au frontal pour repartir au client. Du Nat en gros. Donc le frontal se prend toute la charge réseau. C'est moyen. On verra un peu plus loin que suivant l'application, ceci peux être loin d'être optimal.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt; la requête est envoyée vers le serveur qui a une interface réseau ayant comme ip la VIP. Le serveur étant poli, il répond en tant que la VIP, directement au client, sans passer par la case frontal. C'est le mode direct. Pour ceux qui ont suivis, OUI, il y aura un problème ARP car plusieurs machines auront la VIP sur le réseau. Mais ce problème à une (plusieurs en fait…) solution (acceptable) que ce soit sur un serveur Windows ou Linux. On les verra par la suite.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;h3&gt;Fonctionnement NAT&lt;/h3&gt;
&lt;p&gt;Voici un schéma simplifié du mode NAT :&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/23/LVS-nat.png"&gt;&lt;img class="size-medium wp-image-76" title="LVS-nat" src="/images/23/LVS-nat.png" alt="LVS-nat" width="241" height="300" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ici les frontaux vont se comporter comme n'importe quel routeur qui fait du NAT. Le principal intérêt est qu'on redirige vers une IP. Les serveurs réels peuvent donc se situer n'importe ou. Une seule restriction cependant : pour que le client voie la réponse provenir le la même IP que celle a laquelle il a parle, il faut que le retour passe par le frontal. Il faut donc que le serveur réel ait comme gateway par défaut le frontal.&lt;/p&gt;
&lt;h3&gt;Fonctionnement direct&lt;/h3&gt;
&lt;p&gt;Voici un schéma simplifié du mode direct:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/23/LVS-direct.png"&gt;&lt;img class="size-medium wp-image-85" title="LVS-direct" src="/images/23/LVS-direct.png" alt="LVS-direct" width="241" height="300" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ça a l'air trivial comme solution, mais il y a un petit soucis : le client doit voir revenir une réponse provenant de la même IP. Vu que la réponse provient du serveur réel, il doit avoir l'IP du service. Mais alors tous les serveurs réels doivent avoir l'IP, cela peux poser des problèmes. En gros, le protocole ARP va poser des petits soucis. Si plusieurs machines ont la même IP sur un réseau, le protocole ARP ne va pas être content : lorsqu'un client va demander à qui est l'IP grâce à une requête ARP, plusieurs résultats vont arriver et le client va être complètement perdu! Il faut qu'une seule machine réponde, celle qui fait l'équilibrage de charge, le frontal.&lt;/p&gt;
&lt;p&gt;La solution est simple : pour envoyer la requête au serveur réel, le frontal va changer l'adresse MAC destination du paquet par l'adresse MAC du  serveur reel. Oui oui, on joue au niveau 2, niveau MAC. Il faut donc que les frontaux aient une patte sur le même sous-réseau que les serveurs réels.&lt;/p&gt;
&lt;p&gt;Voyons donc une version complète du fonctionnement:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/23/LVS-direct-detaille.png"&gt;&lt;img class="size-medium wp-image-86" title="LVS-direct-detaille" src="/images/23/LVS-direct-detaille.png" alt="LVS-direct-detaille" width="244" height="300" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On voit ici que le point principal dans le fonctionnement en mode direct se situe en fait sur les serveurs appli, les vrais serveurs. Il faut monter un alias d'interface avec une IP égale à la VIP qui ne répond pas aux requêtes ARP (point 2 bis du schéma). Ainsi seul le frontal répond aux requêtes ARP. Ceci a été testé avec succès sur des Linux (règle arptables ou configuration du noyau) et sur un Windows 2k (alias sur interface de loopback qui n'a pas le droit de faire de l'ARP :) ).&lt;/p&gt;
&lt;p&gt;Le travail au niveau du frontal est on ne peut plus simple et élégant :
&lt;ul&gt;
    &lt;li&gt; vu qu'il est le seul à répondre à l'ARP sur la VIP, il reçoit le paquet du client&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt; il regarde dedans (niveau IP/TCP) pour voir s'il n'a pas déjà dans sa table des sessions une session correspondante à l'ip du client (pas de dissection du paquet au niveau 7 à ma connaissance dans IPVS, pour un cookie par exemple)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt; il modifie l'adresse de destination MAC (niveau Ethernet donc) pour mettre l'adresse du vrai serveur qui va devoir répondre, et le rebalance sur le réseau. On voit ici qu'il faut que les frontaux et les serveurs réels soient sur le même sous-réseau. Peut importe le nombre de switchs entre, le temps qu'ils sont sur le même sous-réseau, c'est gagné. Il ne modifie pas le paquet IP (donc TTL inchangé, pas de modification couteuse des checksums).&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt; Le paquet arrive donc au serveur, qui l'attrape (normal, c'est son adresse MAC), en tant que VIP (normal, le client parlait à la VIP dans le paquet IP), le serveur est bien élevé, il traite puis répond en tant que VIP à l'IP du client. Il faut bien sur que l'application écoute sur l'interface de la VIP, mais ce n'est généralement pas un problème.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt; Pour le client, il a parlé à la VIP avec une adresse MAC A, la VIP lui répond avec une adresse MAC B, mais il s'en fiche, la couche IP est bonne (numéro de séquence OK), TCP/UDP pareil (numéro de séquence ok). C'est comme si la réponse provenait d'un autre chemin que celui par lequel il est parti, mais ce n'est pas un problème. Les seules modifications se font donc au niveau Ethernet. Merci la séparation des couches.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;h2&gt;En résumé&lt;/h2&gt;
&lt;h3&gt;Les plus&lt;/h3&gt;
&lt;p&gt;&lt;ul&gt;
    &lt;li&gt; Ceci permet d'avoir de la haute dispo + loadbalancing&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt; le frontal ne se prends que les paquets envoyés vers les serveurs. Dans certain cas, ceci permet de diviser la charge réseau. Si on prend le Web par exemple : le client envoie un GET ou un POST de taille raisonnable, et se prend comme réponse les pages wWeb et les images. Le flux qui passe par les frontaux sont donc les requêtes du client, les gros retour (pages et images) passent donc directement du serveur au client, sans repasser par la case frontal. D'expérience, dans ce cas, le frontal ne se prend environ que 10% du flux total applicatif. Ceci permet donc d'augmenter sensiblement la charge que peux supporter cette solution&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt; Les serveurs réels n'ont besoin que d'une modification mineure (leur IP « normale » est toujours accessible bien sûr)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt; la persistance de session se base sur les IP sources, les couches supérieures ne sont pas affectées&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt; C'est supporté par RedHat (fourni dans RH5, mais utilisable dans la 4)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt; Ça fonctionne très bien sur des VM pour les frontaux, et VM ou réels pour les serveurs d'applis&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;h3&gt;Les moins&lt;/h3&gt;
&lt;p&gt;&lt;ul&gt;
    &lt;li&gt;Il faut que les serveurs réels et les frontaux soient sur le même réseau, si on imagine un firewall entre eux, il le faut en mode bridge, mais a priori si firewall il y a, il devrait être placé avant le frontal&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li&gt; Même mineure, la modification des serveurs réels existe&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;h3&gt;Les performances&lt;/h3&gt;
&lt;p&gt;Cette solution est en place sur notre serveur de production (un gros ERP pour plus de 300 utilisateurs). Et ce avec une VM sur une seule carte réseau, et un système non taillé pour faire office de « routeur » (taille des stacks réseaux et cie). Les tests de performances n'ont pas réussi à faire frémir les load balanceurs : les applications sont tombées avant!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: vu qu&amp;#39;il ya prescription je peux l&amp;#39;avouer: j&amp;#39;ai déjà fait tombé un serveur de qualif (pas la prod faut pas être fou) lors d&amp;#39;un test de perf. La petit VM avec
           LVS a tenu sans problème, alors que le gros serveur apache derrière s&amp;#39;est éffondré ^^
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;La réaction face à la perte d'un noeud&lt;/h3&gt;
&lt;p&gt;On a vu qu'il y a deux frontaux. Ils sont en actif-passif. Régulièrement, le frontal maître synchronise sa table de session avec le second noeud. En cas de non réponse du premier nœud, l'esclave prends la main sur la VIP et peux loadbalancer sans perdre de sessions. A ce niveau aucun problème donc.&lt;/p&gt;
&lt;p&gt;Les serveurs applicatifs sont ce qu'ils sont : peu fiables. Il faut donc que le dispositif puisse détecter les pertes de service. IPVS ne permet pas cela nativement. Il ne s'occupe que de la répartition. Pour cela on utilise le logiciel ''ldirector''. Il va surveiller les services qu'on loadbalance, si un service tombe, il va le retirer et faire pointer les clients du service tombe sur les autres serveurs encore en vie. La méthode de vérification de la disponibilité du service est libre, mais généralement on regardera si le port est ouvert tout simplement.&lt;/p&gt;
&lt;p&gt;Dans un prochain post, nous verrons la mise en place effective de cette solution avec la méthode directe qui est la plus recommandée.&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>FunkyPlayList : un script générateur de playlist</title><link href="/funkyplaylist-un-script-generateur-de-playlist/" rel="alternate"></link><published>2009-06-30T08:24:15+02:00</published><updated>2009-06-30T08:24:15+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-06-30:/funkyplaylist-un-script-generateur-de-playlist/</id><summary type="html">&lt;p&gt;FunkyPlayList : un script générateur de playlist&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ce script est parti d'un constat simple: j'avais besoin d'un programme qui me génère mes listes de lectures de mon répertoire de musique.&lt;/p&gt;
&lt;p&gt;La gestion de collection d'Amarok ne me convient pas vraiment : je ne fonctionne pas en fonction des artistes mais seulement en fonction des albums qui contiennent à chaque fois pleins d'artistes différents.&lt;/p&gt;
&lt;p&gt;La "collection" d'Amarok me donne vraiment un gros mix d'albums, chose dont je ne suis pas un grand fan.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: je fonctionne toujours suivant mes répertoires, je ne supporte tjs pas les &amp;quot;collections&amp;quot; et autre mix.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Donc j'ai fait un programme qui parcoure un répertoire, lorsqu'il trouve des musiques (mp3 ou ogg) il créé la liste de lecture avec comme nom le nom du répertoire tout simplement.&lt;/p&gt;
&lt;p&gt;C'est écrit en python, c'est simple (normal, c'est du Python...) et efficace. Il est dispo sur mon github :) &lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Pyndsgest : gérer vos jeux NDS facilement</title><link href="/pyndsgest-gerer-vos-jeux-nds-facilement/" rel="alternate"></link><published>2009-06-30T08:21:10+02:00</published><updated>2009-06-30T08:21:10+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-06-30:/pyndsgest-gerer-vos-jeux-nds-facilement/</id><summary type="html">&lt;p&gt;Pyndsgest : gérer vos jeux NDS facilement&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Pyndsgest est un modeste petit programme en Python/QT4 qui permet de gérer sa collection NDS.&lt;/p&gt;
&lt;p&gt;Il distribué est en licence GPLv2, donc vous pouvez faire ce que vous voulez avec le temps que cela reste libre :)&lt;/p&gt;
&lt;p&gt;Il permet de lister les sauvegardes de jeux que vous posséder. La liste utilisée est celle de &lt;a href="http://www.advanscene.com/"&gt; advanscene&lt;/a&gt; que je remercie chaleureusement. &lt;/p&gt;
&lt;p&gt;Ce programme permet aussi d'envoyer en un seul clic le jeu sur votre carte (DS-X ou M3 par exemple).&lt;/p&gt;
&lt;p&gt;Il permet au passage de gagner de l'espace car "trim" à la volée les données.&lt;/p&gt;
&lt;p&gt;Les jeux peuvent être notées. 
De cette manière, n'apparaissent que ceux qui vous intéressent (qui veux d'un jeu en coréen? Non, vraiment ;) ).&lt;/p&gt;
&lt;p&gt;Le programme utilise les librairies python &lt;a href="http://linux.duke.edu/projects/urlgrabber/"&gt;URLGrabber&lt;/a&gt; et &lt;a href="http://www.joachim-bauch.de/projects/python/pylzma/"&gt;pylzma&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Elles ne sont pas obligatoires, mais conseillées. 
 * La première permet d'utiliser un proxy
 * la seconde de lire les archives 7z&lt;/p&gt;
&lt;p&gt;Pour finir, une petite capture du programme :&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/24/PyNDSGestCapture1.png"&gt;&lt;img class="size-medium wp-image-50" title="PyNDSGest 0.6" src="/images/24/PyNDSGestCapture1.png" alt="PyNDSGest 0.6"  /&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>UberLogger</title><link href="/uberlogger/" rel="alternate"></link><published>2009-06-29T13:06:14+02:00</published><updated>2009-06-29T13:06:14+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-06-29:/uberlogger/</id><summary type="html">&lt;p&gt;UberLogger&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;UberLogger est un programme de capture d'appels systèmes entrant dans le cadre des systèmes de honeypots.&lt;/p&gt;
&lt;p&gt;Dans l’étude des grands prédateurs du monde animal, deux méthodes existent : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;soit le naturaliste se déplace sur le lieu de vie de l’animal &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;soit il recrée ce lieu de vie dans une réserve naturelle et analyse sans risque ses habitudes et ses méthodes de chasse. &lt;/p&gt;
&lt;p&gt;NOTE 2021: j'ai toujours été un grand fan de cette comparaison, qui avait fait l'ouverture de notre conf au SSTIC 2005 :)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dans le domaine de la lutte informatique défensive, ces deux approches sont également valables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Soit les scientifiques vont sur le terrain des pirates&lt;/li&gt;
&lt;li&gt;soit ils recréent des conditions propices à la «vie » des pirates dans un environnement sécurisé dans le but de les étudier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cette deuxième approche peut se résumer simplement : les pots à miel (« honeypot »)  :chinese: . &lt;/p&gt;
&lt;p&gt;Le dispositif permet de créer un système de « honeypots » utilisant les particularités des plates-formes, comme par exemple UML. 
Ce dispositif peut également entrer dans le cadre du « forensics » permettant de déterminer ainsi si une machine a été compromise et est encore utilisée par un pirate, ou bien dans celui d’une machine « sandbox » permettant de tester des programmes non sûrs.&lt;/p&gt;
&lt;p&gt;L'article présenté ici est le paper que nous avons présenté au &lt;strong&gt;SSTIC 05&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: cette présentation au SSTIC reste un grand souvenir de ma carière
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Plus d'informations suivront comme sa mise en place et des exemples de fonctionnement. 
Le paper d'origine est disponible sur le site du SSTIC : &lt;a href="http://actes.sstic.org/SSTIC05/UbberLogger/SSTIC05-article-Gabes_Alberdi_LeJamtel-UbberLogger.pdf"&gt;paper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Le projet n'est actuellement plus développé, mais si certains sont intéressé pour le reprendre, ils peuvent, il est disponible sur github :)&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Mon blog</title><link href="/mon-blog/" rel="alternate"></link><published>2009-06-22T19:17:33+02:00</published><updated>2009-06-22T19:17:33+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-06-22:/mon-blog/</id><summary type="html">&lt;p&gt;Mon blog&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Bonjour,&lt;/p&gt;
&lt;p&gt;Vous êtes sur le blog de Gabès Jean, administrateur système chez Lectra, Cestas (33). 
Je suis un grand passionné (certains diront geek, ils n'auraient pas totalement tord) d'informatique, et surtout ce qui concerne l'administration et la supervision avec des logiciels libres. &lt;/p&gt;
&lt;p&gt;Sur ce site vous trouverez ce que j'ai apris au fils du temps et que je souhaite faire partager.&lt;/p&gt;
&lt;p&gt;Mes grandes spécialités sont les architectures distribuées hautement disponible et l'outil de supervision Nagios.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: ça c&amp;#39;était en 2009, le fond n&amp;#39;a pas changé, juste quelques lignes de + sur mon CV :)
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Ouverture de mon blog</title><link href="/ouverture-de-mon-blog/" rel="alternate"></link><published>2009-06-22T19:17:33+02:00</published><updated>2009-06-22T19:17:33+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2009-06-22:/ouverture-de-mon-blog/</id><summary type="html">&lt;p&gt;Ouverture de mon blog&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Ca y est, le blog est ouvert. Sur ce dernier, je vais présenter un peu ce que je fais, ce que j'ai développé et ce que j'ai appris en matière de supervision ou d'administration open source.&lt;/p&gt;
&lt;p&gt;Vous ne trouverez pas ici de description sur des supers outils dont les sources ne sont pas disponibles.
Pas que je les trouve totalement inutiles et dépasser, mais bien que je préfère me consacrer aux outils auquels je peux faire pleinement confiance et améliorer s'ils ne me conviennent pas.&lt;/p&gt;
&lt;p&gt;Le choix du moteur de blog en est une bonne illustration : Wordpress est un projet open source de qualité qui suporte un nombre impressionnant de blog de par le monde.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: wordpress -&amp;gt; pelican, un CRM complet pour un blog, c&amp;#39;était overkill ^^
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Je posterai de temps en temps des tutos sur des actions utiles pour les administrateurs comme comment superviser des systèmes avec Nagios ou bien monter une architecture distribuée et hautement disponible avec HeartBeat/IPVS.&lt;/p&gt;
&lt;p&gt;Je parlerai également des quelques programmes que je développe ou que j'ai développé par le passé. &lt;/p&gt;
&lt;p&gt;On remarque par exemple pyndsgest qui permet de gérer ses jeux NDS et Shinken qui est une réimplémentation de Nagios en python ayant pour objectif de valider des propositions d'architectures et d'algorithmes pour Nagios.&lt;/p&gt;
&lt;p&gt;Le bal est ouvert.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: mes connaissances du monde économique a changé ma vue sur les outils non-opensource. Je suis persuadé que s&amp;#39;il y avait un fort soutient public sur l&amp;#39;open source 
           avec de vrais financements, ça serait un modèle généralisable.
           SPOILER: en 2021 c&amp;#39;est pas encore ça ^^

           Par contre si je comprends les outils propriétaires et leur utilité, je n&amp;#39;ai toujours pas envie d&amp;#39;en parler sur mon temps libre :)
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Un petit point sur l'auteur</title><link href="/un-petit-point-sur-lauteur/" rel="alternate"></link><published>2005-06-24T10:00:14+02:00</published><updated>2005-06-24T10:00:14+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2005-06-24:/un-petit-point-sur-lauteur/</id><summary type="html">&lt;p&gt;Un petit point sur l'auteur&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: post de 2005 ^^
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Je suis plus particulièrement en stage de fin d'étude après mon cursus scolaire à l'&lt;a href="http://www.enseirb.fr" hreflang="fr"&gt;ENSEIRB&lt;/a&gt; en filière informatique, spécialisation réseaux et systèmes répartis (un descriptif des sujets abordés dans cette option est disponible &lt;a href="http://www.enseirb.fr/~vincent/RSR/description.html" hreflang="fr"&gt;ici&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Mon stage se déroule au sein de la société SNECMA (Bordeaux), mon sujet et l'étude et la mise en place d'un serveur de supervision (si le terme Nagios vous dit quelque chose, moi j'en suis en plein dedans :) ).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: comme quoi ce stage a vachement influencé ma carrière. Merci à mon maitre de stage de l&amp;#39;époque!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Etudiant modèle -... enfin presque, en tout cas j'ai de très bons résultats :) -, j'ai intégré cette école après deux ans de prépas  (option MP) au Lycée Chaptal, Paris XIII.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: en même temps j&amp;#39;avais pas les moyens de payer les frais de 3 ans de prépas, donc bah 2ans j&amp;#39;avais pas le choix :p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;J'ai participé au projet &lt;a href="uberlogger.rstack.org" hreflang="fr"&gt;UberLogger&lt;/a&gt; pendant ma troisième année. 
Ce projet consiste en la réalisation d'un dispositif de honeypot (pôt à miel). Un tel dispositif permet de mettre en place une machine "sonde" qui est destinée a se faire compromettre par un pirate. &lt;/p&gt;
&lt;p&gt;Toutes les activités du pirate sont enregistrées sans que celui-ci ne puisse le voir et l'on peut ainsi savoir quelles sont les intentions de l'attaquant et obtenir les outils qu'il a utilisé. &lt;/p&gt;
&lt;p&gt;Ce projet est sorti du cadre scolaire et est disponible en tant que projet Open Source. Il est toujours en activité et a été présenté à la conférence &lt;a href="http://www.sstic.org/SSTIC05/" hreflang="fr"&gt;SSTIC&lt;/a&gt; en Juin 2005.&lt;/p&gt;
&lt;p&gt;Ce site va me permettre de partager la (modèste) connaissance que j'ai acquis sur les nouvelles technologies (Wifi,  supervision, réseaux sécurisés,..) ou que des élèves de l'option RSR de l'ENSEIRB ont étudiés pour que d'autres puissent avoir une idée claire et précise de celles-ci sans avoir besoin de foncer tête baissé dans les RFC ;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOTE 2021: tout ça était dans un wiki qui ne tourne plus, un jour j&amp;#39;aurais peu être le courage de le remonter ^^
&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category></entry><entry><title>Ouverture</title><link href="/ouverture/" rel="alternate"></link><published>2005-06-21T19:18:52+02:00</published><updated>2005-06-21T19:18:52+02:00</updated><author><name>Gabès Jean</name></author><id>tag:None,2005-06-21:/ouverture/</id><summary type="html">&lt;p&gt;Ouverture du blog&lt;/p&gt;</summary><content type="html">&lt;!-- relu --&gt;

&lt;p&gt;Par exemple les sujets que j'ai vu lors de mon cursus scolaire et qui pourrait aider certains qui seront confronté au même problèmes, ainsi que des informations sur les sujets que j'ai vu lors de mes stages comme la conception de honeypots ou bien le choix et la mise en place d'outils de supervision.  :yes: &lt;/p&gt;
&lt;p&gt;J'espère que ce blog aidera le maximum de personnes.&lt;/p&gt;</content><category term="blog"></category></entry></feed>