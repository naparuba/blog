<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Serveurs + code = ༼ つ ͡◕ Ѿ ͡◕ ༽つ - Jean Gabès</title><link href="/" rel="alternate"></link><link href="/feeds/jean-gabes.atom.xml" rel="self"></link><id>/</id><updated>2023-05-12T10:20:00+02:00</updated><entry><title>Python: pourquoi je ne suis pas un fan des @property</title><link href="/python-property/" rel="alternate"></link><published>2023-05-12T10:20:00+02:00</published><updated>2023-05-12T10:20:00+02:00</updated><author><name>Jean Gabès</name></author><id>tag:None,2023-05-12:/python-property/</id><summary type="html">&lt;p&gt;Après quasi 15ans de Python, je ne vois toujours d'intérêt légitime au @property. Voici pourquoi.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;center&gt;&lt;img src='/images/78/article.jpg'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h1&gt;Les @property: des getter/setter à pas chers&lt;/h1&gt;
&lt;p&gt;Pour les développeurs, les getter et setters sont bien connus. Quand on a un objet, on protège sépare bien son utilisation de son implémentation.&lt;/p&gt;
&lt;p&gt;On doit être capable de changer tout ce que l'on souhaite dans l'implémentation sans changer l'utilisation d'un objet. &lt;/p&gt;
&lt;p&gt;Sans ce principe fondateur, vous pouvez mettre à la poubelle toute idée de maintenance de votre code/librairie.&lt;/p&gt;
&lt;p&gt;Python étant également un langage objet, il a évidement respecté ce principe. On peut avoir des getter/setter avec ses classes.&lt;/p&gt;
&lt;p&gt;Je passe leur définition, c'est par définition assez trivial.&lt;/p&gt;
&lt;p&gt;Par contre, il a également une autre manière de faire en Python (déjà on s'éloigne du &lt;code&gt;There should be one-- and preferably only one --obvious way to do it.&lt;/code&gt; du &lt;a href="zen of Python"&gt;https://peps.python.org/pep-0020/&lt;/a&gt;): l'annotation &lt;code&gt;@property&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/reading.gif'&gt;&lt;/center&gt; &lt;/p&gt;
&lt;p&gt;Son principe est assez simple: on va relier une méthode à un nom de propriété classique. Voici ce que ça donne sur un exemple simple, développé par un premier développeur, &lt;code&gt;Jean&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Human:&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;birthday&lt;/span&gt;):
        &lt;span class="nb"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;_name&lt;/span&gt; = &lt;span class="nb"&gt;name&lt;/span&gt;
        &lt;span class="nb"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;_age&lt;/span&gt; = &lt;span class="n"&gt;birthday&lt;/span&gt; - &lt;span class="nb"&gt;now&lt;/span&gt;()  &lt;span class="c1"&gt;# simplifié pour l&amp;#39;exemple&lt;/span&gt;

    &lt;span class="nv"&gt;@property&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;(&lt;span class="nb"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;_name&lt;/span&gt;

   &lt;span class="nv"&gt;@age&lt;/span&gt;.&lt;span class="n"&gt;setter&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;(&lt;span class="nb"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;):
        &lt;span class="nb"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;_name&lt;/span&gt; = &lt;span class="nb"&gt;value&lt;/span&gt;


    &lt;span class="nv"&gt;@property&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;(&lt;span class="nb"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;_age&lt;/span&gt;

   &lt;span class="nv"&gt;@age&lt;/span&gt;.&lt;span class="n"&gt;setter&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;(&lt;span class="nb"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;):
        &lt;span class="nb"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;_age&lt;/span&gt; = &lt;span class="nb"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On accède alors aux propriétés de manière "transparente" (lol, carrément pas) de la manière suivante:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;h = Human(&amp;#39;jean&amp;#39;, &amp;#39;1982/12/13&amp;#39;)&lt;/span&gt;
&lt;span class="err"&gt;print(&amp;#39;%s is %d&amp;#39; % (h.name, h.age))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Joli? Oui. Trompeur? Oh que oui aussi. Car si on ne regarde que le code d'un point de vue utilisateur, on pense que name et age ne sont que des propriétés simples, sans coût spécial à l'appel, juste une string et un int, gratuit en gros.&lt;/p&gt;
&lt;p&gt;Or non, cette impression peut être totalement fausse et donner des résultats qui vont être trompeurs.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/outch 2.gif'&gt;&lt;/center&gt; &lt;/p&gt;
&lt;h1&gt;Quand les @property mentent&lt;/h1&gt;
&lt;p&gt;Les &lt;code&gt;@property&lt;/code&gt; ne sont que des appels à des méthodes. Juste que la syntaxe nous a caché ça. Rien de plus.&lt;/p&gt;
&lt;p&gt;Revenons un peu à notre exemple. Imaginons que nous avons un nouveau développeur, nommé &lt;code&gt;William&lt;/code&gt;, qui a besoin de faire une moyenne sur beaucoup de personnes, genre 100_000. &lt;code&gt;William&lt;/code&gt; va procéder ainsi:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;# en supposant qu&amp;#39;il y en a au moins un évidement&lt;/span&gt;
&lt;span class="err"&gt;moyenne = sum([human.age for human in lot_of_humans]) / len(lot_of_humans)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;D'après son interface, &lt;code&gt;William&lt;/code&gt; s'attend à ce que le temps du calcul soit très rapide, c'est une bête somme d'entier après tout. Il ne connait pas les détails &lt;code&gt;internes&lt;/code&gt; de Human, car il l'utilise, on a pas à savoir &lt;code&gt;comment&lt;/code&gt; il est fait.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/pasfaux.png'&gt;&lt;/center&gt; &lt;/p&gt;
&lt;h2&gt;Un autre développeur corrige le bug de Human dans son coin&lt;/h2&gt;
&lt;p&gt;Mais maintenant un autre développeur, nommée &lt;code&gt;Amy&lt;/code&gt;, corrige le bug de la classe Human sur son &lt;code&gt;self._age = birthday - now()&lt;/code&gt; car c'est peut-être vrai au moment de l'instanciation de l'objet
mais il suffit d'attendre un ou deux jours pour avoir des cas où l'anniversaire est passé pour avoir un autre âge. &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/bug.jpg'&gt;&lt;/center&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Amy&lt;/code&gt; va donc déplacer le calcul à chaque fois qu'on demande l'age:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;note&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;simplifié&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;@property&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_birthday&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;@age&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setter&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_birthday&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ok, c'est fixé de manière simple. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Amy&lt;/code&gt; aurait pu rajouter un cache, ou avoir un calcul une fois par jour, mais ça demande que le démon ait un ordonnancement et cie, et un cache demande de le vider de temps en temps. Ce fix a le mérite d'être fonctionnel, et elle n'a pas plus de temps à y passer de toute manière.&lt;/p&gt;
&lt;h2&gt;Le premier développeur voit ses tests de performances s'éffondrer&lt;/h2&gt;
&lt;p&gt;Revenons à notre développeur &lt;code&gt;William&lt;/code&gt; qui devait calculer sa moyenne. &lt;/p&gt;
&lt;p&gt;C'est une grosse équipe, il n'est pas au courant de tous les détails des fix des autres développeurs. &lt;/p&gt;
&lt;p&gt;Par contre, on lui avait demandé de s'engager sur les performances de son calcul de moyenne.
Confiant dans le calcul de &lt;code&gt;sum()&lt;/code&gt; sur de simples entiers, il avait mis un test de performance avec très peu de marge sur son calcul.&lt;/p&gt;
&lt;p&gt;Problème, les calculs de date sont très, &lt;strong&gt;très&lt;/strong&gt;, couteux, peu importe le language. &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/sad (2).gif'&gt;&lt;/center&gt; &lt;/p&gt;
&lt;p&gt;Python ne fait pas exception. Et ici, là où il pensait naivement avoir affaire à des entiers, il a désormais dans sa boucle N fois un gros calcul de temps. D'où ses problèmes de performances. &lt;/p&gt;
&lt;p&gt;Un accès direct à un entier, c'est peu cher (enfin avec Python, disons que c'est moyennement cher), mais là avec un calcul de date, c'est la mort.&lt;/p&gt;
&lt;h2&gt;Qui s'est raté alors?&lt;/h2&gt;
&lt;p&gt;A qui la faute? &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Amy&lt;/code&gt; a corrigé aussi bien qu'elle a pu dans le temps imparti un bug important&lt;/li&gt;
&lt;li&gt;&lt;code&gt;William&lt;/code&gt; a pris un &lt;code&gt;human.age&lt;/code&gt; affiché comme un entier pour... bah un entier. Je ne vois pas comment lui en vouloir.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Non. Je pense que la faute revient à &lt;code&gt;Jean&lt;/code&gt;, qui a défini l'interface de Human. &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/stess (2).jpg'&gt;&lt;/center&gt; &lt;/p&gt;
&lt;p&gt;Je peux tout à fait pardonner à &lt;code&gt;William&lt;/code&gt; d'avoir fait la faute sur &lt;code&gt;human.age&lt;/code&gt;, car j'aurais fait la même.&lt;/p&gt;
&lt;p&gt;On ne s'attend pas à avoir un appel de méthode ici, et encore moins un appel couteux.&lt;/p&gt;
&lt;p&gt;Par contre, si on avait un appel du genre &lt;code&gt;human.get_age()&lt;/code&gt; on fait un peu plus attention. La supposition de "on récupère juste un entier quasi gratuitement" ne tient plus, et on est tenté d'aller voir ce qu'il y a dans le get_age(), ou à minima de la sortir de sa boucle, et le timer à part.&lt;/p&gt;
&lt;h2&gt;Les @property, un piège&lt;/h2&gt;
&lt;p&gt;Et c'est bien ça que je reproche au &lt;code&gt;@property&lt;/code&gt;. C'est pratique sur le papier, mais c'est piégeux.&lt;/p&gt;
&lt;p&gt;On va faire de fausses suppositions sur des propriétés alors qu'en fait le calcul peut être bien plus important, voir accéder à un cache avec tous les problèmes que ça demande, les accès concurrents (moins un souci si on fait que du read sur un entier), etc.&lt;/p&gt;
&lt;p&gt;Oh, bien sûr, on peut me répondre: "c'est au développeur qui l'utilise de faire attention"&lt;/p&gt;
&lt;p&gt;Mais non je ne suis pas d'accord. Il doit déjà faire attention à son propre code, alors réussir à deviner toutes les suppositions du code des autres, ça commence à faire beaucoup si on lui mets des peaux de bananes sous les pieds.&lt;/p&gt;
&lt;h2&gt;Le vrai usage des @property : ratraper un cas foireux&lt;/h2&gt;
&lt;p&gt;Pour moi les &lt;code&gt;@property&lt;/code&gt; sont un moyen de ratraper le code d'une interface qui a été mauvaise dès le début: on avait donné l'accès à une de ses propriétés internes, et on s'aperçoit qu'il n'aurait pas fallu. &lt;/p&gt;
&lt;p&gt;On tente alors de catcher les appels "à l'arrache" sans avoir à changer son interface d'appels de la part de ses clients.&lt;/p&gt;
&lt;p&gt;Mais c'est donc une solution à un problème qui n'aurait pas dû se poser dès le départ. Sauf si tu es une classe "friend" comme en C++, tu n'as pas à accéder à mes propriétés en direct, que j'ai mis un _ au début ou pas (ou alors tu peux planter, ça sera ta faute si je change une ligne &lt;code&gt;(⌐■_■)–︻╦╤─ – – – (╥﹏╥)&lt;/code&gt; ).&lt;/p&gt;
&lt;p&gt;Au moins les getter/setter, tu ne feras pas de suppositions de performance ou accès concurrents. On fait naturellement attention dans ces cas-là.&lt;/p&gt;
&lt;p&gt;Les @property c'est l'opposé de ma philosophie de développement. C'est "too much" et ça donne une fausse idée de simplicité. &lt;/p&gt;
&lt;p&gt;Je préfère largement quand la simplicité est véridique &lt;code&gt;༼ つ ͡◕ Ѿ ͡◕ ༽つ&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/café.gif'&gt;&lt;/center&gt; &lt;/p&gt;</content><category term="python"></category><category term="philosophie"></category><category term="maintenance"></category></entry><entry><title>Python: donner un vrai nom à vos process</title><link href="/python-setproctitle/" rel="alternate"></link><published>2023-04-28T10:20:00+02:00</published><updated>2023-04-28T10:20:00+02:00</updated><author><name>Jean Gabès</name></author><id>tag:None,2023-04-28:/python-setproctitle/</id><summary type="html">&lt;p&gt;Quand un admin doit voir ce qui tourne sur un serveur, avoir un vrai nom de process au lieu de juste "python" est quand même plus pratique&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;center&gt;&lt;img src='/images/77/article.jpg'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h1&gt;Quand on doit intervernir sur un serveur un peu inconnu&lt;/h1&gt;
&lt;p&gt;Il est 3h du mat, vous êtes encore mal réveillé (tu m'étonnes...), vous arrivez non sans mal à vous connecter sur le serveur de votre client malgrés les &lt;code&gt;36&lt;/code&gt; niveaux de redirections mis en place. &lt;/p&gt;
&lt;p&gt;La supervision est bien sûr aux abonnées absentes, et se limit à dire que l'application ne répond qu'une fois sur 2. Elle vous remonte également que le serveur a une grosse charge bie anormale.&lt;/p&gt;
&lt;p&gt;Ok, vous avez déjà des pistes à explorer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;la plateforme physique a un problème (genre RAID qui se dit que 3h du mat c'est un bon moment pour reconstruire un disque)&lt;/li&gt;
&lt;li&gt;soit c'est une VM qui se fait canibaliser son temps (ça arrive bien plus souvent qu'on pense, surtout chez les hébergeurs "cloud")&lt;/li&gt;
&lt;li&gt;soit une application sur le serveur est parti en vrille et bouffe toutes les ressources&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Une fois sur la machine, premier réflexe:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;df -h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(un grand classique celui là aussi...), mais non, l'espace disque est OK sur tous les volumes. Le client a tout mis sur &lt;code&gt;/&lt;/code&gt;, simple, mais il aime le risque quand même.&lt;/p&gt;
&lt;p&gt;On peut donc se concentrer sur un ralentissement. On lance donc un petit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt; iostat -kx 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Et là non, les disques ne sont pas solicités plus que ça, 20% max, ça va, on est large. On ne doit pas swapper non plus, on peux donc éliminer les problèmes de surconsommation RAM, dommage, c'est simple à régler au moins.&lt;/p&gt;
&lt;p&gt;On passe donc côté CPU:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt; top&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Petit tri sur &lt;code&gt;M&lt;/code&gt; pour avoir le tri sur la mémoire, mais en effet, point de gros processus à l'horizon, c'est confirmé.&lt;/p&gt;
&lt;p&gt;Par contre, le tri par CPU montre un processus Python à 100% de CPU. Sur une machine mono CPU, ceci explique pourquoi notre démon n'a plus de quoi répondre.
&lt;center&gt;&lt;img src='/images/77/1.jpg'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/cassé 3.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Par contre, juste &lt;code&gt;python&lt;/code&gt; ça ne va pas nous aider. On met l'affichage des arguments pour voir le nom des scripts, et là encore ça ne nous aide pas. &lt;/p&gt;
&lt;p&gt;Pas de responsable côté client sous la main pour savoir à quoi ils servent, et donc si on peut les tuer.
&lt;center&gt;&lt;img src='/images/77/2.jpg'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Si leur nom avait été plus clair, genre &lt;code&gt;ERP: /tmp cleaner&lt;/code&gt; là ça aurait aidé, on sait qu'on aurait pu les tuer vu qu'on était large sur l'espace disque, ou au moins les nicer sans pitié.&lt;/p&gt;
&lt;p&gt;Là bien obligé de les nicer, mais sans trop savoir si c'est grave ou pas.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/hache 3.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h1&gt;Niveau novice: donner un nom à votre processus, c'est facile et rapide&lt;/h1&gt;
&lt;p&gt;Bref, si quand on développe un code, son rôle est clair et limpide (ou alors vou aurez du mal à le développer de toute manière &lt;code&gt;^^'&lt;/code&gt;), mais pensez que ceux qui vont repasser derrière après 5 ou 10ans vont également
avoir besoin de savoir ce que ça fait dans les grandes lignes.&lt;/p&gt;
&lt;p&gt;Si les autres développeurs vont avoir droit aux commentaires, les administrateurs eux ne vont avoir qu'une et une seule chose pour se faire un avis rapidement: le nom du processus. &lt;/p&gt;
&lt;p&gt;Et si vous ne faites rien, ça sera juste "python", on a déjà vu plus utile, il faut bien le reconnaitre.&lt;/p&gt;
&lt;p&gt;C'est pourquoi je vous recommande de passer par un petit renommage de processus quand vous pouvez. La mise en place est triviale: c'est le paquet &lt;code&gt;setproctitle&lt;/code&gt;. Trouvable sur &lt;a href="https://pypi.org/project/setproctitle/"&gt;Pypi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Son appel est très simple également, et il s'occupe de toutes les petites bidouilles systèmes pour ça (car oui, c'est loin d'être si simple d'un point de vue système en fait, merci le poid de l'histoire du noyau Linux ici).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;setproctitle&lt;/span&gt;
 &lt;span class="n"&gt;setproctitle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setproctitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ERP: /tmp cleaner&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hop, finito. Même pas besoin d'être root pour le faire, vous pouvez y aller serein.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/77/3.jpg'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/hero.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h1&gt;Niveau intermédiaire: donner un nom à vos processus fils également&lt;/h1&gt;
&lt;p&gt;Maintenant que vous mettez tous vos démons avec un nom de processus, les administrateurs vous aime bien, et vous autorise même à avoir des clés sur les serveurs (pas le compte root, faut pas déconner quand même).&lt;/p&gt;
&lt;p&gt;Cas qui peut arriver si vous travaillez avec un énorme volume de données et Python, c'est l'utilisation de la libairie &lt;code&gt;multiprocessing&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Une autre fois, j'expliquerai à quel point je la &lt;code&gt;déteste&lt;/code&gt;, mais ce n'est pas le sujet aujourd'hui.&lt;/p&gt;
&lt;p&gt;Multiprocessing permet de s'affranchir de LA plus grosse limite de Python à mon sens: il ne sait utiliser qu'&lt;code&gt;un seul CPU&lt;/code&gt; (oui oui, même en &lt;code&gt;async&lt;/code&gt;, il n'y a aucune magie) à l'heure actuelle. &lt;/p&gt;
&lt;p&gt;Bon ça fait 10ans qu'on parle de faire sauter la limitation, donc je pense que ce sera encore le cas très longtemps après la sortie de cet article.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/wait 3.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Multiprocessing permet de lancer des sous-processus, des &lt;code&gt;workers&lt;/code&gt;, qui vont travailler sur une partie de vos données. &lt;/p&gt;
&lt;p&gt;Si on met de côté tous ses bugs (lol, bon courage pour ne pas tomber dedans), c'est un moyen simple d'améliorer sensiblement ses performances.&lt;/p&gt;
&lt;p&gt;Par contre, vos processus workers vont tous avoir le même nom, celui de votre processus principal. Pas très pratique:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ni pour le développeur qui doit débugger dans un worker particulier&lt;/li&gt;
&lt;li&gt;encore moins pour l'administrateur qui se retrouve avec pleins de fois le même processus, mais chacun avec des rôles différents &lt;code&gt;^^'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vous pouvez donc donner un nom au sous-processus. Il suffit de remettre un autre nom via &lt;code&gt;setproctitle&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Astuce: pensez à garder une référence aux processus principal, si on n'affiche que le nom du processus fils, il faut encore être capable de savoir à quelle application il se réfère.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/77/4.jpg'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h1&gt;Niveau master: maintenir à jour sur le traitement actuel&lt;/h1&gt;
&lt;p&gt;Dernière astuce si vous en avez la possibilité, c'est de donner directement depuis le nom du processus l'avancement d'un traitement, ou son état de chargement par exemple. &lt;/p&gt;
&lt;p&gt;C'est très raffiné, je trouve, et mine de rien bien pratique pour suivre un traitement directement avec un top.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/77/5.jpg'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/beautiful.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h1&gt;Petit détail, grande classe&lt;/h1&gt;
&lt;p&gt;Ce petit détail pour les développeurs est d'une grande aide pour l'administration. &lt;/p&gt;
&lt;p&gt;Pour m'être retrouvé à revenir sur un programme qui n'avait pas le nommage des processus alors que j'y étais habitué, j'ai perdu beaucoup de temps lors des phases de debug. C'est quelque chose de tout bête, mais qui aide grandement quand on debug, et où le temps est précieux, genre à &lt;code&gt;3h&lt;/code&gt; du mat... &lt;code&gt;:D&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/decouverte.gif'&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="python"></category><category term="debug"></category><category term="admin"></category></entry><entry><title>Python: la différence entre copy et deepcopy</title><link href="/python-copy/" rel="alternate"></link><published>2023-04-14T10:20:00+02:00</published><updated>2023-04-14T10:20:00+02:00</updated><author><name>Jean Gabès</name></author><id>tag:None,2023-04-14:/python-copy/</id><summary type="html">&lt;p&gt;En Python, quand on souhaite copier un conteneur, on a le choix entre copy et deepcopy.&lt;br/&gt;Se tromper entre les deux est c'est le bug assuré. Voyons pourquoi.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;center&gt;&lt;img src='/images/76/article.png'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h1&gt;Les conteneurs en Python&lt;/h1&gt;
&lt;p&gt;S'il y a bien deux éléments que je trouve structurant dans un langage de programmation, ce sont autant sa grammaire que ses conteneurs standards.&lt;/p&gt;
&lt;p&gt;Ces derniers sont importants, car ils représentent le plus gros des troupes de ce que l'on va utiliser au jour le jour. Une absence de liste dynamique par défaut sera très, très handicapante, et on va se retrouver à prendre une bibliothèque tierce pour ça.&lt;/p&gt;
&lt;p&gt;Sauf que d'autres bibliothèques/projets auront fait un autre choix et pris une autre bibliothèque, avec sa phase d'apprentissage qui va avec (et ses bugs ?). Ce n'est pas pour rien que les langages de maintenant sont équipés dès le départ de conteneurs standards :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;liste à taille fixe ou dynamique&lt;/li&gt;
&lt;li&gt;tableau de hash, dictionnaire, map, appelez ça comme vous voulez&lt;/li&gt;
&lt;li&gt;struct et/ou objet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Contrairement aux types natifs simples comme les int ou les float, les conteneurs peuvent être modifiés, et ne sont donc pas à utiliser à la légère. Que ce soit lorsqu'on les passe à une fonction/méthode, qu'on tente d'y accéder depuis des threads ou même qu'on vive avec au fil de son programme linéairement.&lt;/p&gt;
&lt;h1&gt;Parfois, il faut faire une copie&lt;/h1&gt;
&lt;p&gt;Le piège le plus simple des conteneurs vient de la copie. On peut avoir besoin d'une simple copie pour donner une liste à un autre élément qui va avoir besoin de faire un tri différent, tri qui pourrait être "in place", et donc impacter celui qui a gentiment fourni la liste!&lt;/p&gt;
&lt;p&gt;Parfois on n'a pas trop confiance dans cet "autre" élément, comme si c'est un module tiers qui est chargé par l'utilisateur, et qu'on lui donne des données auxquelles on tient (ordre compris).&lt;/p&gt;
&lt;p&gt;Bref, parfois, on souhaite juste copier sa liste/dict. En Python, le module copy est là pour ça. On a deux méthodes qui nous intéressent, et qu'il est primordial de connaître avant d'en utiliser une ou l'autre :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copy&lt;/li&gt;
&lt;li&gt;deepcopy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/maybe.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h1&gt;copy et deepcopy&lt;/h1&gt;
&lt;h2&gt;Le principe de copy&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;copy.copy&lt;/code&gt; est la plus simple, mais pas forcément la moins traitre au jour le jour.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;copy()&lt;/code&gt; va uniquement copier le conteneur, &lt;code&gt;mais pas son contenu&lt;/code&gt;. Ce dernier point est très important. Ceci signifie que si on a:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;a = [3, 2, 1]&lt;/span&gt;
&lt;span class="err"&gt;b = copy.copy(a)&lt;/span&gt;
&lt;span class="err"&gt;b.sort()&lt;/span&gt;
&lt;span class="err"&gt;print(&amp;#39;a =&amp;gt; %s&amp;#39; % a)&lt;/span&gt;
&lt;span class="err"&gt;print(&amp;#39;b =&amp;gt; %s&amp;#39; % b)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Donne:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;a =&amp;gt; [3, 2, 1]&lt;/span&gt;
&lt;span class="err"&gt;b =&amp;gt; [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Par contre, attention, ici c'était le cas simple, on a des objets immuables dans nos listes, de simples int.
Dans la vie de tous les jours, on aura une liste de dict ou d'instances par exemple.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/pointers.jpg'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Et là, attention, car on a vu que &lt;code&gt;copy()&lt;/code&gt; ne touche qu'au conteneur, pas au contenant. Donc ici la copie aura des pointeurs vers les mêmes objets.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;a = [{&amp;#39;name&amp;#39;:&amp;#39;jean&amp;#39;}, {&amp;#39;name&amp;#39;:&amp;#39;rené&amp;#39;}, {&amp;#39;name&amp;#39;:&amp;#39;claude&amp;#39;}]&lt;/span&gt;
&lt;span class="err"&gt;b = copy.copy(a)&lt;/span&gt;
&lt;span class="err"&gt;b[0][&amp;#39;name&amp;#39;] = &amp;#39;paul&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;print(&amp;#39;a =&amp;gt; %s&amp;#39; % a)&lt;/span&gt;
&lt;span class="err"&gt;print(&amp;#39;b =&amp;gt; %s&amp;#39; % b)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Donne:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;a =&amp;gt; [{&amp;#39;name&amp;#39;: &amp;#39;paul&amp;#39;}, {&amp;#39;name&amp;#39;: &amp;#39;rené&amp;#39;}, {&amp;#39;name&amp;#39;: &amp;#39;claude&amp;#39;}]&lt;/span&gt;
&lt;span class="err"&gt;b =&amp;gt; [{&amp;#39;name&amp;#39;: &amp;#39;paul&amp;#39;}, {&amp;#39;name&amp;#39;: &amp;#39;rené&amp;#39;}, {&amp;#39;name&amp;#39;: &amp;#39;claude&amp;#39;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/oops.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;On aurait pu vérifier en demandant directement si on avait les mêmes pointeurs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;print(a[0] is b[0])&lt;/span&gt;
&lt;span class="err"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;L'accès qu'on pouvait penser anodin à &lt;code&gt;b&lt;/code&gt; a bien impacté &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Le principe de deepcopy&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;copy.deepcopy()&lt;/code&gt; va régler le problème. Mais bien entendu rien n'est gratuit, et en réglant un problème, on en créé un symétrique. Voire deux &lt;code&gt;^^'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;deepcopy()&lt;/code&gt; crée une copie en profondeur (merci captain obvious...). Cela signifie qu'elle copie également le contenu de manière récursive.&lt;/p&gt;
&lt;p&gt;Nous avons donc deux impacts par rapport à la fonction copy():&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;deepcopy()&lt;/code&gt; est beaucoup plus coûteuse en termes de performance. Si la copie de simples entiers n'a pas d'impact significatif sur les performances, pour des données plus volumineuses, &lt;code&gt;deepcopy()&lt;/code&gt; peut être très lent. De plus, votre consommation de RAM va augmenter en conséquence.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deepcopy()&lt;/code&gt; copie vraiment tout, ce qui peut entraîner des problèmes complexes et difficiles à déboguer si les objets étaient référencés ailleurs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Au moins nos cas simples sont résolus:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;a = [{&amp;#39;name&amp;#39;:&amp;#39;jean&amp;#39;}, {&amp;#39;name&amp;#39;:&amp;#39;rené&amp;#39;}, {&amp;#39;name&amp;#39;:&amp;#39;claude&amp;#39;}]&lt;/span&gt;
&lt;span class="err"&gt;b = copy.deepcopy(a)&lt;/span&gt;
&lt;span class="err"&gt;b[0][&amp;#39;name&amp;#39;] = &amp;#39;paul&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;print(&amp;#39;a =&amp;gt; %s&amp;#39; % a)&lt;/span&gt;
&lt;span class="err"&gt;print(&amp;#39;b =&amp;gt; %s&amp;#39; % b)&lt;/span&gt;
&lt;span class="err"&gt;print(a[1] is b[1])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ce qui donne :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;a =&amp;gt; [{&amp;#39;name&amp;#39;: &amp;#39;jean&amp;#39;}, {&amp;#39;name&amp;#39;: &amp;#39;rené&amp;#39;}, {&amp;#39;name&amp;#39;: &amp;#39;claude&amp;#39;}]&lt;/span&gt;
&lt;span class="err"&gt;b =&amp;gt; [{&amp;#39;name&amp;#39;: &amp;#39;paul&amp;#39;}, {&amp;#39;name&amp;#39;: &amp;#39;rené&amp;#39;}, {&amp;#39;name&amp;#39;: &amp;#39;claude&amp;#39;}]&lt;/span&gt;
&lt;span class="err"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cependant, si nous prenons le cas où nous pointons vers de vrais objets, tels que des personnes, qui sont également référencées
dans une autre partie du programme, nous aurons copié ces instances.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;jean = User(&amp;#39;jean&amp;#39;, age=40)&lt;/span&gt;
&lt;span class="err"&gt;a = [{&amp;#39;contact&amp;#39;:jean}, ...]&lt;/span&gt;
&lt;span class="err"&gt;b = copy.deepcopy(a)&lt;/span&gt;
&lt;span class="err"&gt;[... se passe un peu de temps...]&lt;/span&gt;
&lt;span class="err"&gt;jean.celebrate_birthday()&lt;/span&gt;
&lt;span class="err"&gt;[... on passe quelques milliers de lignes, on est 5 niveaux d&amp;#39;appels et on a oublié d&amp;#39;où venait b initialement]&lt;/span&gt;
&lt;span class="err"&gt;print(b[0])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ce qui donne :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Name=Jean, age=40&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/bug 2.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Dans ce cas, nous nous sommes retrouvés avec deux objets "jean", une partie du programme ayant la première instance et l'autre moitié ayant l'autre.&lt;/p&gt;
&lt;p&gt;Le pire, c'est qu'il peut être difficile de détecter que ce sont deux instances différentes, car on aura pendant un long moment le même affichage :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Name=jean, age=40&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;C'est une des raisons qui font qu'il m'est souvent arrivé dans ce genre de cas d'afficher dans le print d'un élément son pointeur avec un id(self) par exemple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Name=jean, age=40, ptr=140526325860624&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Il est vrai que ce n'est pas très lisible, mais cela peut vous faire gagner des heures de débogage en cas de problème.
En effet, cela m'est arrivé, et je ne donnerai pas le temps que j'ai perdu à cause de cela, mais c'était beaucoup trop &lt;code&gt;(／‵Д′)／~ ┻━┻&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;Attention: le choix n'est pas anodin&lt;/h1&gt;
&lt;p&gt;Comme nous l'avons vu, ce choix n'est pas anodin. Aucune des options n'est sans risque.
C'est pourquoi, si vous avez besoin de faire une copie, ne choisissez pas au hasard.
Demandez-vous combien de temps la copie va être utilisée, où elle sera utilisée et par qui.&lt;/p&gt;
&lt;p&gt;Si vous manquez d'informations sur la vie de vos objets, ne cherchez pas plus loin et allez les chercher.&lt;/p&gt;
&lt;p&gt;Votre moi du futur vous remerciera pour les heures de débogage économisées en prenant ces 5 petites minutes de réflexion.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/thanks 4.gif'&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="linux"></category><category term="debug"></category><category term="admin"></category></entry><entry><title>Strace, l'outil de la dernière chance</title><link href="/strace-outil-derniere-chance/" rel="alternate"></link><published>2023-03-31T10:20:00+02:00</published><updated>2023-03-31T10:20:00+02:00</updated><author><name>Jean Gabès</name></author><id>tag:None,2023-03-31:/strace-outil-derniere-chance/</id><summary type="html">&lt;p&gt;Quand on se retrouve en façe d'une application qui se plante sans erreur claire et sans logs/trace, il reste une solution de la dernière chance: la commande strace&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Les applications ça plante, souvent (╥﹏╥)&lt;/h1&gt;
&lt;p&gt;Tout administrateur l'apprend assez vite à ses dépens: les applications ça plante, et ça plante souvent. &lt;/p&gt;
&lt;p&gt;Point de magie à cela, 
elles sont de plus en plus complexes, avec de plus en plus de fonctionalités. De plus, vu qu'il faut les produire de plus en plus vite, 
on a recours à des frameworks tout faits qui rajoutent leur propre couche de complexité.&lt;/p&gt;
&lt;p&gt;Et qui dit complexe, dit moins stable. Bien sûr, on peut rajouter des mécanismes de hautes disponibilités si l'application
le permets, mais parfois ceci rajoute lui-même une grosse couche de complexité qui va avoir ses propres problèmes
si elle n'est pas bien maitrisée.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/fail3.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Bref, ça va planter. Et d'un certain côté tant mieux, ça donne du travail à ceux qui font des outils de supervision &lt;code&gt;٩(^‿^)۶&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;Sans logs point de solution, ou presque&lt;/h1&gt;
&lt;p&gt;Quand ça va planter (et on a vu que ce n'est qu'une question de temps), les administrateurs n'ont pas un milliard de solutions. Nous ne sommes
pas surhumains ou des magiciens, on va faire avec les erreurs que l'application donne, soit directement à l'écran, soit côté backend.&lt;/p&gt;
&lt;p&gt;Peu importe qu'ils soient sous forme de logs locaux, centralisés, ou bien trace, ça revient grosso modo au même: l'application nous 
donne l'erreur comme elle le voit, avec son interprétation.&lt;/p&gt;
&lt;p&gt;L'erreur peut être volumineuse (coucou Java et ses grosses stacks inparsables....), ou bien sommaire, mais elle donne quelque chose à se mettre sous la dent pour l'administrateur. 
La suite va dépendre si l'erreur est assez claire. Un &lt;code&gt;Failed to connect to srv-mysql port 3306: Connection refused&lt;/code&gt; va être assez 
simple: votre serveur mysql est arrété (si c'était un firewall, on aurait plus un timeout, moins de chance d'avoir un refused du firewall). &lt;/p&gt;
&lt;p&gt;L'admin sait où chercher, et va voir du côté de la base ce qui se passe. Là encore, les logs/traces vont être déterminants.&lt;/p&gt;
&lt;p&gt;Bon là, c'est pour les cas un peu simples. Heureusement, d'expérience ça représente bien 90/95% des cas: on part rarement avec juste rien. Bon j'inclu aussi
les cas où les utilisateurs arrivent avec "ça ne marche pas", sans autre détail, mais une petite prise de main à distance plus tard, soit l'utilisateur 
a découvert qu'en fait il faisait n'importe quoi (bien 1/4 des cas), soit on arrive à avoir le message où commencer à investiguer.&lt;/p&gt;
&lt;h1&gt;Les derniers 5%: l'enfer sur Terre&lt;/h1&gt;
&lt;h2&gt;Ca se trouve, c'est pas si grave, un reboot et on repart&lt;/h2&gt;
&lt;p&gt;Bon vous me voyez venir, il reste les autres cas. Ceux où juste ça ne marche plus, mais sans message clair. Juste on lance, et rien ne se passe. Aucune
erreur, juste: rien.&lt;/p&gt;
&lt;p&gt;Bon là en général un admin avec un peu d'expérience va faire une première action en priorité numéro 1: il va prendre un café, car dans pas longtemps il risque de ne plus avoir le temps d'aller en prendre un &lt;code&gt;\̅_̅/̷̚ʾ(•◡•)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/café.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Après la seconde étape va dépendre un peu de l'admin, de la récurrence du problème (déjà arrivé ou pas), et si l'application doit vraiment repartir MAINTENANT (en majuscule, à ne
pas confondre avec le "maintenant" des chefs de projets qui est en fait un "dès que possible" mais déguisé).&lt;/p&gt;
&lt;p&gt;Si le problème est récurrent, qu'on a jamais trouvé d'où ça vient, et qu'il faut vraiment que la production reparte, point de solution: on relance l'application
et ses dépendances en totalités. Cette solution (aussi nommée "méthode Windows", allez savoir pourquoi... non je blague, tout le monde sait pourquoi) a le grand
avantage de régler la quasi-totalité des problèmes. Bon par contre on ne sait pas d'où vient le problème à la source, mais on a au moins un contournement.&lt;/p&gt;
&lt;p&gt;Je mets de côté le cas où c'est la première fois qu'on rencontre le problème, car dans ce cas on pars directement en analyse en ne touchant à rien pour ne pas empirer la situation. &lt;/p&gt;
&lt;h2&gt;On est mal ^^&lt;/h2&gt;
&lt;p&gt;Mais parfois, même le massive reboot ne suffit pas. Aucun message, logs ou trace ne nous aiguille vers la source du problème (qui peut venir de 3 stacks en dessous de l'application, sinon ce n'est pas drôle).&lt;/p&gt;
&lt;p&gt;Dans ce cas, l'application ne nous aidant pas, il va falloir se passer d'elle et tenter de "deviner" ce qui ne lui plait pas. (Une autre solution est de balancer le problème chez les développeurs de l'application
si vous les avez sous la main, mais si ça permet de calmer votre chef car le problème est ailleurs désormais, ça ne relance pas votre production pour autant ^^')&lt;/p&gt;
&lt;p&gt;Ici, celui qui ne m'a jamais laissé tombé porte un nom: &lt;code&gt;strace&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/deal with it.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;strace, quand le problème est entre l'application et l'OS&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;strace&lt;/code&gt; s'installe nativement sur votre système, c'est à portée d'un dnf/apt. Cette commande n'est en rien magique. Elle est même au final
assez simple dans son fonctionnement: elle va tracer les appels systèmes entre vos applications (qu'elles soient déjà lancées ou pas) et l'OS.&lt;/p&gt;
&lt;p&gt;On va y voir tout ce qui se passe entre votre application et le système. Mais, le problème, c'est que quand je dis tout, c'est TOUT. Sa sortie est verbeuse, car
les applications font un MAX d'appels systèmes tout le temps, et principalement au lancement, là où en général vous avez des problèmes &lt;code&gt;(╯︵╰,)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/75/article.jpg'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Le cas simple de strace est de lancer la commande avec par exemple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;strace ls -thor&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On va avoir une sortie de la sorte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;strace&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;thor&lt;/span&gt;
&lt;span class="n"&gt;execve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/ls&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ls&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-thor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mh"&gt;0x7fffbd60f428&lt;/span&gt; &lt;span class="o"&gt;/*&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt; &lt;span class="n"&gt;vars&lt;/span&gt; &lt;span class="o"&gt;*/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;brk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                               &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x1ca9000&lt;/span&gt;
&lt;span class="n"&gt;mmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PROT_READ&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;PROT_WRITE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAP_PRIVATE&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;MAP_ANONYMOUS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7f6578ed3000&lt;/span&gt;
&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc/ld.so.preload&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;ENOENT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc/ld.so.cache&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDONLY&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;O_CLOEXEC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;fstat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;st_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;S_IFREG&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0644&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;st_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40994&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;mmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40994&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PROT_READ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAP_PRIVATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x7f6578ec8000&lt;/span&gt;
&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/lib64/libselinux.so.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDONLY&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;O_CLOEXEC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\177&lt;/span&gt;&lt;span class="s2"&gt;ELF&lt;/span&gt;&lt;span class="se"&gt;\2\1\1\0\0\0\0\0\0\0\0\0\3\0&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\0\1\0\0\0\220&lt;/span&gt;&lt;span class="s2"&gt;j&lt;/span&gt;&lt;span class="se"&gt;\0\0\0\0\0\0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;832&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;832&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;openat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AT_FDCWD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDONLY&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;O_NONBLOCK&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;O_CLOEXEC&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;O_DIRECTORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;getdents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;/*&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt; &lt;span class="n"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;*/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32768&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3240&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/reading.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;On voit l'appel au lancement du binaire. Puis après pas mal de chargement de fichiers et librairies et le listing du répertoire "."&lt;/p&gt;
&lt;p&gt;Ce qui va nous intéresser le plus, ce sont les erreurs, du genre:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;sa_family&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AF_UNIX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sun_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/var/run/nscd/socket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;ENOENT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;nscd est un démon de cache qui peut ou pas exister sur la machine. Ici, c'est la négative. Est-ce un problème dans notre cas? Non, ce n'est
qu'un cache. Et là vous voyez le problème: il y a les bonnes erreurs, et les mauvaises erreurs.&lt;/p&gt;
&lt;p&gt;Ici malheureusement, il va falloir montrer les muscles, et apprendre un peu tous ces rouages de l'OS afin de les identifier, et les filtrer rapidement.&lt;/p&gt;
&lt;p&gt;Prennons un vrai cas avec une erreur:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;strace ls -thor /n-existe-pas&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;L'appel qui va nous intéresser va etre celui-ci:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;lstat(&amp;quot;/n-existe-pas&amp;quot;, 0x1f84600)       = -1 ENOENT (No such file or directory)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;strace&lt;/code&gt; vous donne des données brutes, mais ça va rester à vous de faire le travail in-fine. Rien de magique.&lt;/p&gt;
&lt;p&gt;Par contre, ce qui est intéressant, c'est que vous êtes quasi sûr que l'erreur est dedans. Juste qu'un simple &lt;code&gt;ls&lt;/code&gt; génère 150 lignes, alors imaginez un lancement
d'un &lt;code&gt;apache&lt;/code&gt; récalcitrant.&lt;/p&gt;
&lt;p&gt;Ce que je vous recommande d'ailleurs pour son lancement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mettre la sortie dans un fichier (&lt;code&gt;-o&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;tracer également les threads et autre processus fils (&lt;code&gt;-f&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;ne pas limiter la taille des strings dans les arguments des appels, ça aide (&lt;code&gt;-s 999999&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ceci nous donne donc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;strace -o /tmp/trace.txt -f -s 999999 ls -thor /n-existe-pas&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Vu sa verbosité, c'est à utiliser en dernier recours, mais ça peut sauver des productions.&lt;/p&gt;
&lt;h2&gt;Le jour où strace a débloqué plus de 300 personnes, et calmé mon chef&lt;/h2&gt;
&lt;p&gt;Dans mon cas, en 2008 ou 2009, nous avions un GROS erp Oracle, avec plusieurs &lt;code&gt;apaches&lt;/code&gt; intégrés (chacun sa version, sa gestion de log, etc, un véritable enfer à administrer avec
une surcouche xml d'Oracle qui n'aidait pas). &lt;/p&gt;
&lt;p&gt;Et un jour en production, une partie de l'application ne démarrait plus. Rien dans les nombreux logs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;espace disque ok&lt;/li&gt;
&lt;li&gt;pas de soucis réseaux&lt;/li&gt;
&lt;li&gt;dns OK également (flute, souvent un bon bouc émissaire)&lt;/li&gt;
&lt;li&gt;cluster Oracle OK&lt;/li&gt;
&lt;li&gt;reboot fait, mais n'a rien changé &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/oups.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Aucun des suspects habituels. Ça faisait déjà bien 3/4h que 300 utilisateurs attendaient leur ERP, dans une société de l'industrie, c'est long, TRES long.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/wait.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Je sors donc mon copain &lt;code&gt;strace&lt;/code&gt;, en désespoir de cause. Vu qu'il nous manquait un des démons &lt;code&gt;apache&lt;/code&gt;, je me suis concentré sur ce dernier:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;j'ai trouvé son lancement sur un appel &lt;code&gt;execve&lt;/code&gt;, j'avais donc son PID&lt;/li&gt;
&lt;li&gt;j'ai grep tout ce qui concenait de PID d'apache dans la sortie de &lt;code&gt;strace&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;j'ai vu un &lt;code&gt;open()&lt;/code&gt; sur un obscur log qui retournait en erreur (je n'ai plus le code d'erreur préci, mais ce n'était pas un succès ^^)&lt;/li&gt;
&lt;li&gt;en allant voir le log, il faisait pile-poil 2Go. Pas un octet de plus ou de moins. Louche&lt;/li&gt;
&lt;li&gt;je regarde l'appel système en question, et en effet, il ne pouvait pas ouvrir de fichiers de plus de 2Go, il fallait passer sur un appel du genre &lt;code&gt;open64()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;je clean le log avec un bon vieux &lt;code&gt;&amp;gt; fichier-log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ça redémarre enfin &lt;code&gt;♪┏(°.°)┛┗(°.°)┓┗(°.°)┛┏(°.°)┓ ♪&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/youpi.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;J'avais découvert &lt;code&gt;strace&lt;/code&gt; peu de temps avant. Sans lui, on aurait du faire appel au support Oracle, et vu la qualité de leurs réponses à l'époque, la
production attendrait encore de redémarrer, nos 300 utilisateurs au chômage technique &lt;code&gt;ლ(ಠ益ಠლ)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;strace sur un processus qui tourne déjà&lt;/h2&gt;
&lt;p&gt;Un dernier cas où je trouve &lt;code&gt;strace&lt;/code&gt; pratique, c'est pour aller s'accrocher sur un processus qui est bloqué. Par exemple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt; strace -o /tmp/trace.txt -f -s 999999 -p PID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On pourra avoir par exemple un:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt; select(5, NULL, NULL, NULL, {tv_sec=0, tv_usec=50000} &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;là on sait que le processus attend le filre descriptor &lt;code&gt;5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;on va voir qui est ce file descriptor &lt;code&gt;5&lt;/code&gt; dans le processus via &lt;code&gt;ls -thor /proc/PID/fd&lt;/code&gt; &lt;ul&gt;
&lt;li&gt;et on trouve ainsi sur quelle socket/fichier il bloque&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Pas le seul outil dans son domaine, mais réponds toujours présent&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;strace&lt;/code&gt; n'est pas le seul à opérer dans cette couche pour trouver les appels systèmes qui posent des problèmes. Un de ses sucesseurs est le fameux &lt;code&gt;eBPF&lt;/code&gt; dont on parlera
peut-être un jour.&lt;/p&gt;
&lt;p&gt;Ce dernier est un &lt;code&gt;strace&lt;/code&gt; sous stéroïdes, qui ralenti beaucoup moins que strace, est capable de filtrage bien plus précis, etc. Mais le problème, c'est que ce n'est
pas encore d'une stabilité à toute épreuve, et que son API évolue beaucoup, donc on n'est pas forcément sûr que son "script" de debug va bien fonctionner sur
un ancien serveur par exemple (si tant est qu'il soit disponible, ce qui est loin d'être certain).&lt;/p&gt;
&lt;p&gt;Nul doute qu'&lt;code&gt;eBPF&lt;/code&gt; rendra obsolète &lt;code&gt;strace&lt;/code&gt; un jour, mais ce dernier a encore l'avantage d'être toujours là, peu importe les situations ou les règles de sécurité.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/hero 4.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h1&gt;La couche système que j'apprécie tout particulèrement&lt;/h1&gt;
&lt;p&gt;Comme vous avez pu le voir au fil de ce post, c'est une couche que j'apprécie énormément. Cette couche des appels systèmes révèle tous les petits détails
croustillant sur les trucs et astuces du système, sur comment les différents blocs fonctionnent entre eux.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;strace&lt;/code&gt; est justement un moyen de trouver des problèmes, mais également découvrir tous pleins de nouveaux mécanismes systèmes. &lt;/p&gt;
&lt;p&gt;Quand je fais appel à &lt;code&gt;strace&lt;/code&gt;, c'est
que j'ai un gros problème, mais une chose est sûre: même après quasi 20 ans à faire du Linux, je vais sûrement découvrir encore un ou deux trucs que je ne 
connais pas encore.&lt;/p&gt;
&lt;p&gt;Et rien que pour ça, je sais que je vais passer un bon moment &lt;code&gt;༼ つ ◕_◕ ༽つ&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/hype.png'&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="linux"></category><category term="debug"></category><category term="admin"></category></entry><entry><title>Développer son outil en Open Source et en tant qu’éditeur, deux salles, deux ambiances</title><link href="/depuis-open-source-vers-editeur/" rel="alternate"></link><published>2023-03-17T10:20:00+01:00</published><updated>2023-03-17T10:20:00+01:00</updated><author><name>Jean Gabès</name></author><id>tag:None,2023-03-17:/depuis-open-source-vers-editeur/</id><summary type="html">&lt;p&gt;Quand on passe d'un hobby de dev sur un outil open source à un éditeur d'une solution payante, on change de monde et également de type de motivation.&lt;br/&gt; Dans cet article, je vais partager comment je l'ai véçu, ce que ça a changé par rapport à ma relation avec le code et le projet dans son ensemble.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ce post fait suite aux réflexions que j'ai eu lors de mon entretient avec &lt;a href="https://fr.linkedin.com/in/imranedessai"&gt;Imrane Dessaï&lt;/a&gt; que vous pouvez retrouver sur &lt;a href="https://www.youtube.com/watch?v=kM42WE0Sa4c"&gt;Youtube&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;De simple consommateur Open Source à contributeur&lt;/h1&gt;
&lt;p&gt;Petit retour rapide sur l'histoire dont on va parler ici: Shinken était parti comme un simple POC sans nom pour rajouter le côté 
distribué à Nagios. Suite au refus de Nagios d'incorporer les amélorations dans le projet "mère" (car utilisant un nouveau
langage, le Python), &lt;a href="http://www.shinken-monitoring.org/"&gt;Shinken&lt;/a&gt; était né.&lt;/p&gt;
&lt;p&gt;J'avais toujours vu l'open source depuis mon point de vue de "simple consommateur, un peu contributeur"
à quelques projets. J'avais déjà participé au projet Nagios avec quelques patchs/améliorations par exemple,
ou le projet &lt;a href="https://www.getmangos.eu/"&gt;Mangos&lt;/a&gt; (serveur WoW). &lt;/p&gt;
&lt;p&gt;Mais c'était du classique: j'avais un problème,
et hop un peu de C après et quelques recompilations, le problème était réglé. Passé mes patchs, je retournais
dans mon côté consommateur, sans participer plus que ça aux projets, m'inpliquer et régler des problèmes que
je n'avais pas par exemple.&lt;/p&gt;
&lt;h1&gt;Lancer son propre projet&lt;/h1&gt;
&lt;p&gt;Shinken a changé cela. J'avais mon propre projet. Vu que j'avais déjà écrit des articles sur Nagios dans &lt;a href="https://connect.ed-diamond.com/auteur/gabes-jean"&gt;LinuxMag&lt;/a&gt;
à l'époque, c'était l'occasion de faire connaitre mon projet à d'autres afin d'avoir des utilisateurs. Et ils sont
venus, avec des questions et (beaucoup) de demandes. Donc l'article avait rammené des consommateurs, logiques et
je n'étais pas plus surpris de ça.&lt;/p&gt;
&lt;p&gt;Par contre, j'ai également eu des quelques contributions, petites au début, puis de plus en plus nombreuses au fur
et à mesure. Arrivé à un moment, je pense qu'on pouvait considérer qu'on était deux à quasi-égalité sur le projet,
avec &lt;a href="https://github.com/lausser"&gt;Gerhard&lt;/a&gt; (que je remercie chaleureusement!). Vu qu'il était allemand, ça m'a forcé à mettre tout le projet en
anglais par défaut, pas un mal.&lt;/p&gt;
&lt;p&gt;Et là, de proche en proche, j'étais en train de gérer un projet communautaire sans trop l'avoir recherché au départ,
mais pourquoi pas :)&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/allow.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Le projet s'organise tranquillement&lt;/h2&gt;
&lt;p&gt;Au début, on avait la mailinglist, mais qui n'était pas pratique du tout je trouve (je n'aime pas les emails,
question de goût). Github et ses tickets ont pris le relais rapidement.&lt;/p&gt;
&lt;p&gt;L'organisation restait cependant très centralisée. J'ai toujours gardé la main sur le projet, sans avoir à demander
à d'autres avant de faire les choses. Ce qui me plaisait dans le projet, c'était de rajouter de nouvelles fonctionalités,
et corriger des bugs en faisant en sorte qu'ils ne reviennent pas. C'était très satisfaisant de se dire qu'on avançait
vers une version "sans bugs". Et je n'allais pas demander d'autorisation pour améliorer mon propre projet &lt;code&gt;┌(▀Ĺ̯ ▀-͠ )┐&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ce controle absolu est une force pour un petit projet, mais il se révèlera un problème quand il grandira par la suite.&lt;/p&gt;
&lt;h1&gt;Quand les demandes de support se font de plus en plus présentes&lt;/h1&gt;
&lt;p&gt;Vers mi-2012, une grande étape arrive: on écrit à plusieurs un &lt;a href="https://connect.ed-diamond.com/GNU-Linux-Magazine/glmfhs-062"&gt;linuxmag hors série&lt;/a&gt;. C'était vraiment sympa, car on s'était
bien réparti les tâches. Le hors série est un carton, et attire beaucoup de monde. Et beaucoup de demandes. De plus en
plus de grosses sociétés me demandent en off si une version supportée/boostées est prévue. Par boostée, il faut
comprendre avec une interface de configuration (le moteur n'est pas la problématique de ce type d'utilisateurs, sauf
si leur propre production est bloquée).&lt;/p&gt;
&lt;p&gt;Je me rapproche de structures sur Bordeaux pour savoir comment on fait pour monter un éditeur. (Futur article plus
tard sur le sujet). Mi-2013, c'est parti: je trouve un associé orienté commercial, et l'éditeur &lt;a href="https://www.shinken-enterprise.com"&gt;Shinken Solutions&lt;/a&gt;
prends vie.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/hello (2).gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h1&gt;Le début de l'éditeur&lt;/h1&gt;
&lt;p&gt;Je mets de côté la partie recherche de fonds et le remplissage de nombreux dossiers. Le code lui a avancé comme
lors de la phase Open Source: très vite. Bien trop vite d'ailleurs, car avec bien les 3/4 du temps pris sur les
dossiers, j'ai dû prendre des racourcis sur le dev de la partie configuration (je n'avais pas assez d'exéprience
à l'époque pour estimer si le racourci était trop court ou pas). Des clients sont séduits, plus par le potentiel
que par les premières interfaces il faut bien le dire. On embauche, et l'équipe s'étoffe.&lt;/p&gt;
&lt;h2&gt;Les choses à revoir&lt;/h2&gt;
&lt;p&gt;Et là arrive le retour à la réalité: toute la phase d'installation et d'exploitation était à revoir.&lt;/p&gt;
&lt;p&gt;Quand on prend un moteur Open Source (comprendre dans 99% du temps: gratuit), on est concients qu'on prend
un simple moteur qu'il va falloir intégrer soit même dans le SI, le configurer, l'adaptant si besoin. Bref,
payer avec son propre temps.&lt;/p&gt;
&lt;p&gt;Mais quand on achète une solution chez un éditeur les attentes ne sont pas du tout les mêmes. Déjà il faut voir
que le public n'est pas le même non plus. Shinken était adapté pour les spécialistes qui n'avaient pas peur se relever
les manches, d'installer les dépendances, et faire l'automatisation de leurs fichiers de configuration.&lt;/p&gt;
&lt;p&gt;Mais ceux qui choississent une solution payante veulent que toute cette partie-là soit déjà faite, nouvelle société éditrice
ou pas. De plus, là on a pas forcément affaire à ceux qui sont au courant, qui cherchent la nouveauté, mais justement
l'autre partie du spectre, ceux qui cherchent la stabilité et surtout la facilité.&lt;/p&gt;
&lt;p&gt;Bon "facile" n'était pas ce qui catactérisait Shinken à l'époque il faut être honnête. Quand on savait quoi faire,
l'installation était l'histoire d'une bonne heure, configuration de la partie architecture incluse. Mais dans les mains
d'un débutant dans le domaine qui n'allait pas lire la documentation (de toute manière l'outil ne lui donnait pas le lien
où aller chercher) et s'attendait à avoir à lancer une seule commande, c'était l'enfer.&lt;/p&gt;
&lt;p&gt;Les premiers retours sur cette partie était calamiteuse. Beaucoup de POC se sont arrétés à cette étape. Il fallait donc
remédier à ça.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/challenge.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Création d'un installeur&lt;/h2&gt;
&lt;p&gt;La création d'un installeur a été salutaire. Il fallait arriver avec bons nombres de dépendances, dont &lt;a href="https://www.mongodb.com"&gt;Mongo&lt;/a&gt; et &lt;a href="graphite.readthedocs.io/"&gt;Graphite&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Là où il était simple de gérer pleins de distributions différentes pour le moteur Open Source, quand on doit livrer un tut cohérent aux clients (qui
sont dans des réseaux isolés), on a du faire le choix de choisir une distribution à gérer. A l'époque (2013), c'était Centos/Redhat6,
 car elle rassurait. Générer les rpm n'a pas été trop rude, même si la gestion des fichiers de configuration via rpm est un vrai
calvaire au final.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Astuce&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ne&lt;/span&gt; &lt;span class="n"&gt;donnez&lt;/span&gt; &lt;span class="n"&gt;pas&lt;/span&gt; &lt;span class="n"&gt;vos&lt;/span&gt; &lt;span class="n"&gt;fichiers&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;configurations&lt;/span&gt; &lt;span class="err"&gt;à&lt;/span&gt; &lt;span class="n"&gt;rpm&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;faites&lt;/span&gt; &lt;span class="n"&gt;le&lt;/span&gt; &lt;span class="err"&gt;à&lt;/span&gt; &lt;span class="n"&gt;la&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;suite&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;toute&lt;/span&gt; &lt;span class="n"&gt;manière&lt;/span&gt; &lt;span class="n"&gt;vous&lt;/span&gt; &lt;span class="n"&gt;devez&lt;/span&gt; &lt;span class="n"&gt;le&lt;/span&gt; &lt;span class="n"&gt;faire&lt;/span&gt; &lt;span class="err"&gt;à&lt;/span&gt; &lt;span class="n"&gt;terme&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Les clients et les cycles de mises à jour&lt;/h2&gt;
&lt;p&gt;Autre point qui a posé problème était le rythme pour mettre à jour chez nos clients. Vu que c'étaient de grands comptes,
on parle de cycles très longs de validation/tests. Entre livrer une version et la voir installer, c'étaient des semaines
voir des mois. Dans un cas bien spécifique d'un projet où on était à l'année.&lt;/p&gt;
&lt;p&gt;Et c'est quelque chose que là encore on ne peut pas bouger. C'est le process interne des clients, et il faut faire avec,
pas le choix.&lt;/p&gt;
&lt;p&gt;On a donc dû gérer plusieurs versions en parallèles, ce qui a un coût non négligeable en termes de gestion.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/killself.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;ok mais là ça fait un moment qu'on a pas évoqué le code non?&lt;/h2&gt;
&lt;p&gt;Voilà, en fait, c'est toute la problématique d'un éditeur qui s'adresse pour les grandes sociétés (Shinken
n'était pas adapté pour les petites structures): c'est tout sauf un problème de code. &lt;/p&gt;
&lt;p&gt;Il faut faire avec des habitudes et des process internes. Le code n'est que le dernier des soucis, c'est facile à régler par rapport aux
premiers points.&lt;/p&gt;
&lt;p&gt;Par exemple, on a dû parfois faire des algorithmes moins efficaces techniquement, mais bien plus faciles et
comprehensibles par les utilisateurs. Un algorithme trop complexe va juste créer des problèmes à l'éditeur, sans
que ses clients y voient un intérêt.&lt;/p&gt;
&lt;p&gt;Bref, je gérais au jour à jour des problèmes qui n'étaient pas le code. La différence avec ce qui se passait du
côté Open Source était très forte, dans mon esprit c'était devenu deux "projets" différents.&lt;/p&gt;
&lt;p&gt;Techniquement, c'était de plus en plus le cas, vu qu'au début on était trop limites en temps pour maintenir les
modifications dans la version open source (et les tester, adapter, etc, c'est bien plus que juste backporter le code).&lt;/p&gt;
&lt;h1&gt;Quand tu découvres qu'il y a deux types de motivations&lt;/h1&gt;
&lt;p&gt;Pour ceux qui ont lu le livre &lt;a href="https://www.amazon.fr/Gamers-Brain-Neuroscience-Impact-Design/dp/1498775500"&gt;The Gamer's Brain de Celia Hodent&lt;/a&gt;
savent qu'il y a (au moins) deux types de motivations:
 * intrinsèque : la récompense est de faire l'activité en elle-même  (en résumé: c'est fun en soi)
 * extrinsèque : la récompense t'es donnée car tu as fait l'activité (en résumé: pas marrant, mais tu es payé pour)&lt;/p&gt;
&lt;p&gt;Le problème c'est que je n'ai lu ce livre que vers 2020, pas 2013 ^^'&lt;/p&gt;
&lt;p&gt;Et donc assez rapidement est arrivé un changement: développer pour Shinken était une activité que je faisais
car c'était marrant, donc une motivation &lt;em&gt;intrinsèque&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;Mais après avoir lancé la société, ma paie et surtout
celle de mes salariés en dépendait literralement. J'étais donc passé sur une motivation &lt;em&gt;extrinsèque&lt;/em&gt;, avec des
contraintes de l'éditeur comme on a vu avant.&lt;/p&gt;
&lt;p&gt;Et ce passage de motivation intrinsèque à motivation extrinsèque
est un cas connu: c'est un chemin en sens unique, car une fois que le cervau a identifié une tâche comme une
récompense extrinsèque, il ne revient pas en arrière. Il est même moins sensible que ceux qui n'ont connu que
la récompense extrinsèque!&lt;/p&gt;
&lt;p&gt;Et entre ça et le fait que le code du framework avait tellement divergé que je relisais du "vieux" code que
j'avais fixé il y a quelque temps au "travail", le soir c'était tout sauf "fun" à faire.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;J&amp;#39;avais tué mon hobby. Litérallement.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/cassé 3.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Gérer seul son projet Open Source&lt;/h2&gt;
&lt;p&gt;Et c'est là que le fait que je gère seul le projet a été une erreur je pense. Si je devais recommancer,
je pense que dès qu'on lance un éditeur, il faut passer la main sur le projet open source à quelqu'un qui
n'est pas lié économiquement à l'éditeur, ou à défaut le faire avec un groupe neutre. Même pas pour des raisons
de "concurrences" ou autre, mais bien pour être sûr qu'il y ait une bonne motivation à sa tête.&lt;/p&gt;
&lt;p&gt;Hereusement, &lt;a href="https://github.com/geektophe"&gt;Christophe Simon&lt;/a&gt; de Dailymotion a grandement palié le problème et a géré dans l'ombre le projet
Open Source. Je le remercie chaleureusement pour ça &lt;code&gt;(/.__.)/ \(.__.\)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/thanks.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;La vitesse d'un éditeur versus celle d'un mec sur son canapé&lt;/h2&gt;
&lt;p&gt;Autre point qui peu être très désagréable, est que suite à tous ces soucis de gestion des process des
clients, j'ai eu l'impression d'aller beaucoup, &lt;em&gt;beaucoup&lt;/em&gt; moins vite en termes de développement que lorsque
j'étais seul dans mon canapé à coder le soir.&lt;/p&gt;
&lt;p&gt;En fait, c'est à la fois vrai et faux.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/maybe.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Le fait de travailler en équipe demande beaucoup de "surcharge" en interne pour que ça avance correctement (bonne
gestion des tickets, communication interne, gestion de la documentation, etc), surtout quand on a de gros clients.&lt;/p&gt;
&lt;p&gt;Donc si je me prends en tant qu'individuel, ma vitesse pure dans une telle organisation était bien plus faible que
celle que j'avais avant de monter un éditeur. Et c'est totalement normal. C'était la vitesse de l'équipe qui comptait,
pas la mienne.&lt;/p&gt;
&lt;p&gt;Mais c'est dur à accepter, surtout quand on allait très vite avant.
Mes collègues ont moins ce problème, car pour
eux c'est une vitesse "normale", et je me retrouvais à être en décalage par rapport à eux dans mon ressenti.&lt;/p&gt;
&lt;p&gt;La vitesse de réflexion et d'exécution ayant toujours été un de mes points forts, c'était quelque chose que j'ai
très, très mal véçu au fil du temps:
  * plus de process
  * moins de vitesse individuelle
  * mais meilleure vitesse d'équipe à la fin&lt;/p&gt;
&lt;h2&gt;Deux salles, deux ambiances&lt;/h2&gt;
&lt;p&gt;Bons nombres de développeurs connaissent déjà tout cela. Car c'est leur métier et ils ont conscience de ces problèmes
de motivation ou de vitesse perçue. &lt;/p&gt;
&lt;p&gt;Mais je n'étais pas un développeur profesionnel à l'époque, j'étais administrateur système &lt;code&gt;\̅_̅/̷̚ʾ(•◡•)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Je pense qu'un développeur professionnel aurait eu moins de soucis, ou en tout cas aurait pu les identifier plus vite. &lt;/p&gt;
&lt;h2&gt;Des solutions&lt;/h2&gt;
&lt;p&gt;Est-ce qu'il y a des solutions? &lt;/p&gt;
&lt;p&gt;Déjà splitter au plus tôt le travail et le hobby en laissant ce dernier dans les mains
d'autres, ou en tout cas avoir un groupe pour le gérer et non pas une seule personne.&lt;/p&gt;
&lt;p&gt;Des conseils pour se lancer dans un éditeur qui s'adresse à de grosses sociétés et à leur process? Pas vraiment.
Prennez votre vélocité "normale" que vous imaginez, et divisez là par un bon gros 3. Vous aurez une bonne estimation quand ça
s'adresse à ce genre de clients. Il faut que votre business plan soit en phase avec ça.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/common/tropcher.gif'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Si mon éxpérience vous est utile, ou si vous en avez une similaire (ou contraire), n'hésitez pas à le mettre
en commentaires, c'est le genre de sujet que je n'ai pas trop vu/lu dans le passé et qui m'aurait été pratique
il y a 10 ans &lt;code&gt;(づ｡◕‿‿◕｡)づ&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/74/74-open-source-editeur.png'&gt;&lt;/center&gt;
ps: oui, je n'ai pas menti sur mes dons de design hein? ^^'&lt;/p&gt;</content><category term="entreprenariat"></category><category term="open-source"></category></entry><entry><title>Smart agent solution</title><link href="/smart-agent/" rel="alternate"></link><published>2015-02-20T10:20:00+01:00</published><updated>2015-02-20T10:20:00+01:00</updated><author><name>Jean Gabès</name></author><id>tag:None,2015-02-20:/smart-agent/</id><summary type="html">&lt;p&gt;Prennons un peu de recul sur la supervision actuelle, ses limites, et comment les dépasser&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Current pulling monitoring logic limits&lt;/h1&gt;
&lt;p&gt;Salut,&lt;/p&gt;
&lt;p&gt;Aujourd'hui on va voir un sujet qui me trote dans la tête depuis quelques temps: la vision actuel de la supervision et ses limites.
Depuis longtemps on a surtout utilisé le "pull", hérité des temps de Nagios.&lt;/p&gt;
&lt;p&gt;Vous pouvez utiliser une méthode bourrine de supervision par SNMP, ou une méthode ingérable genre &lt;a href="http://exchange.nagios.org/directory/Addons/Monitoring-Agents/NRPE--2D-Nagios-Remote-Plugin-Executor/details"&gt;NRPE&lt;/a&gt; ou des checks plus avancés comme &lt;a href="https://github.com/naparuba/check-linux-by-ssh"&gt;mes checks utilisant SSH&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Mais à la fin ce n'est qu'une question de protocole, la logique de récupération/pull reste la même.&lt;/p&gt;
&lt;p&gt;C'est la raison pour laquelle Shinken est capable d'avoir autant de pollers: pour permettre d'avoir lancer autant de checks que vous avez besoin.&lt;/p&gt;
&lt;p&gt;Ca marche. Même sur un très grand parc: si vous avez assez de pollers, vous pouvez superviser ce qui vous chante.&lt;/p&gt;
&lt;p&gt;Mais ce n'est peut-être pas forcément la meilleure solution de faire.&lt;/p&gt;
&lt;p&gt;Voici une illustration de deux de nos plus gros soucis en supervision:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/73/problems.png'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Consommation des sondes&lt;/h3&gt;
&lt;p&gt;Le premier problème est la consommation des sondes. Dans les installations les plus grandes de Shinken, j'ai déjà vu des pollers surchargés. En fait ce n'était pas le démon poller lui même mais les sondes qui consommaient tous les CPUs. Et tout particulièrement les sondes Windows et VMWare (à cause de leur protocoles SOAP &amp;amp; WMI qui sont très lourds).
Bien sûr vpus pouvez rajouter des CPUs, mais on pourrait trouver une solution plus élégante, et moins couteuse à chauqe fois que vous rajoutez de nouveaux serveurs à superviser.&lt;/p&gt;
&lt;p&gt;Cette consommation nous limite à rester dans le classique supervision toutes les 5 min (ou une minute) entre les vérifications. Certains vont superviser à 10s, mais seulement sur un scope réduit.&lt;/p&gt;
&lt;p&gt;Après il faut dire que sans correction automatique, ça ne sert à rien de tomber en dessous de la minute, car même si vous avez l'alerte en 10s, le pauvre humain en face de son client mail mettra bien plus que la minute pour comprendre l'erreur, et commencer à intervenir sur le bon serveur ^^&lt;/p&gt;
&lt;h3&gt;Besoin pour plus d'élasticité&lt;/h3&gt;
&lt;p&gt;Le second problème est plus récent. Avec le cloud (Je mets dans le même paquet EC2, Openstack et docker ici) le besoin d'élasticité est devenu plus critique que les performances brutes. Vous voulez votre instance EC2 supervisée dès qu'elle est prête, pas 1h après ^^ 
Surtout qu'il y a des chances qu'elle n'existe plus dans 1h de toute manière...&lt;/p&gt;
&lt;p&gt;Certains framework comme &lt;a href="http://kubernetes.io/"&gt;kubernetes&lt;/a&gt; peuvent aider, mais ça reste sacrément complexe, et une solution plus simple serait bénéfique pour le plus grand nombre.&lt;/p&gt;
&lt;h1&gt;Ma solution&lt;/h1&gt;
&lt;h3&gt;Smart agent&lt;/h3&gt;
&lt;p&gt;Durant des années, la supervision sans agent était Reine. Par-ce que le pulling était acceptable d'un point de vue CPU, et que l'élasticité était une exception, pas la norme.
Gérer une armée d'agent était un CAUCHEMARD car ils ne répondaient qu'à un serveur centralisé et ne tentaient pas d'être intelligent à la place de ce dernier (oui NRPE et tes clones, c'est bien de vous que je parle).&lt;/p&gt;
&lt;p&gt;Mais un agent intelligent ce n'est pas juste lancer les sondes localement, et donc se limite à la partie supervision. Mais c'est également alléger la partie la plus coûteuse d'une solution de supervision: la gestion de configuration. Par exemple l'agent peux détecter de quel type est un serveur, ce qu'il y a dessus, et automatiquement assigner des checks (définis de manière centralisée), ainsi que des informations utiles pour les checks (pensez à l'ip publique par exemple).
Un tel agent serait une véritable force pour une solution de supervision.&lt;/p&gt;
&lt;h3&gt;On booste les performances&lt;/h3&gt;
&lt;p&gt;Un tel agent lance les checks localement, et pour ne pas surcharger inutilement le serveur central, autant ne lui envoyer que les changement d'état. Avec une telle baisse de consommation de bande passante et ressource, il n'y a alors aucune pitié à descendre drastiquement les intervales de vérifications. 
10s de base pour chaque check est alors la norme facilement accessible, plus l'exception.&lt;/p&gt;
&lt;h3&gt;L'élasticité maximum&lt;/h3&gt;
&lt;p&gt;Pour le problème de l'élasticité, quand l'agent démarre, il détecte son OS et les applications sur le serveur, et va se déclarer de lui même au serveur Central.&lt;/p&gt;
&lt;h3&gt;Fonctionnement de l'agent&lt;/h3&gt;
&lt;p&gt;Voici une vue d'ensemble d'un tel système:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/73/agent.png'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Avec 3 grandes parties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Les détectors détectent le type de serveur et les applications qui tournent dessus&lt;/li&gt;
&lt;li&gt;Les collectors vont récupérer des données brutes, du systèmes et des applications&lt;/li&gt;
&lt;li&gt;L'analyser lance les checks, et averti en cas de changement d'état&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Le point principal est de décorréler la récupération des données, et la vérification. Ainsi, ils peuvent avoir facilement des rythmes totalement différents.&lt;/p&gt;
&lt;h3&gt;Gestion de configuration&lt;/h3&gt;
&lt;p&gt;La gestion de configuration locale des NRPE-like est un véritable enfer à gérer sur un grand parc. Voici pourquoi je réutilise la philosophie que j'ai mis dans &lt;a href="http://shinken-solutions.com"&gt;Shinken Enterprise&lt;/a&gt;: ne pas définir manuellement, mais se baser sur un moteur de règles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis est installé =&amp;gt; c'est un serveur redis&lt;/li&gt;
&lt;li&gt;window fonctionne =&amp;gt; on active la récolte windows et ses checks&lt;/li&gt;
&lt;li&gt;votre ip est dans le range EC2-East =&amp;gt; on averti les bons administrateurs&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un jeu de même règle va donner des résultats différents suivants vos serveur, c'est bien plus simple à gérer que X configurations locales.&lt;/p&gt;
&lt;p&gt;Finalement une solution efficace: vous mettez l'agent, la configuration est finie.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src='/images/73/global.png'&gt;&lt;/center&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vous lancez un nouveau serveur? Il va être rajouté à Shinken en quelques secondes, déjà taggué (windows, iis par exemple)&lt;/li&gt;
&lt;li&gt;Ceci va alléger fortement le nombre de pollers dédiés aux serveurs, de quoi booster la précision sur les checks purement réseaux :)&lt;/li&gt;
&lt;li&gt;Supervision "Out of the box" avec les bons collectors et les bonnes règles ^^&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Votre avis?&lt;/h1&gt;
&lt;p&gt;Bien sûr un agent ne peux pas tout résoudre, comme le pulling ne peux pas tout résoudre non plus. Il faut une allisance des deux pour avoir une solution complète et scalable.&lt;/p&gt;
&lt;p&gt;C'est un POC en cours, juste pour proposer des idées. Je prends tous les retours sur tout cela (づ｡◕‿‿◕｡)づ &lt;/p&gt;</content><category term="shinken"></category><category term="agent"></category></entry></feed>